==============================================================================

                    ターゲットボード用サンプル補足説明書
                      MiSPO MiNET-7042 編(minet-7042.TXT)
                                2003年 9月12日

                Copyright (c) MiSPO Co., Ltd. 1991-2003
                       http://www.mispo.co.jp/

==============================================================================


■ はじめに

本ファイルには、ターゲットボードに固有な情報が記載されています。
CPUに固有な情報に関してはSH.TXTを参照ください。
ネットワークに固有な情報に関してはTCPIP.TXTを参照ください。


■ ファイル名規則

        vecXXX.asm ------- ベクターテーブル
        netXXX.XXX ------- ネットワークサンプル関連ファイル
        n4iXXX.c --------- 周期タイマー・割込み管理
        nosXXX.c --------- シリアルドライバ
        smpXXX.XXX ------- 非ネットワークのサンプル関連ファイル


■ ファイル構成

        vec7042c.sh ------ ベクタテーブル設定の例          （Green Hills）
        vec7042g.asm ----- ベクタテーブル設定の例          （exeGCC）
        vec7042h.asm ----- ベクタテーブル設定の例          （ルネサスC）
        vec7042i.s70 ----- ベクタテーブル設定の例          （EW）
        vec7042x.xas ----- ベクタテーブル設定の例          （GAIO）

        init7040.c ------- SH7040シリーズ ルネサスC初期設定ルーチンの例
        initicc.c -------- SH7040シリーズ EW 初期設定ルーチンの例
        startup.xas ------ スタートアップルーチンの例         （GAIO）
        mb86964.c -------- MB86964 LANコントローラドライバサンプルソース
        nonethw.c -------- ターゲットボード用LANハードウェア依存部のソース
        mi42eep.c -------- MiNET-7042 EEPROM 入出力関数
        mi42fls.c -------- MiNET-7042 ボード フラッシュメモリアクセス関数
        mi42rtc.c -------- MiNET-7042 RTC-4513 時計入出力関数
        mi42tes.c -------- MiNET-7042 ボードテスト処理

        n4i7040.c -------- SH7040シリーズ インターバル割込みハンドラ
        nos7040.c -------- SH7040シリーズ シルアル入出力ドライバ

        net7042.c -------- ネットワークサンプルプログラム
        smp7042.c -------- サンプルプログラム

        nonecfg.c -------- ネットワークサンプル用コンフィグレーションファイル

        mb86964.h -------- MB86964 LANコントローラドライバサンプルソース
        net7042.h -------- MiNET-7042 定義ヘッダ
        nonethw.h -------- ターゲットボード用LANハードウェア依存部ヘッダ
        nos7040.h -------- SH7040シリーズシリアル入出力ドライバ
        sh7040.h  -------- SH7040シリーズ内蔵周辺モジュール定義

        minet-7042.txt --- ターゲットボード用サンプル補足説明書

        nos70401.c ------- nos7040.cのHew用コピー

■ ロードモジュール生成用ファイル構成

+-----------------------------------------------------------------------------
|
|                                  ルネサスC
|
+-----------------------------------------------------------------------------

    SHC5 ----------------- ルネサスC Ver.5 用ディレクトリ
    SHC6 ----------------- ルネサスC Ver.6 用ディレクトリ
    SHC7 ----------------- ルネサスC Ver.7 用ディレクトリ

        net7042_hew ------ HEW 用ディレクトリ
        smp7042_hew ------ HEW 用ディレクトリ
        MiNET_7042.hws --- HEW 用ワークスペースファイル

        ・ROM化用
        net7042h.mak ----- サンプルプログラム makefile
        net7042h.sub ----- リンカのサブコマンドファイル
        smp7042h.mak ----- サンプルプログラム makefile
        smp7042h.sub ----- リンカのサブコマンドファイル

        ・ComputexリモートデバッガのRAMロード用（ルネサスC Ver.5 用のみ）
        net7042hr.mak ---- サンプルプログラム makefile
        net7042hr.sub ---- リンカのサブコマンドファイル
        smp7042hr.mak ---- サンプルプログラム makefile
        smp7042hr.sub ---- リンカのサブコマンドファイル

+-----------------------------------------------------------------------------
|
|                                Green Hills
|
+-----------------------------------------------------------------------------

    GHS ------------------ Green Hills 用ディレクトリ

        net7042c.mak  ---- サンプルプログラム makefile
        net7042c.cmd  ---- リンクオブジェクトリストファイル
        net7042c.lnk  ---- リンカコマンドファイル
        smp7042c.mak ----- サンプルプログラム makefile
        smp7042c.cmd ----- リンクオブジェクトリストファイル
        smp7042c.lnk ----- リンカコマンドファイル

+-----------------------------------------------------------------------------
|
|                                  exeGCC
|
+-----------------------------------------------------------------------------

    GCC ------------------ exeGCC 用ディレクトリ

        net7042g.mak  ---- サンプルプログラム makefile
        net7042g.cmd  ---- リンクオブジェクトリストファイル
        net7042g.lnk  ---- リンカコマンドファイル
        smp7042g.mak ----- サンプルプログラム makefile
        smp7042g.cmd ----- リンクオブジェクトリストファイル
        smp7042g.lnk ----- リンカコマンドファイル

+-----------------------------------------------------------------------------
|
|                                 IAR EW
|
+-----------------------------------------------------------------------------

    EW ----------------- IAR EW用ディレクトリ

        net7042.prj ------ EW 用ネットワークサンプル・プロジェクトファイル
        smp7042.prj ------ EW 用サンプル・プロジェクトファイル

        net7042i.mak  ---- サンプルプログラム makefile
        net7042i.xcl  ---- リンカコマンドファイル
        smp7042i.mak ----- サンプルプログラム makefile
        smp7042i.xcl ----- リンカコマンドファイル

+-----------------------------------------------------------------------------
|
|                               GAIO XASS-V
|
+-----------------------------------------------------------------------------

    GAIO ----------------- GAIO XASS-V 用ディレクトリ

        net7042x.mak  ---- サンプルプログラム makefile
        net7042.XLS   ---- 拡張リンカコマンドラインファイル
        smp7042x.mak  ---- サンプルプログラム makefile
        smp7042.XLS   ---- 拡張リンカコマンドラインファイル

        opt.com      ----- オプションパラメータファイル

■ ROMエミュレータ使用時のデバッグ前に

          ROMエミュレータを使用してデバッグする場合は、環境設定に注意すべき
          点があります。

RAM アクセスを有効にする

          ROMエミュレータ自体も RAMを使用するため、RAMをアクセスできるよう
          立ち上げ時に初期化する必要があります。
          本ボードでは、全RAM領域をアクセス出来るようにするためには、アドレ
          スバスの A18,A19 を有効にするよう下記のコードを記述します。
          （コンピューテックス ROMICE64ではユーザーカスタマイズプログラム、
            京都マイクロコンピュータPARTNER-ETⅡではモニタプログラムが、これ
            に該当します。）

          |         MOV.W   PBCR2,r3
          |         MOV.W   H_A000,r0
          |         MOV.W   r0,@r3
          |            :
          |            :
          |            :
          | PBCR2:  .DATA.W  H'839a   ; アセンブラの書式は、使用される
          | H_A000: .DATA.W  H'a000   ; 環境に合わせます。

VBR 初期値の設定

          ROMエミュレータも割込みを使用するため、ユーザーが使用する VBRアドレ
          スと一致させる必要があります。
          具体的には n4i7040.c の INTVECマクロの値と同じ値を、ROMエミュレータ
          の VBR初期値として設定します。
          サンプルプログラムでは、RAMの先頭番地である 0x400000番地を使用して
          います。

モニタコードアドレス

          ROMエミュレータが使用するモニタコード領域を指定する必要があります。
          ユーザープログラム領域と重複しないように配置し、一般的には、ROM領域
          の末尾に配置します。

          例）4MBit ROM の場合
              ROM の占有域は 0x00000～0x7FFFF のため、モニタコードアドレスは
              0x7F000 を指定します。

モニタデータ開始アドレス又はモニタのスタック初期値

          ROMエミュレータもスタックを使用し、スタック初期値を指定する必要が
          あります。また、モニタ用のデータ領域が必要になる機種もありますので
          これらを考慮して指定します。

          例）本ボードは 8Mbit RAM の為
              RAM の占有域は 0x400000～0x4FFFFF ですが、サンプルでは 0x480000
              ～0x4FFFFF をRAMファイルとして使用しています。そのため、モニタ
              データ開始アドレス＆スタック初期値は 0x47FE00 を指定します。


■ 割込みハンドラ

          割込みハンドラもＣ言語で記述できますが、以下のようにコードが展開さ
          れることを確認してください。

ルネサスCでのコード展開例

        お使いのコンパイラのバージョンをご確認の上"C:\NORTi\DOC"フォルダに有
        るバージョン別ドキュメントファイル SHCV7xx.txt SHCV6xx.txt SHCV5xx.txt
        のSH-2の項を参照し対応するコードが展開されることを確認してください。

Green Hills でのコード展開例

          INTHDR は、__interrupt void と定義されています。
          割込みハンドラのコンパイルには、必ず、最適化オプション -O を付け、
          ent_int 呼び出しの前に、不要な命令が生成されないよう注意してくだ
          さい。  デバッグ情報生成 -g オプションの併用は可能です。
          また、割込み優先度がカーネルレベルより高い割込みハンドラの場合は、
          この制限はありませんが ent_int, ret_int を含めた一切のシステムコール
          を使用することが出来ません。

          | INTHDR inthdr(void)
          | {
          |     ent_int();
          |        :
          |     ret_int();
          | }

          | _inthdr:
          |         mov.l   r7,@-sp        ; コンパイラが
          |         mov.l   r6,@-sp        ; PR と R7 ～ R0 を退避するコード
          |         mov.l   r5,@-sp        ; を生成します
          |         mov.l   r4,@-sp
          |         mov.l   r3,@-sp
          |         mov.l   r2,@-sp
          |         mov.l   r1,@-sp
          |         mov.l   r0,@-sp
          |         sts.l   pr,@-sp
          |         mov.l   .L??,r1        ; _ent_int 呼出し
          |         jsr     @r1
          |         nop
          |          :
          |         mov.l   .L??,r1        ; _ret_int 呼出し
          |         jsr    @r1             ; _ret_intで直接割込みリターンする
          |         nop                    ; ので以降のコードは使われません
          |         lds.l   @sp+,pr
          |         mov.l   @sp+,r0
          |         mov.l   @sp+,r1
          |         mov.l   @sp+,r2
          |         mov.l   @sp+,r3
          |         mov.l   @sp+,r4
          |         mov.l   @sp+,r5
          |         mov.l   @sp+,r6
          |         mov.l   @sp+,r7
          |         rte
          |         nop
          |         .align  4
          | .L??:   .data.l _ent_int
          | .L??:   .data.l _ret_int

exeGCC でのコード展開例

          割込みハンドラのコンパイルには、必ず、最適化オプション -O2 を
          付け、ent_int 呼び出しの前に、不要な命令が生成されないよう注意して
          ください。  デバッグ情報生成 -g オプションの併用は可能です。
          ただし、割込み優先度がカーネルレベルより高い割込みハンドラを記述する
          ことは出来ません。

          | INTHDR inthdr(void)
          | {
          |     ent_int();
          |        :
          |     ret_int();
          | }

          | _inthdr:
          |         mov.l   r14,@-r15       ! コンパイラが常にこの３行の
          |         sts.l   pr,@-r15        ! コードを生成
          |         mov     r15,r14         !
          |
          |         mov.l   r3,@-r15        ! ent_int マクロ asm 文 で
          |         mov.l   r2,@-r15        ! R3 ～ R1 を退避します
          |         mov.l   r1,@-r15
          |         mov.l   L?,r1           ! _ent_int 呼出し
          |         jsr     @r1
          |         nop
          |
          |          :
          |
          |         mov.l   L?,r1           ! _ret_int 呼出し
          |         jsr     @r1             ! _ret_intで直接割込みリターンする
          |         nop                     ! ので以降のコードは使われません
          |         mov     r14,r15
          |         lds.l   @r15+,pr
          |         rts
          |         mov.l   @r15+,r14
          |
          |         .align  2
          | L?:
          |         .long   _V3_ENT_INT
          | L?:
          |         .long   _ret_int

EW/ICC でのコード展開例

          割込みハンドラのコンパイルには、最適化オプション -Z3 以下及び -S3以下
          にして ent_int 呼び出しまでのレジスタの扱いが変わらないように注意して
          ください。  デバッグ情報生成 --debug オプションの併用は可能です。

          | INTHDR inthdr(void)
          | {
          |     ent_int();
          |        :
          |     ret_int();
          | }

          | inthdr:
          |         sts.l   PR,@-R15　　    ; コンパイラが生成
          |
          |         mov.l   R0,@-R15        ; ent_int マクロ asm 文で退避
          |
          |         mov.l  ??inthdr_0,R0    ; v4_ent_int
          |         jsr    @R0
          |         nop
          |
          |          :
          |
          |         mov.l  ??inthdr_0+4,R0  ; ret_int 呼出し
          |         jsr     @R0             ; ret_intで直接割込みリターンする
          |         nop                     ; ので以降のコードは使われません
          |
          |         lds.l   @R15+,PR
          |         rts
          |         nop
          |
          |
          |??inthdr_0:
          |         DATA.L v4_ent_int
          |         DATA.L ret_int

GAIO XASSV でのコード展開例

        割込みハンドラはＣ言語で記述できます。INTHDR は、__interrupt void
        と定義されています。

        ｜INTHDR inthdr(void)
        ｜{
        ｜    ent_int();
        ｜       :
        ｜    ret_int();
        ｜}

        割込み優先度がカーネルレベル以下の割込みハンドラのコンパイルには、
        必ず、デバッグオプション -d は付けないでください。ent_int 呼び出しの
        前に、不要な命令が生成されないよう注意し、以下のようなコードが展開さ
        れることを確認してください。
        また、割込み優先度がカーネルレベルより高い割込みハンドラの場合は、
        この制限はありませんが ent_int, ret_int を含めた一切のシステムコール
        を使用することが出来ません。


        ｜_inthdr:
        ｜        sts.l   pr,@-r15
        ｜        sts.l   macl,@-r15
        ｜        sts.l   mach,@-r15
        ｜        mov.l   r10,@-r15
        ｜        mov.l   S1__v3_ent_int,r10
        ｜        mov.l   r11,@-r15
        ｜        mov.l   r12,@-r15
        ｜        mov.l   r13,@-r15
        ｜        mov.l   r3,@-r15
        ｜        mov.l   r4,@-r15
        ｜        mov.l   r5,@-r15
        ｜        mov.l   r6,@-r15
        ｜        mov.l   r7,@-r15
        ｜        jsr     @r10
        ｜        mov.l   r0,@-r15
        ｜
        ｜         :
        ｜        mov.l   S1__v3_ret_int,r10
        ｜        jsr     @r10
        ｜        nop
        ｜         :
        ｜        rte
        ｜        nop
        ｜
        ｜        bnd 4
        ｜        S1__v3_ret_int: dd _v3_ret_int
        ｜        S1__v3_ent_int: dd _v3_ent_int


■ 周期タイマ割込みハンドラ（SH7040シリーズ）

          SH7040シリーズ の周期タイマ割込みハンドラと、割込み管理機能は、
          n4i7040.c に定義されています。
          オプション指定は <op> と略記しています。

使用するハードウェア

          SH7040 シリーズ内蔵コンペアマッチタイマ（CMT）を周期タイマとして
          使用しています。
          それ以外のタイマを用いる場合は、ユーザーで改造してください。

割込み周期の指定

          割込み周期は、MSEC マクロで決まります。デフォルトは 10 msec です。
          例えば、5 msec に変更する場合は、次の様にコンパイルしてください。

          (例) shc <op> -def=MSEC=5 n4i7040.c  ----------------- ルネサスC
          (例) ccsh <op> -DMSEC=5 n4i7040.c  ------------------- Green Hills
          (例) gcc <op> -DMSEC=5 n4i7040.c  -------------------- exeGCC
          (例) iccsh <op> -DMSEC=5 n4i7040.c  ------------------ EW
          (例) xccv n4i7040.c <op> -DMSEC=5 -------------------- GAIO XASSV

クロックの指定

          ソースクロックのデフォルトは 24 MHz です。変更する場合 は CLK マク
          ロを定義してコンパイルしてください。値は [Hz] 単位の周波数です。
          例えば、28.63636MHz に変更する場合は、次の様にコンパイルしてください。

          (例) shc <op> -def=CLK=28636360 n4i7040.c  ----------- ルネサスC
          (例) ccsh <op> -DCLK=28636360 n4i7040.c  ------------- Green Hills
          (例) gcc <op> -DCLK=28636360 n4i7040.c  -------------- exeGCC
          (例) iccsh <op> -DCLK=28636360 n4i7040.c  ------------ EW
          (例) xccv n4i7709.c <op> -DCLK=28636360 -------------- GAIO XASSV

チャネル番号の指定

          CH マクロで、使用する CMT チャネルを指定できます。（CH=0～1）
          デフォルトは CH=0 です。
          例えば、CH1 に変更する場合は、次の様にコンパイルしてください。

          (例) shc <op> -def=CH=1 n4i7040.c  ------------------- ルネサスC
          (例) ccsh <op> -DCH=1 n4i7040.c  --------------------- Green Hills
          (例) gcc <op> -DCH=1 n4i7040.c  ---------------------- exeGCC
          (例) iccsh <op> -DCH=1 n4i7040.c  -------------------- EW
          (例) xccv n4i7040.c <op> -DSH=1 ---------------------- GAIO XASSV

割込みベクタテーブル

          def_inh システムコールによる割込みベクタの設定を可能にするため、
          RAM 先頭（0400000H 番地から 1024 バイト）に、割込みベクタテーブルが
          あると想定しています。
          割込みベクタテーブルの領域が、他の領域と重ならない様にリンクしてく
          ださい。（重なってもリンカで警告は出ません!）
          割込みベクタテーブル先頭アドレスは INTVEC マクロで、サイズ（バイト
          数）は、INTVSZ マクロで変更できます。
          例えば、800000 番地から 628 Byte に変更する場合は、次の様にコンパ
          イルしてください。

          (例) shc <op> -def=INTVEC=0x800000,INTVSZ=628 n4i7040.c
                                              ------------------ ルネサスC
          (例) ccsh <op> -DINTVEC=0x800000 -DINTVSZ=628 n4i7040.c
                                              ------------------ Green Hills
          (例) gcc <op> -DINTVEC=0x800000 -DINTVSZ=628 n4i7040.c
                                              ------------------ exeGCC
          (例) iccsh <op> -DINTVEC=0x800000 -DINTVSZ=628 n4i7040.c
                                              ------------------ EW
          (例) xccv n4i7040.c <op> -DINTVEC=0x800000 -DINTVSZ=628
                                            ------------------ GAIO XASS-V

          割込みベクタテーブルが ROM 上にあり、def_inh に依らず直接ベクタを定
          義する場合、INTVSZ=0 としてください。
          この場合、def_inh システムコールは機能しません。

割込み優先順位

          本ハンドラの、デフォルトの割込み優先順位は、7 です。
          これを変更する場合、IP マクロを定義してコンパイルしてください。
          ただし、カーネルより高優先にはできません。（IP ≦ KNL_LEVEL）
          本ハンドラより高優先度の割込みハンドラが有る場合、多重割込みが起こ
          ります。
          例えば、割込み優先順位 2 に変更する場合は、次の様にコンパイルして
          ください。

          (例) shc <op> -def=IP=2 n4i7040.c  ------------------- ルネサスC
          (例) ccsh <op> -DIP=2 n4i7040.c  --------------------- Green Hills
          (例) gcc <op> -DIP=2 n4i7040.c  ---------------------- exeGCC
          (例) iccsh <op> -DIP=2 n4i7040.c  -------------------- EW
          (例) xccv n4i7040.c <op> -DIP=2 ---------------------- GAIO XASSV

時間情報の取り出し

          時間情報を取り出す事が出来ないデバッガを用いて、RTOS対応機能を使用
          する場合は HOOKマクロを指定することにより、ソフト的に時間情報を生成
          します。
          ただし、本来はマイクロ秒単位の情報を返すべきですが、オーバーヘッド
          が大きくなるため、システムクロックの積算値で代用しています。

          例えば、コンピューテックスROMICE64で RTOSデバッグライブラリを使用し
          ている場合は、次の様にコンパイルしてください。

          (例) shc <op> -def=HOOK=2 n4i7040.c  ----------------- ルネサスC
          (例) ccsh <op> -DHOOK=2 n4i7040.c  ------------------- Green Hills
          (例) gcc <op> -DHOOK=2 n4i7040.c  -------------------- exeGCC
          (例) iccsh <op> -DHOOK=2 n4i7040.c  ------------------ EW
          (例) xccv n4i7040.c <op> -DHOOK=2 -------------------- GAIO XASSV

dis_int, ena_int

          割込みレベル設定のビット配置が不規則な SH7040シリーズ の割込みコント
          ローラでは、汎用的な dis_int, ena_int システムコールの実装が複雑と
          なってしまいます。
          この２つのシステムコールは用意していませんので、個別の割込み禁止許
          可を行いたい場合は、各制御レジスタを直接アクセスしてください。


■ シリアル入出力ドライバ(SH7040シリーズ）

          SH7040シリーズ ののシリアル入出力ドライバは、nos7040.c に定義されて
          います。
          （コンパイルオプションは <op> と省略）
          ここに定義されている１チャネル分の処理は、nosio.c のシリアル入出力
          関数経由で呼び出されます。

カーネルの指定

        NORTi Version4 カーネルのシステムコールを使用することを宣言するため
        V4 マクロを定義します。（V3 マクロを定義した場合は、NORTi3 カーネル
        を使用か、NORTi3 互換システムコールとしてコンパイルされます。）

          (例) shc <op> -def=V4 nos7040.c  -------------------- ルネサスC
          (例) gcc <op> -DV4 nos7040.c  ----------------------- exeGCC
          (例) ccsh <op> -DV4 nos7040.c  ---------------------- Green Hills
          (例) iccsh <op> -DV4 nos7040.c  --------------------- EW
          (例) xccv nos7040.c <op> -DV4 ----------------------- GAIO XASSV

チャネル番号の指定

          CH マクロで、論理チャネル番号を指定できます。（無指定時は、CH=0）
          CH は 0～3 を指定できます。

          CH0, CH1 マクロで、物理チャネル番号を変更できます。
          CH0 を定義すると、物理チャネル0 を使うようにコンパイルされます。
          CH1 を定義すると、物理チャネル1 を使うようにコンパイルされます。

          チャネル0 とチャネル1 の両方をリンクする場合は、重複しないモジュー
          ル名となるようコンパイルしてください。

          (例) shc <op> nos7040.c  ----------------------------- ルネサスC
               shc <op> -def=CH=1 -ob=nos7ch1.o nos7ch1.c

          (例) gcc <op> nos7040.c  ----------------------------- exeGCC
               gcc <op> -DCH=1 -onos7ch1.o nos7040.c

          (例) ccsh <op> nos7040.c  ---------------------------- Green Hills
               ccsh <op> -DCH=1 -o nos7ch1.o nos7040.c

          (例) iccsh <op> nos7040.c  --------------------------- EW
               iccsh <op> -DCH=1 --module_name=nos7ch1 -o nos7ch1 nos7040.c

          (例) xccv nos7040.c <op>  ---------------------------- GAIO XASSV
               xccv nos7040.c <op> -DCH=1 -o os7ch1.xas

ボーレートジェネレータ

          ソースクロックのデフォルトは 24 MHz です。変更する場合 は CLK マク
          ロを定義してコンパイルしてください。値は [Hz] 単位の周波数です。
          例えば、28.63636MHz に変更する場合は、次の様にコンパイルしてください。

          (例) shc <op> -def=CLK=28636360 nos7040.c  ----------- ルネサスC
          (例) ccsh <op> -DCLK=28636360 nos7040.c  ------------- Green Hills
          (例) gcc <op> -DCLK=28636360 nos7040.c  -------------- exeGCC
          (例) iccsh <op> -DCLK=28636360 nos7040.c  ------------ EW
          (例) xccv nos7040.c <op> -DCLK=28636360 -------------- GAIO XASSV

送受信バッファサイズの指定

          受信／送信バッファのサイズを、BUFSZ マクロにより定義してコンパイル
          してください。受信バッファと異なるサイズの送信バッファを用いる場合
          は、さらに TXBUFSZ マクロを定義してください。
          未指定時は、受信／送信バッファ共 1024 バイトとなります。

          (例) 受信バッファ, 送信バッファ共 128 バイト BUFSZ=128
          (例) 受信バッファ128, 送信バッファ 64 バイト BUFSZ=128, TXBUFSZ=64

ソフトウェアフロー制御

          XON/XOFF キャラクタによるフロー制御を用いない場合、NOXON マクロを定
          義してコンパイルしてください。コードサイズと処理速度を節約できます。

ハードウェアフロー制御

          RTS を ON/OFF する次の関数を、外部に定義してください。

          void rts0_on(void); -------------------- 物理チャネル0 RTS 信号 ON
          void rts0_off(void); ------------------- 物理チャネル0 RTS 信号 OFF
          void rts1_on(void); -------------------- 物理チャネル1 RTS 信号 ON
          void rts1_off(void); ------------------- 物理チャネル1 RTS 信号 OFF

          RTS 信号出力が無い場合、rts?_on/rts?_off 関数は何もせずリターンして
          ください。
          RTS 信号ポートのビット操作が他タスクと競合する場合を考慮して、本ド
          ライバからは、上記関数を割り込み禁止（レベル15）で呼び出しています。
          他タスクからも割り込み禁止状態で、同ポートを操作してください。

          RTS/CTS 信号によるフロー制御を行う場合、CTS ON によるレベルセンス割
          込みが必要です。
          チャネル0 /CTS 信号 を /IRQ0(PA2) 端子に接続してください。
          チャネル1 /CTS 信号 を /IRQ1(PA5) 端子に接続してください。
          他の /IRQn を用いる場合は、本ソースファイルの変更が必要です。

          ハードフローを用いない場合は、NOFLW マクロ定義してコンパイルしてく
          ださい。コードサイズと処理速度を節約できます。
          また、rts?_on/rts?_off 関数の定義も不要となります。

割込み優先順位

          本ハンドラの、デフォルトの割込み優先順位は、7 です。
          これを変更する場合、IP マクロを定義してコンパイルしてください。
          ただし、カーネルより高優先にはできません。（IP ≦ KNL_LEVEL）
          本ハンドラより高優先度の割込みハンドラが有る場合、多重割込みが起こ
          ります。
          例えば、割込み優先順位 5 に変更する場合は、次の様にコンパイルして
          ください。

          (例) shc <op> -def=IP=5 nos7040.c  ------------------- ルネサスC
          (例) ccsh <op> -DIP=5 nos7040.c  --------------------- Green Hills
          (例) gcc <op> -DIP=5 nos7040.c  ---------------------- exeGCC
          (例) iccsh <op> -DIP=5 nos7040.c  -------------------- EW
          (例) xccv nos7040.c <op> -DCLK=IP=2  ----------------- GAIO XASSV

ポートの初期化

          SCI と兼用になっているポートA は、外部で、次の例の様に初期化してく
          ださい。（下記の例では、PA の他の端子は入力と仮定）

          #include "nos7040.h"
          sfr_setw(IO_PADRL, PA_TXD1|PA_TXD0); ---- TXD1,TXD0端子"1"(ﾌﾞﾚｰｸOFF)
          sfr_setw(PFC_PAIORL, PA_TXD1|PA_TXD0); -- TXD1,TXD0端子出力方向
          sfr_setw(PFC_PACRL2, 0x0145); ----------- TXD1,RXD1,TXD0,RXD0 機能

          RTS/CTS 信号によるフロー制御を行う場合は、次の例の様に初期化してく
          ださい。

          #define PA_RTS0  0x40  -----------------  PA6 チャネル0 RTS 信号(例)
          #define PA_RTS1  0x80  -----------------  PA7 チャネル1 RTS 信号(例)
          sfr_setw(IO_PADRL, PA_TXD1|PA_TXD0|PA_RTS1|PA_RTS0);
          sfr_setw(PFC_PAIORL, PA_TXD1|PA_TXD0|PA_RTS1|PA_RTS0);
          sfr_setw(PFC_PACRL2, 0x0d75); ---------- IRQ1(CTS1),IRQ0(CTS0)機能

          この場合の rts?_on/rts?_off 関数例は次の通りです。

          void rts0_on(void)  { sfr_clrw(IO_PADRL, PA_RTS0); }
          void rts0_off(void) { sfr_setw(IO_PADRL, PA_RTS0); }
          void rts1_on(void)  { sfr_clrw(IO_PADRL, PA_RTS1); }
          void rts1_off(void) { sfr_setw(IO_PADRL, PA_RTS1); }

未サポート機能

          調歩同期式モードのみで、クロック同期式モードはサポートしていません。
          内蔵ボーレートジェネレータのみで、外部クロック入出力はサポートして
          いません。
          DTR 信号出力、DSR 信号入力、CD 信号入力はサポートしていません。
          SH7040シリーズ 特有のマルチプロセッサモードはサポートしていません。


■ サンプルプログラムについて

          付属のサンプルには特定のハードウェアに依存している部分があります。
          特に、次のポイントに注意してカスタマイズしてください。
          smp7042 の RAM を 2000000～201FFFF に変更する例を示します。（コンパ
          イルオプションは <op> と省略）

割込みベクタ

          ベクタ領域の定義（INTVEC マクロ）を、RAM 先頭に修正して下さい。アド
          レスは 16進数なので、0x を付け忘れないで下さい。

          (例) smp7042h.mak: shc <op> -def=INTVEC=0x2000000 n4i7040.c -- ルネサスC
               smp7042c.mak: ccsh <op> -DINTVEC=0x2000000 n4i7040.c  --- Green
               smp7042g.mak: gcc <op> -DINTVEC=0x2000000 n4i7040.c  ---- exeGCC
               smp7042i.mak: iccsh <op> -DINTVEC=0x2000000 n4i7040.c  -- EW
               smp7055x.mak: xccv n4i7040.c <op> -DINTVEC=0x2000000 ---- GAIO

データ領域

          データ領域を、RAM 先頭+400（割込みベクタの次）に修正してください。

          (例) smp7042h.sub: START P,C,D(100),R,B,STACK(2000400)  ------ ルネサスC
               smp7042g.lnk: .data 0x2000400  -------------------------- Green
               smp7042c.lnk: .data 0x2000400  -------------------------- exeGCC
               smp7042i.xcl: -Z(DATA).........=0200400-xxxxxxx  -------- EW
               smp7055.XLS:
                   /addr = 02000400
                   /sect = D1*|comm (data = _DATA1) -------------------- GAIO


スタックポインタ初期値

          SP 初期値を RAM 最終アドレス+1 に修正してください。

          (例) smp7042h.mak: asmsh vec7042.asm <op> -def=_INIT_STACK="H'02020000"
                                                 ----------------------- ルネサスC
               smp7042g.lnk: __stack_init = 0x2020000  ----------------- exeGCC
               vec7032x.xas: STACK_END   equ 02020000h ----------------- GAIO

          メモリを有効に利用できるよう、スタック容量を修正してください。

          (例) smp7042c.lnk: .stack   align(4) pad(0x?????)  ----------- Green
          (例) smp7042i.xcl: -Z(DATA).....,CSTACK+?????,...  ----------- EW

クロック

          クロックの定義（CLK マクロ）を、システムに合わせて修正してください。
          （下記の例では 16 MHz）

          (例) smp7042h.mak: shc <op> -def=CLK=16000000 n4i7040.c ------ ルネサスC
               smp7042g.mak: gcc <op> -DCLK=16000000 n4i7040.c  -------- exeGCC
               smp7042c.mak: ccsh <op> -DCLK=16000000 n4i7040.c  ------- Green
               smp7042i.mak: iccsh <op> -DCLK=16000000 n4i7040.c  ------ EW
               smp7032x.mak: xccv <op> -DCLK=16000000 n4i7055.c -------- GAIO

ハードウェア初期化

          プロセッサの初期化（ウェイト数設定）やポート初期化部分も必要に応じ
          てユーザーで作成してください。
          メモリの初期設定などプログラムの最初に処理が必要な場合、ベクタ設定
          vec7042?.asm(sh, s70) のリセットベクタに追加してください。


■ トラブル・シューティング

main 関数まで来ない時

        NORTi を組み込んだプログラムでも、main 関数で syssta(); を実行する
        までは、通常のシングルタスクのプログラムです。
        NORTi を組み込まない単純なプログラムで main 関数まで来るように、ス
        タートアップを見直して下さい。
        ・リセットベクタが正しく設定されているか。
        ・RAM 使用の前に、チップセレクト（バス幅）等の設定、DRAM の初期化が
          終わっているか。
        ・各セクションのアドレス定義は正しいか。

sysini でハングアップする時

        sysini() から呼び出す intini() 関数で、割込みベクタの初期設定を行っ
        ています。intini 関数にブレークポイントを設定し、初期化内容がシステ
        ムと合致しているか確認してください。
        また、スタックポインタが正しいか確認してください。SH では、sysini()
        に来るまでスタックを使用しない場合があり、必ずスタックを使用する
        sysini() でハングアップすることがあります。

syssta からリターンする時

        先に実行した cre_??? や sta_tsk でエラーがあった場合、syssta を実行
        しても、マルチタスクへ移行せずにリターンしてきます。
        システム変数 SYSER（int 型）のエラーコードをウォッチしながら、main
        をステップ実行し、原因を特定して下さい。ID 上限のチェックでエラーと
        なることが考えられます。他に、cre_??? でエラーとなる場合、メモリ不
        足が考えれれます。

get_mpl, get_mpf や rcv_mbx でハングアップする時

        引数にポインタへのポインタを渡しているか（& を付け忘れていないか）
        確認してください。

rel_mpl, rel_mpf や snd_mbx でハングアップする時

        メモリブロックやメッセージのアドレスが奇数でないか調べてください。

割込みがかかると暴走する時

        main 関数は無事に通過するが、マルチタスクへ移行しようとすると暴走す
        る場合、まず、割込みハンドラを外してみてください。具体的には、
        intsta(); を外してください。これで暴走が止まる場合、割込みハンドラ
        への分岐処理が正しいか見直して下さい。また、割込みハンドラのコード
        展開も確認して下さい。
-------------------------------------------------------------------------------

