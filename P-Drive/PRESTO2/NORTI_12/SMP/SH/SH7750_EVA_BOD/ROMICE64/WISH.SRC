;*****************************************************************************
;*     ＣＳＩＤＥ９５ ｆｏｒ ＲＯＭＩＣＥ６４  ＳＨ４                        *
;*                                                                           *
;*     評価キット版 SH7750評価ボード SH7750 EVA BOD-02用                     *
;*     ユーザ・カスタマイズ・プログラム  Ｖｅｒ１．００                      *
;*                                                                           *
;*     Copyright (C) 1999 COMPUTEX CO.,LTD.                                  *
;*****************************************************************************
;【注意】
;・このプログラムはターゲット・システムにダウンロードされるモニタ・
;  プログラムに組み込まれます。
;・絶対アドレスへの分岐命令は使用してはいけません。
;  分岐する時は必ず相対アドレスで指定して下さい。
;・使用されるエンディアンで、作成して下さい。
;・DMA対応のプログラムを含んでいます。
;  使用される場合は、 ";DMA" を削除して下さい。
;   対応内容
;   ・モニタ実行中（ブレーク中）は、ＤＭＡＣを停止。
;   ・ＤＭＡＯＲのＮＭＩＦを常にＯＦＦにする。
;   注意事項
;   ・モニタのデータ領域、ＳＰの領域を破壊した場合、動作は保障できません。
;   ・モニタ実行は常にＢＬ＝１で動作しています。もしモニタ実行中にＤＭＡ割り込
;     みが発生した場合は、次のユーザ実行時に割り込みが入ります。
;   ・常に、ＮＭＩＦをクリアしていますので、ユーザＮＭＩを使用されている場合、
;     実際の動作と異なる場合があります。
;   ・ブレーク時、ＤＭＡＯＲの値をモニタのデータ領域に取得し、実行時にその値を
;     ＤＭＡＯＲに戻します。よってメモリウィンドウで値を書き換えても、実行時
;     には反映されません。ＤＭＡＯＲの操作は、[ﾃﾞｰﾀ-I/Oの操作]で行って下さい。
;   ・I/Oの操作でのアドレスは、Ｐ４領域で行って下さい。
;・ユーザカスタマイズプログラムからモニタのデータ領域の追加が可能です。
;  ＤＭＡ対応で使用しています。
;  DMA転送機能をCPUが持っていますが、NMIが発生するとDMA転送がとまってしまいます。
;  また、エミュレーションメモリをCSIDEから書き換えた場合に、データバスがホスト
;  に接続されるのでＣＰＵからエミュレーションメモリが見えません。その時にDMA転
;  送が動作すると、間違った内容が転送される恐れがあります。
;  以上のことにより、ブレーク中はDMA転送を停止する方が安全です。
;  DMAはDMACポートで操作可能です。
;  データ領域にDMACの内容を覚えておく領域を用意し、その内容をプログラム実行時、
;  ブレーク時に操作します。
;  各ルーチンの処理内容です。(実際の処理は各ルーチンをご覧下さい。）
;  mon_init:
;    DMACポートの初期値をデータ領域にセットします。
;  user_exec:
;    DMACポートの内容をデータ領域から持ってきます。その際NMIFもクリアします。
;  user_break:
;    DMACポートの内容をデータ領域にコピーし、DMA転送を停止します。
;  [注意]
;  ここで操作するI/Oポートはメモリウィンドウで変更しても実行時に反映されません。
;  I/Oポートの操作は、[ﾃﾞｰﾀ-I/Oの操作]で行って下さい。その際、アドレスは、
;  port_address 領域で設定したアドレスを使用して下さい。
;-----------------------------------------------------------------------------

		.org	0
start:
		bra	user_exec
		nop
		bra	user_break
		nop
		bra	mon_init
		nop
		bra	mmu_func
		nop

;*****************************************************************************
;*・インフォメーションテーブル
;*・このテーブルは変更しないで下さい。
;*****************************************************************************
	.ALIGN	4
version_check:                         ;ユーザカスタマイズバージョンV1.00
       .DATA.L	H'00000001
version:                               ;カスタマイズプログラムのレビジョン
       .DATA.L	H'00000000
information_area_start_address:        ;インフォメーションアドレススタート番地
       .DATA.L	information_area_start
       .DATA.L	information_area_end
information_romice_monitor_data:       ;ROMICE64の使用するデータ領域
       .DATA.L	romice_monitor_data
       .DATA.L	romice_monitor_data_end
information_port_address:              ;監視するアドレス
       .DATA.L	port_address
       .DATA.L	port_address_end
information_port_init_data:            ;監視するアドレスの初期値
       .DATA.L	port_init_data
       .DATA.L	port_init_data_end
information_port_data_bus:             ;監視するアドレスのバス幅
       .DATA.L	port_data_bus
       .DATA.L	port_data_bus_end
infotmation__end:
		nop

;*****************************************************************************
;*・このテーブルは変更しないで下さい。
;*****************************************************************************
mmu_func_ret:
		bra	start-4
		nop

;*****************************************************************************
;*・ユーザ・プログラムを実行する直前に何等かの処理を行いたい場合、このルーチ *
;*   ンに書いて下さい                                                        *
;*・使用するレジスタは必ずスタックに待避させてレジスタ値を変更しないようにご *
;*  注意願います                                                             *
;*****************************************************************************
user_exec:
;DMA    mov.l	r0,@-sp             ;このルーチンに処理を記述する場合は、
;DMA    mov.l	r1,@-sp             ;レジスタは必ず待避して下さい。
;DMA    mov.l	r2,@-sp
;		----------------
;		 処理プログラム
;		----------------
                                ;R0,R1,R2のスタックの待避も必要です
;DMA    mov.l   DMAOR_BUF,r1        ;データ領域のアドレスを確保
;DMA    mov.l   @r1,r0              ;データ領域から、r0へ
;DMA    mov.l   DMAOR_AND_EXEC,r1   ;NMIFを落すためのAND値取得
;DMA    and     r1,r0               ;NMIFを落す
;DMA    mov.l   DMAOR,r1            ; DMAORのポートを取得。
;DMA    mov.l   @r1,r2              ;ダミーリード
;DMA    mov.l   r0,@r1              ;R0をDMAORのポートの内容へ。（値の復帰）


;DMA    mov.l   @sp+,r2
;DMA    mov.l   @sp+,r1
;DMA    mov.l   @sp+,r0
;
		rts
		nop


;*****************************************************************************
;*・ユーザ・プログラムブレークした直後に何等かの処理を行いたい場合、このルー *
;*  チンに書いて下さい                                                       *
;*・使用するレジスタは必ずスタックに待避させてレジスタ値を変更しないようにご *
;*  注意願います                                                             *
;*****************************************************************************
user_break:
;DMA    mov.l   r0,@-sp             ;このルーチンに処理を記述する場合は、
;DMA    mov.l   r1,@-sp             ;レジスタは必ず待避して下さい。
;DMA    mov.l   r2,@-sp

;		----------------
;		 処理プログラム
;		----------------
;DMA                                ;R0,R1,R2のスタックの待避も必要です。
;DMA    mov.l   DMAOR,r1            ; DMAORのポートを取得。
;DMA    mov.l   @r1,r0              ; DMAORのポートの内容を、R0へ。
;DMA    mov.l   DMAOR_BUF,r2        ;データ領域のアドレスを確保
;DMA    mov.l   r0,@r2              ;データ領域へコピー（値の保存）
;DMA    mov.l   DMAOR_AND_BREAK,r2
;DMA    and     r2,r0               ;DME=0
;DMA    mov.l   r0,@r1              ; DMA転送中断

;DMA    mov.l   @sp+,r2
;DMA    mov.l   @sp+,r1
;DMA    mov.l   @sp+,r0

		rts
		nop


;*****************************************************************************
;*・ＭＭＵ使用時に、仮想アドレスから物理アドレスへ変換するルーチンを呼出すプ *
;*  ログラムを記述します。                                                   *
;*・Ｒ１レジスタに変換対象の仮想アドレスが入った状態で呼出されます。         *
;*・変換ルーチンではＲ２レジスタに物理アドレス、Ｒ３レジスタに変換結果を入れ *
;*  て下さい。またレジスタバンク１を使用しています。                         *
;*・このmmu_funcルーチンは、サブルーチンコールからの呼出し（ＰＲレジスタは使 *
;*  用しません）ではありませんので変換ルーチンからの復帰はＲＴＳの使用が可能 *
;*  です。                                                                   *
;*****************************************************************************
mmu_func:
;
;		----------------
;		 処理プログラム
;		----------------
;
;;		mov.l	call_function,r0
;;		jsr		@r0
;;		nop

		bra		mmu_func_ret
		nop

	.ALIGN	4
;		------------------------------
;		 変換ルーチンアドレステーブル
;		------------------------------
;;call_function:
;;		.DATA.L	H'XXXXXXXX


;*****************************************************************************
;*  ＲＯＭＩＣＥ６４起動時に何等かの処理を行いたい場合、このルーチンに書いて *
;*  下さい                                                                   *
;*（初期化しないと有効にならないＲＡＭの設定などはここで行ってください）     *
;*****************************************************************************
mon_init:
;
;		----------------
;		 処理プログラム
;		----------------

;DMA    mov.l   DMAOR,r0     ; DMAORのポートを取得。
;DMA    mov.l   @r0,r1       ; DMAORのポートの内容を、R1へ。
;DMA    mov.l   DMAOR_BUF,r0 ;データ領域のアドレスを確保
;DMA    mov.l   r1,@r0       ;データ領域へコピー


		mov.l	FRQCR,r0
		mov.l	FRQCR_DATA,r1
		mov.w	r1,@r0			;ＦＲＱＣＲ

		mov.l	BCR1,r0
		mov.l	BCR1_DATA,r1
		mov.l	r1,@r0			;ＢＣＲ１

		mov.l	BCR2,r0
		mov.l	BCR2_DATA,r1
		mov.w	r1,@r0			;ＢＣＲ２

		mov.l	WCR1,r0
		mov.l	WCR1_DATA,r1
		mov.l	r1,@r0			;ＷＣＲ１

		mov.l	WCR2,r0
		mov.l	WCR2_DATA,r1
		mov.l	r1,@r0			;ＷＣＲ２

		mov.l	WCR3,r0
		mov.l	WCR3_DATA,r1
		mov.l	r1,@r0			;ＷＣＲ３

		mov.l	MCR,r0
		mov.l	MCR_DATA2,r1
		mov.l	r1,@r0			;ＭＣＲ

		mov.l	SDMR,r0
		mov		#0,r1
		mov.b	r1,@r0			;ＳＤＭＲ

		mov.l	RTCOR,r0
		mov.l	RTCOR_DATA,r1
		mov.w	r1,@r0			;ＲＴＣＯＲ

		mov.l	RTCSR,r0
		mov.l	RTCSR_DATA,r1
		mov.w	r1,@r0			;ＲＴＣＳＲ

		mov.l	MCR,r0
		mov.l	MCR_DATA1,r1
		mov.l	r1,@r0			;ＭＣＲ

		mov.l	SDMR,r0
		mov	#0,r1
		mov.b	r1,@r0			;ＳＤＭＲ

		rts
		nop

		.ALIGN		4
FRQCR		.DATA.L		H'FFC00000
BCR1		.DATA.L		H'FF800000
BCR2		.DATA.L		H'FF800004
WCR1		.DATA.L		H'FF800008
WCR2		.DATA.L		H'FF80000C
WCR3		.DATA.L		H'FF800010
MCR             .DATA.L         H'FF800014
RTCSR		.DATA.L		H'FF80001C
RTCOR		.DATA.L		H'FF800024
SDMR		.DATA.L		H'FF94008C	;ｴﾘｱ3/32ﾋﾞｯﾄ/ﾚｲﾃﾝｼ2

FRQCR_DATA	.DATA.L		H'00000E23	;PLL2on 6:1:1
BCR1_DATA	.DATA.L		H'00000008	;ｴﾘｱ3をSDRAM
BCR2_DATA	.DATA.L		H'00003FF4	;ｴﾘｱ1を8ﾋﾞｯﾄ､ｴﾘｱ3を32ﾋﾞｯﾄ
WCR1_DATA	.DATA.L		H'07770777	;RASﾀﾞｳﾝﾓｰﾄﾞ
WCR2_DATA	.DATA.L		h'FFFF4EDF	;ｴﾘｱ3ﾚｲﾃﾝｼ2､ｴﾘｱ1W=0､ｴﾘｱ0W=6
WCR3_DATA	.DATA.L		H'07777777	;
MCR_DATA1	.DATA.L		H'C0090194	;ﾓｰﾄﾞｾｯﾄｵﾝ､AMX=2､ｵｰﾄﾘﾌﾚｯｼｭ
MCR_DATA2	.DATA.L		H'80090194	;ﾓｰﾄﾞｾｯﾄｵﾌ､AMX=2､ｵｰﾄﾘﾌﾚｯｼｭ
RTCSR_DATA	.DATA.L		H'0000A508	;CKIO/4(8.25MHz--0.12us)
RTCOR_DATA	.DATA.L		H'0000A582	;15.6us=0.12usx130---->HEX=82

		.ALIGN	4
DMAOR_AND_BREAK:
;DMA    .DATA.L	H'FFFFFFFE
DMAOR_AND_EXEC:
;DMA    .DATA.L	H'FFFFFFFD

;*****************************************************************************
;* インフォメーションテーブルエリア
;* 追加する場合は、各エリアに３２ビット(.DATA.L)で追加して下さい。
;*****************************************************************************
	.ALIGN	4
information_area_start:

;操作するアドレスを指定します。
port_address:
;DMA	DMAOR:      .DATA.L H'FFA00040         ; DMAOR port address
port_address_end:

;操作するアドレスの初期値を指定します。
port_init_data:
;DMA	DMAOR_DATA: .DATA.L H'00000000         ; DMAOR initial data
port_init_data_end:


;操作するアドレスのデータバス幅を指定します。
;1=8bit 2=16bit 4=32bit
;例えば、8bitと16bitアクセスが可能なものは、;.DATA.L  H'00000003と指定します。
port_data_bus:
;DMA	DMAOR_BUS:  .DATA.L H'00000004         ; DMAOR port accsess bus width
port_data_bus_end:

;データ領域を指定します。
;.DATA.Lの中身は、H'00000000でかまいません。
;デバッガがこの領域を設定します。
romice_monitor_data:
;DMA	DMAOR_BUF:  .DATA.L H'00000000         ; DMAOR port data buffer
romice_monitor_data_end:

information_area_end:
	.end
