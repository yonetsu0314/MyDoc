==============================================================================

                    ターゲットボード用サンプル補足説明書
                日立超LSIシステムズ MS7615SE 編(ms7615.TXT)
                           2003年 6月11日

                Copyright (c) MiSPO Co., Ltd. 1995-2003
                       http://www.mispo.co.jp

==============================================================================


■ はじめに

本ファイルには、ターゲットボードに固有な情報が記載されています。
CPUに固有な情報に関してはSH.TXTを参照ください。
ネットワークに固有な情報に関してはTCPIP.TXTを参照ください。


■ ファイル名規則

        vecXXX.asm ------- ベクターテーブル
        netXXX.XXX ------- ネットワークサンプル関連ファイル
        n4iXXX.c --------- 周期タイマー・割込み管理
        nosXXX.c --------- シリアルドライバ
        smpXXX.XXX ------- 非ネットワークのサンプル関連ファイル


■ ファイル構成

        vec7615c.sh ------ ベクタテーブル設定の例          （Green Hills）
        vec7615g.asm ----- ベクタテーブル設定の例          （exeGCC）
        vec7615h.asm ----- ベクタテーブル設定の例          （ルネサスC）

        init7615.c ------- スタートアップルーチンの例      （ルネサスC）
        n4i7615.c -------- SH7615 用周期タイマ・割込み管理機能
        nos16550.c ------- 16550 用シリアル入出力ドライバ
        nos7615.c -------- SH7615 用シリアル入出力ドライバ
        dp83843.c -------- DP83843 PHYコントローラI/Fサンプル
        sh7615e.c -------- SH7615  LANコントローラドライバサンプル
        nonethw.c -------- ターゲットボード用LANハードウェア依存部のソース

        smp7615.c -------- サンプルプログラム
        net7615.c -------- ネットワークサンプルプログラム

        nonecfg.c -------- ネットワークサンプル用コンフィグレーションファイル

        dp83843.h -------- DP83843 PHYコントローラI/Fヘッダ
        sh7615e.h -------- SH7615  LANコントローラドライバヘッダ
        ms7615.h --------- ターゲットボード用サンプルテストプログラムのヘッダ
        nonethw.h -------- ターゲットボード用LANハードウェア依存部の定義ヘッダ
        nos16550.h ------- 16550 用シリアル入出力ドライバヘッダ
        nos7615.h -------- SH7615 用シリアル入出力ドライバヘッダ
        sh7615.h --------- SH7615 内部I/O定義

        lan7615.txt ------ LANドライバテクニカルノート
        ms7615.txt ------- 本ドキュメント


■ ロードモジュール生成用ファイル構成

+-----------------------------------------------------------------------------
|
|                                  ルネサスC
|
+-----------------------------------------------------------------------------

    SHC5 ----------------- ルネサスC Ver.5 用ディレクトリ
    SHC6 ----------------- ルネサスC Ver.6.0B～6.0C 用ディレクトリ
    SHC6.0A -------------- ルネサスC Ver.6.0～6.0Ax 用ディレクトリ
    SHC7 ----------------- ルネサスC Ver.7 用ディレクトリ

        [net7615_Hew] ---- HEW 用ディレクトリ
        [smp7615_Hew] ---- HEW 用ディレクトリ
        MS7615.hws ------- HEW 用ワークスペースファイル

        [HUDI] ----------- H-UDI初期設定マクロディレクトリ
        FMR7615h.asm ----- PLL変更ソース    [H-UDIマクロ用]
        FMR7615h.mak ----- PLL変更 makefile [H-UDIマクロ用]
        FMR7615h.sub ----- リンカのサブコマンドファイル[H-UDIマクロ用]
        FMR7615.mot ------ PLL変更プログラム[H-UDIマクロ用]
        sh7615ev.mcr ----- H-UDI初期設定マクロ

        net7615h.mak ----- サンプルプログラム makefile[ROM用]
        net7615h.sub ----- リンカのサブコマンドファイル[ROM用]
        net7615hr.mak ---- サンプルプログラム makefile[非ROM用]
        net7615hr.sub ---- リンカのサブコマンドファイル[非ROM用]

        smp7615h.mak ----- サンプルプログラム makefile[ROM用]
        smp7615h.sub ----- リンカのサブコマンドファイル[ROM用]
        smp7615hr.mak ---- サンプルプログラム makefile[非ROM用]
        smp7615hr.sub ---- リンカのサブコマンドファイル[非ROM用]

+-----------------------------------------------------------------------------
|
|                                Green Hills
|
+-----------------------------------------------------------------------------

    GHS ------------------ Green Hills 用ディレクトリ

        [HUDI] ----------- H-UDI初期設定マクロディレクトリ
        FMR7615c.sh ------ PLL変更ソース    [H-UDIマクロ用]
        FMR7615c.mak ----- PLL変更 makefile [H-UDIマクロ用]
        FMR7615c.lnk ----- リンカコマンドファイル[H-UDIマクロ用]
        FMR7615.mot ------ PLL変更プログラム[H-UDIマクロ用]
        sh7615ev.mcr ----- H-UDI初期設定マクロ

        net7615c.cmd ----- リンクオブジェクトリストファイル
        net7615c.lnk ----- リンカコマンドファイル[ROM用]
        net7615cr.lnk ---- リンカコマンドファイル[非ROM用]
        net7615c.mak ----- サンプルプログラム makefile[ROM用]
        net7615cr.mak ---- サンプルプログラム makefile[非ROM用]

        smp7615c.cmd ----- リンクオブジェクトリストファイル
        smp7615c.lnk ----- リンカコマンドファイル[ROM用]
        smp7615cr.lnk ---- リンカコマンドファイル[非ROM用]
        smp7615c.mak ----- サンプルプログラム makefile[ROM用]
        smp7615cr.mak ---- サンプルプログラム makefile[非ROM用]

+-----------------------------------------------------------------------------
|
|                                  exeGCC
|
+-----------------------------------------------------------------------------

    GCC ------------------ exeGCC 用ディレクトリ

        [HUDI] ----------- H-UDI初期設定マクロディレクトリ
        FMR7615g.asm ----- PLL変更ソース    [H-UDIマクロ用]
        FMR7615g.mak ----- PLL変更 makefile [H-UDIマクロ用]
        FMR7615g.lnk ----- リンカコマンドファイル[H-UDIマクロ用]
        FMR7615.mot ------ PLL変更プログラム[H-UDIマクロ用]
        sh7615ev.mcr ----- H-UDI初期設定マクロ

        net7615g.cmd ----- リンクオブジェクトリストファイル
        net7615g.lnk ----- リンカコマンドファイル[ROM用]
        net7615gr.lnk ---- リンカコマンドファイル[非ROM用]
        net7615g.mak ----- サンプルプログラム makefile[ROM用]
        net7615gr.mak ---- サンプルプログラム makefile[非ROM用]

        smp7615g.cmd ----- リンクオブジェクトリストファイル
        smp7615g.lnk ----- リンカコマンドファイル[ROM用]
        smp7615gr.lnk ---- リンカコマンドファイル[非ROM用]
        smp7615g.mak ----- サンプルプログラム makefile[ROM用]
        smp7615gr.mak ---- サンプルプログラム makefile[非ROM用]


        ※[非ROM用]とは、RAM上にコードを任意展開し実行するタイプの構成を
          指します。例えば、「日立モニタPG」上での実行など。


■ H-UDI使用時の初期設定マクロ

          H-UDIを使って、SDRAM上にコードをダウンロードする場合には、SDRAMが
          初期設定マクロで初期化される必要があります。また、SH7615 では、PLL
          への値(FMRレジスタ)変更には、内蔵RAMを使う特殊な操作が必要です。こ
          の変更は、実コードを初期設定マクロで実行しなくてはなりません。本サ
          ンプルでは、Iφ:Eφ:Pφ = 4:4:1 (source CLK=15MHz)を前提として、サ
          ンプルマクロファイル(sh7615ev.mcr)を用意しています。

          PLLの設定値(FMRレジスタ)を変更する場合には、
          FMR7615?.asm(Green Hillsでは、*.sh)ファイルのコメント指示に従って、
          当該設定に変更し、再生成してください。また、必要な場合には、初期設
          定マクロの各種レジスタ値の変更も併せて行ってください。


■ ROMエミュレータ使用時のデバッグ前に

          ROMエミュレータを使用してデバッグする場合は、環境設定に注意すべき
          点があります。
          また、ROMエミュレータとH-UDIデバッガを併用し ROM領域にコードを展開
          する場合は、これらの設定項目は必要ありません。

VBR 初期値の設定

          ROMエミュレータも割込みを使用するため、ユーザーが使用する VBRアドレ
          スと一致させる必要があります。
          具体的には n4i7615.c の INTVECマクロの値と同じ値を、ROMエミュレータ
          の VBR初期値として設定します。
          サンプルプログラムでは、P2領域の 0x06000000番地を使用しています。

ボードの初期化

          ROMエミュレータ自体も RAMを使用するため、DRAMをアクセスできるよう
          立ち上げ時に初期化する必要があります。
          本ボードでは、DRAM領域をアクセス出来るようにするためには、DRAM と
          バス制御の初期化が必要であり、実際には vec7615.??? のリセットベクタ
          を元にして初期化処理を記述します。
          （コンピューテックス ROMICE64ではユーザーカスタマイズプログラム、
            京都マイクロコンピュータPARTNER-ETⅡではモニタプログラムが、これ
            に該当します。）

モニタコードアドレス

          ROMエミュレータが使用するモニタコード領域を指定する必要があります。
          ユーザープログラム領域と重複しないように配置し、一般的には、ROM領域
          の末尾に配置します。

          例）1MBit ROM × 2の場合
              ROM の占有域は 0x00000～0x3FFFF のため、モニタコードアドレスは
              0x3F000 を指定します。

モニタデータ開始アドレス又はモニタのスタック初期値

          ROMエミュレータもスタックを使用し、スタック初期値を指定する必要が
          あります。また、モニタ用のデータ領域が必要になる機種もありますので
          これらを考慮して指定します。

          例）本ボードは 16Mbyte DRAM の為
              RAM の占有域は 0x06000000～0x07FFFFFF　です。そのため、モニタ
              データ開始アドレス＆スタック初期値は 0x07FFF000 を指定します。


■ H-UDIデバッガ使用時のデバッグ前に

          H-UDIデバッガを使用してデバッグする場合は、コード領域も RAM上にロー
          ドする必要があります。
          ボード付属のモニタプログラムを利用して、ユーザープログラムのロード＆
          実行する場合も、ほぼ同様の注意が必要です。

プログラムのスタート番地

          H-UDIデバッガを使用しDRAMにプログラムをロードした場合は、VBRアドレス
          を含め DRAM上の番地から実行されます。
          そのため、プログラムのスタート番地は、本来のリセットベクタ 0x00000000
          ではなく、ロードされたアドレスにする必要があります。
          H-UDIデバッガ使用時のサンプルプログラムでは、0x06000000番地からのスタ
          ートになります。

SDRAM 及びバス制御の初期化

          H-UDIデバッガがコードを SDRAM上に展開する前に DRAMを初期化し、アク
          セスが出来るようにする必要があります。
          通常のH-UDIデバッガには初期化するためのマクロ機能などが装備されてい
          ます。初期化データは、vec7615??.??? のリセットベクタに初期化ルーチ
          ンを記述していますので、それぞれの H-UDIデバッガに合ったマクロ命令
          に置き換えてください。
          モニタプログラムを利用する場合は、初期化の必要はありません。

ユーザープログラムによる再初期化の禁止

          ユーザープログラムで再初期化を行うと、DRAMにロードされていたプログ
          ラムが破壊される可能性があります。ユーザープログラムでは再初期化を
          行わないでください。
          サンプルプログラムでは、リフレッシュタイマコントロール／ステータス
          レジスタ（RTCSR）にゼロ(初期値)以外が入っていると初期化をスキップし
          ます。

VBRアドレスの書きかえ

          DRAMにロードされていたユーザープログラムを実行する場合は、VBRアドレ
          スを移動する必要があります。
          サンプルプログラムの割込み管理 n4i7727?.c では、初期値 0x?0000000
          以外に配置しようとした場合、リモートデバッガの使用と判断して VBRを
          書きかえません。
          そこで、n4i7727?.c をコンパイルする場合は、REBOOTマクロを定義するこ
          とにより強制的に書きかえます。

          例）shc <op> -def=REBOOT,INTVEC=0x06000000 n4i7615?.c  .... ルネサスC
              ccsh <op> -DREBOOT -DINTVEC=0x06000000 n4i7615?.c  .... GreenHills
              gcc <op> -DREBOOT -DINTVEC=0x06000000 n4i7615?.c   .... exeGCC
              iccsh <op> -DREBOOT -DINTVEC=0x06000000 n4i7615.c  .... IAR EW
              xccv <op> -DREBOOT -DINTVEC=0x06000000 n4i7615.c   .... GAIO XASS-V

ROM化の方法

          サンプルのスタートアップ vec7615?.???では、実行時のプログラムカウ
          ンタとリンク時のアドレスが一致しない場合は、必要セクションをコピー
          するようになっています。つまり、0x06000000以降のコードと定数を ROM
          に書き込みます。
          この時コピーするセクションは、VECTからDセクションの最後までです。

          ボード添付のモニタを利用してフラッシュROMに書き込む場合は、
          fl 06000000
          として ???7615.motファイルを指定します。
          DIPスイッチを変更してフラッシュROMを 0番地に配置し、リセットすれば
          プログラムが実行します。


■ 割込みハンドラ

          割込みハンドラもＣ言語で記述できますが、以下のようにコードが展開さ
          れることを確認してください。

ルネサスCでのコード展開例

        お使いのコンパイラのバージョンをご確認の上"C:\NORTi\DOC"フォルダに有
        るバージョン別ドキュメントファイル SHCV7xx.txt SHCV60x.txt SHCV5.txt
        のSH2-DSPの項を参照し対応するコードが展開されることを確認してくださ
        い。

Green Hills でのコード展開例

          INTHDR は、__interrupt void と定義されています。
          割込みハンドラのコンパイルには、必ず、最適化オプション -O を付け、
          ent_int 呼び出しの前に、不要な命令が生成されないよう注意してくだ
          さい。  デバッグ情報生成 -g オプションの併用は可能です。
          また、割込み優先度がカーネルレベルより高い割込みハンドラの場合は、
          この制限はありませんが ent_int, ret_int を含めた一切のシステムコール
          を使用することが出来ません。

          | INTHDR inthdr(void)
          | {
          |     ent_int();
          |        :
          |     ret_int();
          | }

          | _inthdr:
          |         mov.l   r7,@-sp        ; コンパイラが
          |         mov.l   r6,@-sp        ; PR と R7 ～ R0 を退避するコード
          |         mov.l   r5,@-sp        ; を生成します
          |         mov.l   r4,@-sp
          |         mov.l   r3,@-sp
          |         mov.l   r2,@-sp
          |         mov.l   r1,@-sp
          |         mov.l   r0,@-sp
          |         sts.l   pr,@-sp
          |         mov.l   .L??,r1        ; _ent_int 呼出し
          |         jsr     @r1
          |         nop
          |          :
          |         mov.l   .L??,r1        ; _ret_int 呼出し
          |         jsr    @r1             ; _ret_intで直接割込みリターンする
          |         nop                    ; ので以降のコードは使われません
          |         lds.l   @sp+,pr
          |         mov.l   @sp+,r0
          |         mov.l   @sp+,r1
          |         mov.l   @sp+,r2
          |         mov.l   @sp+,r3
          |         mov.l   @sp+,r4
          |         mov.l   @sp+,r5
          |         mov.l   @sp+,r6
          |         mov.l   @sp+,r7
          |         rte
          |         nop
          |         .align  4
          | .L??:   .data.l _ent_int
          | .L??:   .data.l _ret_int

exeGCC でのコード展開例

          割込みハンドラのコンパイルには、必ず、最適化オプション -O2 を
          付け、ent_int 呼び出しの前に、不要な命令が生成されないよう注意して
          ください。  デバッグ情報生成 -g オプションの併用は可能です。
          ただし、割込み優先度がカーネルレベルより高い割込みハンドラを記述する
          ことは出来ません。

          | INTHDR inthdr(void)
          | {
          |     ent_int();
          |        :
          |     ret_int();
          | }

          | _inthdr:
          |         mov.l   r14,@-r15       ! コンパイラが常にこの３行の
          |         sts.l   pr,@-r15        ! コードを生成
          |         mov     r15,r14         !
          |
          |         mov.l   r3,@-r15        ! ent_int マクロ asm 文 で
          |         mov.l   r2,@-r15        ! R3 ～ R1 を退避します
          |         mov.l   r1,@-r15
          |         mov.l   L?,r1           ! _ent_int 呼出し
          |         jsr     @r1
          |         nop
          |
          |          :
          |
          |         mov.l   L?,r1           ! _ret_int 呼出し
          |         jsr     @r1             ! _ret_intで直接割込みリターンする
          |         nop                     ! ので以降のコードは使われません
          |         mov     r14,r15
          |         lds.l   @r15+,pr
          |         rts
          |         mov.l   @r15+,r14
          |
          |         .align  2
          | L?:
          |         .long   _V3_ENT_INT
          | L?:
          |         .long   _ret_int


■ 周期タイマと割込み管理機能（SH7615）

        SH7615 の周期タイマ割込みサービスルーチンと割込み管理機能は、n4i7615.c
        に定義されています。
        （コンパイルオプションは <op> と省略）

使用するハードウェア

        SH7615 内蔵 FRT または TPU をインターバル･タイマとして使用しています。
        それ以外のタイマを用いる場合は、ユーザーで改造してください。

割込み周期の指定

        割込み周期は、MSEC マクロで決まります。デフォルトは 10 msec です。
        例えば、5 msec に変更する場合は、次の様にコンパイルしてください。

        (例) shc  <op> -def=MSEC=5 n4i7615.c  ---------------- ルネサスC
        (例) ccsh <op> -noasmwarn -DMSEC=5 n4i7615.c  -------- GreenHills
        (例) gcc  <op> -DMSEC=5 n4i7615.c  ------------------- exeGCC

クロックの指定

        ソースクロック(Pφ)のデフォルトは 15 MHz です。変更する場合 は CLK マ
        クロを定義してコンパイルしてください。値は [Hz] 単位の周波数です。
        例えば、16MHz に変更する場合は、次の様にコンパイルしてください。他
        のオプション指定は <op> と略記しています。

        (例) shc  <op> -def=CLK=16000000 n4i7615.c  ---------- ルネサスC
        (例) ccsh <op> -noasmwarn -DCLK=16000000 n4i7615.c  -- GreenHills
        (例) gcc  <op> -DCLK=16000000 n4i7615.c  ------------- exeGCC

チャネル番号の指定

        CH マクロで、使用する TPU チャネル（CH=0～2）
        または、              FRT         （CH=3）
        を指定できます。デフォルトは CH=3 です。

        (例) shc  <op> -def=CH=1 n4i7615.c  ------------------ ルネサスC
        (例) ccsh <op> -noasmwarn -DCH=1 n4i7615.c  ---------- GreenHills
        (例) gcc  <op> -DCH=1 n4i7615.c  --------------------- exeGCC

割込みベクタテーブル

          def_inh システムコールによる割込みベクタの設定を可能にするため、
          RAM 先頭（6000000H 番地から 1024 バイト）に、割込みベクタテーブルが
          あると想定しています。
          割込みベクタテーブルの領域が、他の領域と重ならない様にリンクしてく
          ださい。（重なってもリンカで警告は出ません!）
          割込みベクタテーブル先頭アドレスは INTVEC マクロで、サイズ（バイト
          数）は、INTVSZ マクロで変更できます。
          例えば、800000 番地から 628 Byte に変更する場合は、次の様にコンパ
          イルしてください。

          (例) shc <op> -def=INTVEC=0x800000,INTVSZ=628 n4i7615.c
                                              ------------------ ルネサスC
          (例) ccsh <op> -DINTVEC=0x800000 -DINTVSZ=628 n4i7615.c
                                              ------------------ Green Hills
          (例) gcc <op> -DINTVEC=0x800000 -DINTVSZ=628 n4i7615.c
                                              ------------------ exeGCC

          割込みベクタテーブルが ROM 上にあり、def_inh に依らず直接ベクタを定
          義する場合、INTVSZ=0 としてください。
          この場合、def_inh システムコールは機能しません。

割込み優先順位

        本ハンドラの、デフォルトの割込み優先順位は、7 です。これを変更する
        場合、IP マクロを定義してコンパイルしてください。ただし、カーネルよ
        り高優先にはできません（IP ≦ KNL_LEVEL）。本ハンドラより高優先度の
        割込みハンドラが有る場合、多重割込みが起こります。
        例えば、割込み優先順位 2 に変更する場合は、次の様にコンパイルしてく
        ださい。

        (例) shc  <op> -def=IP=2 n4i7615.c  ------------------ ルネサスC
        (例) ccsh <op> -noasmwarn -DIP=2 n4i7615.c  ---------- GreenHills
        (例) gcc  <op> -DIP=2 n4i7615.c  --------------------- exeGCC

時間情報の取り出し

          時間情報を取り出す事が出来ないデバッガを用いて、RTOS対応機能を使用
          する場合は HOOKマクロを指定することにより、ソフト的に時間情報を生成
          します。

          例えば、コンピューテックスROMICE64で RTOSデバッグライブラリを使用し
          ている場合は、次の様にコンパイルしてください。

          (例) shc <op> -def=HOOK=2 n4i7615.c  ----------------- ルネサスC
          (例) ccsh <op> -DHOOK=2 n4i7615.c  ------------------- Green Hills
          (例) gcc <op> -DHOOK=2 n4i7615.c  -------------------- exeGCC

dis_int, ena_int

        割込みレベル設定のビット配置が不規則な SH7615 の割込みコントロー
        ラでは、汎用的な dis_int, ena_int システムコールの実装が複雑となっ
        てしまいます。
        この２つのシステムコールは用意していませんので、個別の割込み禁止許
        可を行いたい場合は、各制御レジスタを直接アクセスしてください。


■ シリアル入出力ドライバ(SH7615）

        SH7615 ののシリアル入出力ドライバは、nos7615.c に定義されています。
        （コンパイルオプションは <op> と省略）
        ここに定義されている１チャネル分の処理は、nosio.c のシリアル入出力
        関数経由で呼び出されます。

カーネルの指定

        NORTi Version4 カーネルのシステムコールを使用することを宣言するため
        V4 マクロを定義します。（V3 マクロを定義した場合は、NORTi3 カーネル
        を使用か、NORTi3 互換システムコールとしてコンパイルされます。）

          (例) shc <op> -def=V4 nos7615.c  -------------------- ルネサスC
          (例) gcc <op> -DV4 nos7615.c  ----------------------- exeGCC
          (例) ccsh <op> -DV4 nos7615.c  ---------------------- Green Hills

チャネル番号の指定

        CH マクロで、論理チャネル番号を指定できます。（無指定時は、CH=0）
        CH は 0～3 を指定できます。
        CH0, CH1 マクロで、物理チャネル番号を変更できます。
        CH0 を定義すると、FIFO 付き SCIF1 を使うようにコンパイルされます。
        CH1 を定義すると、FIFO 付き SCIF2 を使うようにコンパイルされます。

        デフォルトでは、論理チャンネル CH=0,2 は物理チャンネルCH0 に対応し、
        論理チャンネル CH=1,3 は物理チャンネルCH1 に対応しています。

        チャネル0 とチャネル1 の両方をリンクする場合は、重複しないモジュー
        ル名となるようコンパイルしてください。

          (例) shc <op> -def=CH=1 nos7615.c  ------------------ ルネサスC
          (例) gcc <op> -DCH=1 nos7615.c  --------------------- exeGCC
          (例) ccsh <op> -DCH=1 nos7615.c  -------------------- Green Hills

ボーレート･ジェネレータ

        ソースクロック(Pφ)のデフォルトは 15 MHz です。変更する場合 は CLK
        マクロを定義してコンパイルしてください。
        値は [Hz] 単位の周波数です。

          (例) shc <op> -def=CLK=30000000 nos7615.c  ---------- ルネサスC
          (例) gcc <op> -DCLK=30000000 nos7615.c  ------------- exeGCC
          (例) ccsh <op> -DCLK=30000000 nos7615.c  ------------ Green Hills

送受信バッファサイズの指定

        受信／送信バッファのサイズを、BUFSZ マクロにより定義してコンパイル
        してください。受信バッファと異なるサイズの送信バッファを用いる場合
        は、さらに TXBUFSZ マクロを定義してください。
        未指定時は、受信／送信バッファ共 1024 バイトとなります。

          (例) 受信バッファ, 送信バッファ共 128 バイト BUFSZ=128
          (例) 受信バッファ128, 送信バッファ 64 バイト BUFSZ=128, TXBUFSZ=64

ソフトウェア･フロー制御

        XON/XOFF キャラクタによるフロー制御を用いない場合、NOXON マクロを定
        義してコンパイルしてください。コードサイズと処理速度を節約できます。

ハードウェアフロー制御

        SCIF2 を使用した場合は、標準ではサポートしていません。
        SCIF1 では内蔵の RTS-CTS 機能を使い、ソフトウェアに依らず行います。

割込み優先順位

        本ハンドラの、デフォルトの割込み優先順位は、7 です。
        これを変更する場合、IP マクロを定義してコンパイルしてください。
        ただし、カーネルより高優先にはできません。（IP ≦ KNL_LEVEL）
        本ハンドラより高優先度の割込みハンドラが有る場合、多重割込みが起こ
        ります。例えば、割込み優先順位 2 の場合は、次のようにコンパイルして
        ください。

          (例) shc <op> -def=IP=2 nos7615.c  ------------------ ルネサスC
          (例) gcc <op> -DIP=2 nos7615.c  --------------------- exeGCC
          (例) ccsh <op> -DIP=2 -o nos7615.o nos7615.c  ------- Green Hills

ポートの初期化

        SCIF と兼用になっているポートB は、外部で、次の例の様に初期化してく
        ださい。（下記の例では、PB の他の端子は入力と仮定）

        #include "nos7615.h"
        sfr_setw(PFC_PBCR, PBCR_RXD1); ････ RxD1 機能
        sfr_setw(PFC_PBCR, PBCR_TXD1); ････ TxD1 機能
        sfr_setw(PFC_PBCR, PBCR_RTS1); ････ ~RTS 機能
        sfr_setw(PFC_PBCR, PBCR_CTS1); ････ ~CTS 機能
        sfr_setw(PFC_PBCR2, PBCR_RXD2); ･･･ RxD2 機能
        sfr_setw(PFC_PBCR2, PBCR_TXD2); ･･･ TxD2 機能

未サポート機能

        調歩同期式モードのみで、クロック同期式モードはサポートしていません。
        内蔵ボーレートジェネレータのみで、外部クロック入出力はサポートして
        いません。
        SH7615 特有のマルチプロセッサモードはサポートしていません。


■ シリアル入出力ドライバ（NS16550）

        MS7615SE01 用 NS16550 のシリアル入出力ドライバは、nos16550.c に定義
        されています。
        ここに定義されている１チャネル分の処理は、nosio.c のシリアル入出力
        関数経由で呼び出されます。

カーネルの指定

        NORTi Version4 カーネルのシステムコールを使用することを宣言するため
        V4 マクロを定義します。（V3 マクロを定義した場合は、NORTi3 カーネル
        を使用か、NORTi3 互換システムコールとしてコンパイルされます。）

          (例) shc <op> -def=V4 nos16550.c  ------------------- ルネサスC
          (例) gcc <op> -DV4 nos16550.c  ---------------------- exeGCC
          (例) ccsh <op> -DV4 nos16550.c  --------------------- Green Hills

ターゲットボードの指定

        MS7615SE01 用であることを MS7615マクロと CLKTYPEマクロによって指定
        します。

          (例) shc <op> -def=MS7615,CLKTYPE=1 nos16550.c  ----- ルネサスC
          (例) gcc <op> -DMS7615 -DCLKTYPE=1 nos16550.c  ------ exeGCC
          (例) ccsh <op> -DMS7615 -DCLKTYPE=1 nos16550.c  ----- Green Hills

チャネル番号の指定

        CH マクロで、論理チャネル番号を指定できます。（無指定時は、CH=0）
        CH は 0～3 を指定できます。
        例えば、チャンネル 1 の場合は、次のようにコンパイルしてください。

          (例) shc <op> -def=CH=1 nos16550.c  ----------------- ルネサスC
          (例) gcc <op> -DCH=1 nos16550.c  -------------------- exeGCC
          (例) ccsh <op> -DCH=1 nos16550.c  ------------------- Green Hills

ボーレート･ジェネレータ

        ソースクロックのデフォルトは 1.8432 MHz です。変更する場合 は BCLK
        マクロを定義してコンパイルしてください。値は [Hz] 単位の周波数です。
        例えば、3.6864 MHz の場合は、次のようにコンパイルしてください。

          (例) shc <op> -DBCLK=3686400 nos16550.c  ------------ ルネサスC
          (例) gcc <op> -DBCLK=3686400 nos16550.c  ------------ exeGCC
          (例) ccsh <op> -DBCLK=3686400 nos16550.c  ----------- Green Hills

送受信バッファサイズの指定

        受信／送信バッファのサイズを、BUFSZ マクロにより定義してコンパイル
        してください。受信バッファと異なるサイズの送信バッファを用いる場合
        は、さらに TXBUFSZ マクロを定義してください。
        未指定時は、受信／送信バッファ共 1024 バイトとなります。

          (例) 受信バッファ, 送信バッファ共 128 バイト BUFSZ=128
          (例) 受信バッファ128, 送信バッファ 64 バイト BUFSZ=128, TXBUFSZ=64

ソフトウェア･フロー制御

        XON/XOFF キャラクタによるフロー制御を用いない場合、NOXON マクロを定義
        してコンパイルしてください。コードサイズと処理速度を節約できます。

ハードウェアフロー制御

        ハードフローを用いない場合は、NOFLW マクロ定義してコンパイルしてくだ
        さい。コードサイズと処理速度を節約できます。

割込み優先順位

        本ハンドラの、デフォルトの割込み優先順位は、7 です。
        これを変更する場合、IP マクロを定義してコンパイルしてください。
        本ハンドラより高優先度の割込みハンドラが有る場合、多重割込みが起こり
        ます。例えば、割込み優先順位 2 の場合は、次のようにコンパイルしてくだ
        さい。

          (例) shc <op> -DIP=2 nos16550.c  --------------------- ルネサスC
          (例) gcc <option> -DIP=2 nos16550.c  ----------------- exeGCC
          (例) ccsh <option> -DIP=2 nos16550.c  ---------------- Green Hills

未サポート機能

        調歩同期式モードのみで、クロック同期式モードはサポートしていません。
        内蔵ボーレート･ジェネレータのみで、外部クロック入出力はサポートして
        いません。
        モデム制御信号の RI（Ring Indicator)信号はサポートしていません。


■ LANドライバ(SH7615）

        LANドライバでは、別に、テクニカルノート(lan7615.txt)を用意しています。


■ その他注意事項

スタートアップルーチン

        特別なスタートアップルーチンは必要有りませんが、割込みベクタの領域
        は、サンプルを参考に作成してください。

割込みハンドラと割込みサービスルーチン

        割込み番号が同一の割込みハンドラと割込みサービスルーチンを定義/生成
        することは出来ません。ただし、割込み番号が異なれば割込みハンドラと
        割込みサービスルーチンを併用することが出来ます。

内部 I/O レジスタの入出力

        ユーザープログラムから内部 I/O レジスタへのアクセスに関して、何の制
        限もありません。付属の shxxxx.h ファイルに、SHxxxx の内部 I/O レジ
        スタの定義と、その入出力用マクロ sfr_xxx() が定義されていますが、
        ユーザープログラムでの使用を強制するものではありません。
        SH のビット操作は数命令を必要とします。同じポートを複数のタスクや割
        込みハンドラからアクセスする場合は、排他制御が必要であることに、十
        分注意してください。

割込みレベル

        SH では、割込みに対する 16レベルの許可/禁止が可能です。NORTi のカー
        ネルはレベル 14 で、タスクはレベル 0 で実行されます。割込みハンドラ
        はレベル 1～14 を選択できます。
        レベル 15 割込みは、カーネルより優先的な割込みとして使用できます。
        ただし、カーネルより高優先の割込みからは、一切のシステムコールを発
        行できません。

        カーネルレベルとして 1～15 の任意の値も指定できます。このためには、
        #include "nocfg4.h"（NORTi3 互換モードでは、#include "nocfg3.h"）の
        前に、#define KNL_LEVEL ?  を定義してください。割込みハンドラにはレ
        ベル 1～KNL_LEVEL を選択できます。

メモリプール用メモリ

        メモリプール用メモリのサイズをコンフィグレーションで指定すると、メモ
        リプール用メモリに対して独立したセクション名が与えられます。
        セクション名は、ルネサスCでは BMPLMEM、Green Hills では .MPLMEM、exeGCC
        では MPLMEM になります。
        リンクする際には、このセクションの配置と、必要な場合はアドレスを定義
        てください。

スタック用メモリ

        スタック用メモリのサイズをコンフィグレーションで指定すると、スタック
        用メモリに対して独立したセクション名が与えられます。
        セクション名は、ルネサスCでは BSTKMEM、Green Hills では .STKMEM、exeGCC
        では STKMEM になります。
        リンクする際には、このセクションの配置と、必要な場合はアドレスを定義
        てください。


■ サンプルプログラムについて

        付属のサンプルには特定のハードウェアに依存している部分があります。
        特に、次のポイントに注意してカスタマイズしてください。
        sh7615 の RAM を 0x07000000～0x07ffffff に変更する例を示します。
        コンパイルオプションは <op> と略記しています。

初期化のスキップ

        プログラム実行時に既に初期化されている場合があります。このような場合
        プログラムで再初期化を行うと、DRAMにロードされていたプログラムが破壊
        される可能性があります。
        サンプルプログラムでは、リフレッシュタイマコントロール／ステータスレ
        ジスタ（RTCSR）にゼロ(初期値)以外が入っていると初期化をスキップします。

割込みベクタ

        ベクタ領域の定義（INTVEC マクロ）を、RAM 先頭に修正して下さい。アド
        レスは 16進数なので、0x を付け忘れないで下さい。

        (例) smp7615h.mak: shc <op> -def=INTVEC=0x7000000 n4i7615.c -- ルネサスC
             smp7615c.mak: ccsh <op> -DINTVEC=0x7000000 n4i7615.c  --- Green
             smp7615g.mak: gcc <op> -DINTVEC=0x7000000 n4i7615.c  ---- exeGCC

データ領域

        データ領域を、RAM 先頭+0x400（割込みベクタの次）に修正してください。

        (例) smp7615.sub  : START P,C,D(400),R,B,STACK(07000400)
                                                    ------------- ルネサスC
        (例) smp7615c.lnk : .data 0x07000400  ------------------- Green Hills
        (例) smp7615g.lnk : .data 0x07000400  ------------------- exeGCC

スタックポインタ初期値

        SP 初期値を RAM 最終アドレス+1 に修正してください。

        (例) vec7615h.asm : __init_stack:  .equ    h'8000000 --- ルネサスC
        (例) smp7615g.cmd : __stack_init = 0x8000000   --------- exeGCC

        Green Hills では、スタック容量を調整してください。

        (例) smp7615c.lnk : .stack   align(4) pad(0x?????)  ---- Green Hills

クロック

        周期タイマ割込みハンドラのクロックの定義（CLK マクロ）を、システム
        に合わせて修正してください（下記の例では 16 MHz）。

        (例) smp7615?h.mak: shc <op> -def=CLK=16000000 n4i7615.c  --- ルネサスC
        (例) smp7615?g.mak: gcc <op> -DCLK=16000000 n4i7615.c  ------ exeGCC
        (例) smp7615?c.mak: ccsh <op> -DCLK=16000000 n4i7615.c  ----- GreenHills

ハードウェア初期化

        プロセッサの初期化（ウェイト数設定）やポート初期化部分も必要に応じ
        てユーザーで作成してください。
        メモリの初期設定などプログラムの最初に処理が必要な場合、ベクタ設定
        vec7615?.asm のリセットベクタに追加してください。

■ キャッシュの使用

        サンプルでは、スタートアップルーチンで main関数にジャンプする前に、
        キャッシュの有効／無効を操作します。

        ※無効な場合には、SH7615 の初期値を利用しプログラムでは何も操作し
          ません。

キャッシュを設定する

        CACHE_ON に "1" を設定することで有効になります。また、"0" を設定
        することで無効になります。

        次の例では、キャッシュを有効にします。

        (例) vec7615h.asm: CACHE_ON: .define "1" --- ルネサスC
             vec7615c.asm: CACHE_ON = 1          --- Green
             vec7615g.asm: .equ CACHE_ON,1       --- exeGCC

ライトバック／ライトスルーを設定する
バーストライト／シングルライトを設定する

        CACHE_WT に "1" を設定することでライトスルーに設定されます。また、"0"
        を設定することでライトバックになります。

        キャッシュの設定とは別に SDRAM　の設定には、ライトスルーの場合には、
        シングルライトに設定します。また、ライトバックでは、バーストライトに
        設定します。

        次の例では、ライトバック＆バーストライトを設定します。

        (例) vec7615h.asm: CACHE_WT: .define "0" --- ルネサスC
             vec7615c.asm: CACHE_WT = 0          --- Green
             vec7615g.asm: .equ CACHE_WT,0       --- exeGCC


■ トラブル・シューティング

main 関数まで来ない時

        NORTi を組み込んだプログラムでも、main 関数で syssta(); を実行する
        までは、通常のシングルタスクのプログラムです。
        NORTi を組み込まない単純なプログラムで main 関数まで来るように、ス
        タートアップを見直して下さい。
        ・リセットベクタが正しく設定されているか。
        ・RAM 使用の前に、チップセレクト（バス幅）等の設定、DRAM の初期化が
          終わっているか。
        ・各セクションのアドレス定義は正しいか。

sysini でハングアップする時

        sysini() から呼び出す intini() 関数で、割込みベクタの初期設定を行っ
        ています。intini 関数にブレークポイントを設定し、初期化内容がシステ
        ムと合致しているか確認してください。
        また、スタックポインタが正しいか確認してください。SH では、sysini()
        に来るまでスタックを使用しない場合があり、必ずスタックを使用する
        sysini() でハングアップすることがあります。

syssta からリターンする時

        先に実行した cre_??? や sta_tsk でエラーがあった場合、syssta を実行
        しても、マルチタスクへ移行せずにリターンしてきます。
        システム変数 SYSER（int 型）のエラーコードをウォッチしながら、main
        をステップ実行し、原因を特定して下さい。ID 上限のチェックでエラーと
        なることが考えられます。他に、cre_??? でエラーとなる場合、メモリ不
        足が考えれれます。

get_blk, get_blf や rcv_msg でハングアップする時

        引数にポインタへのポインタを渡しているか（& を付け忘れていないか）
        確認してください。

rel_blk, rel_blf や snd_msg でハングアップする時

        メモリブロックやメッセージのアドレスが奇数でないか調べてください。

割込みがかかると暴走する時

        main 関数は無事に通過するが、マルチタスクへ移行しようとすると暴走す
        る場合、まず、割込みハンドラを外してみてください。具体的には、
        intsta(); を外してください。これで暴走が止まる場合、割込みハンドラ
        への分岐処理が正しいか見直して下さい。また、割込みハンドラのコード
        展開も確認して下さい。


■ 日立モニタプログラムについて

        MS7615SE01付属の日立モニタプログラム Ver 3.2set で動作確認
        されています。

ファイル名

        以下を除いては、共通です。

        net7615cr.lnk ---- リンカコマンドファイル[日立モニタPG用]      (Green Hills)
        net7615gr.lnk ---- リンカコマンドファイル[日立モニタPG用]      (exeGCC)
        net7615hr.sub ---- リンカのサブコマンドファイル[日立モニタPG用](ルネサスC)
        net7615r.out  ---- 実行オブジェクトファイル   (Green Hills) &  (exeGCC)
        net7615r.abs  ---- 実行オブジェクトファイル                    (ルネサスC)
        net7615r.mot  ---- Ｓフォーマットファイル

        smp7615cr.lnk ---- リンカコマンドファイル[日立モニタPG用]      (Green Hills)
        smp7615gr.lnk ---- リンカコマンドファイル[日立モニタPG用]      (exeGCC)
        smp7615hr.sub ---- リンカのサブコマンドファイル[日立モニタPG用](ルネサスC)
        smp7615r.out  ---- 実行オブジェクトファイル   (Green Hills) &  (exeGCC)
        smp7615r.abs  ---- 実行オブジェクトファイル                    (ルネサスC)
        smp7615r.mot  ---- Ｓフォーマットファイル

バージョン

        ROMでの実行か、日立モニタプログラム上での実行の自動判別には、日立
        モニタプログラムバージョンに依存しています。サンプルでは、Ver 3.2set
        で動作が確認されています。それ以外のバージョンをお使いの場合には
        カスタマイズが必要です。カスタマイズには、n4i7615.c ソースにバージョン
        依存行を追加し、コンパイルオプションで HITACH_MON_VER にバージョン番号
        を定義してください。

        バージョン依存行には、日立モニタプログラムのベクタ先頭から１６個分
        (アドレス=0x00～0x3F)のベクタアドレスを使用しています。この値は
        日立モニタプログラムのメモリダンプコマンド("MD 0")の実行によって、
        取得してください。

        日立モニタプログラム Ver 4.1 に対応する場合には、

        [コンパイル例]
        (例) shc  <op> -def=HITACH_MON_VER=0x0401 n4i7615.c  ----- ルネサスC
        (例) ccsh <op> -DHITACH_MON_VER=0x0401 n4i7615.c  -------- GreenHills
        (例) gcc  <op> -DHITACH_MON_VER=0x0401 n4i7615.c  -------- exeGCC

        [ソース修正例]
        #if HITACH_MON_VER == 0x0401
        static const UW hitach_mon_vec[] = {
            0x????????L,0x????????L,0x????????L,0x????????L,
            0x????????L,0x????????L,0x????????L,0x????????L,
            0x????????L,0x????????L,0x????????L,0x????????L,
            0x????????L,0x????????L,0x????????L,0x????????L,
        };
        #endif

実行開始アドレス

        実行開始の場合には、"G" コマンドに先立ち "MD 6000000" コマンドで
        実行開始アドレスを取得します。なお、実行開始アドレスは、サンプル
        プログラムのリセットベクタに定義されています。この取得されたアドレス
        を "G 取得されたアドレス" で実行します。

サンプルプログラムの制限

        日立モニタプログラムでは、SH7615内蔵SCIF1を使って、ホストと通信を
        行います。そのため、サンプルプログラムでは、日立モニタプログラム用
        のシリアルチャネルが使用できません。

        [ネットワークサンプルの場合]

          UltraIO(FDC37C935A)内蔵の16C550互換チップ(MS7615SEボード上の
          CN3/COM1)シリアルコントローラ側をコンソールに使用します。また、
          LANパケットダンプ機能が有効な場合には、コンソールは使用できません。

        [非ネットワークサンプルの場合]

          UltraIO(FDC37C935A)内蔵の16C550互換チップ(MS7615SEボード上の
          CN3/COM1)シリアルコントローラ側のみ使用します。

HEW環境でご使用の場合

        サンプルではHEW環境での日立モニタプログラム用には対応していません。
        セクションの定義アドレスをカスタマイズしてください。

        [Option] -> [SH IM OptLinker..] -> [Section]
        の項で設定できます。

        サンプルでは、次のような設定を想定しています。
        +------------+--------------+
        | H'06000000 | VECT         |
        +------------+--------------+
        | H'06000400 | P            |
        |            | C            |
        |            | D            |
        |            | R            |
        |            | B            |
        |            | STACK        |
        +------------+--------------+


■ CSIDE95 for ROMICE64 SuperH のサンプル用設定

        CSIDE95 for ROMICE64 SuperH Ver 2.21 で動作確認されています。

ハードウェアの設定

        [CPU動作]
         *デバッグモード :ROMICE
         *CPUの種類      :SH7612
         *VBRの設定      :6000000  (SDRAM先頭番地)

        [ROM]
         *ROM1-4         :32bit/4M/チェックON

        [モニタ]
         *コード開始アドレス :0007F000   (ROMエリアの後方4KB)
         *データ開始アドレス :07FFF000   (SDRAMエリアの後方4KB)
         *動作               :ユーザーカスタマイズプログラム使用をチェック
                              します。また、ユーザーカスタマイズプログラム
                              (Wish.ucm)を指定します。指定には、絶対パスを
                              指定してください。

ユーザーカスタマイズプログラムについて

        NORTi では、例外ベクタのベースアドレスを RAM空間に持ちます。
        この場合には、CSIDE95 の設定では、[CPU動作]-[VBRの設定]をプログラムで
        定義された値に設定する必要があります。

        また、CSIDE95 で [CPU動作]-[VBRの設定]を変更した場合には起動時には、
        例外ベクタのベースアドレスとする RAM(SDRAM)の初期化が行われていない
        為に標準モニタプログラムでは正常に起動できません。そこで、ユーザー
        カスタマイズプログラム(Wish.ucm)が必要になります。

------------------------------------------------------------------------------
ROMICE(ロムアイス)、CSIDE(シーサイド)は株式会社コンピューテックスの
登録商標です。
