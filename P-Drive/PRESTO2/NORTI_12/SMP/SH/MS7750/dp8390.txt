_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
                                                                            
                               NORTi Network                               
                    NS DP8390およびRealtek RTL80x9(AS)用                    
                            LANデバイスドライバ                             
                                                                            
                              エディション1.95                              
                                 99-12-29版                                 
                                                                            
                              テクニカルノート                              
                                                                            
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/


■はじめに

LANドライバは、NORTi3 Networkのプロトコルスタック部の中で内部的に利用される
機能を提供するプログラムモジュールです。したがって、アプリケーションプログラ
ムを作成するユーザは、その存在を意識する必要は特にありません。

しかしながら、NORTi3 Networkそのものの移植を試みるユーザにとっては、LANドラ
イバの内部処理について理解することは必要な知識となります。本テキストファイル
は、このようなユーザに当該情報を与える目的で用意されたものです。

本テキストファイルは、LANドライバに関してのみ説明を行なっています。NORTi3 
Networkでは、LANドライバとは別に「LANハードウェア依存部」と呼ぶプログラムモ
ジュールが必要となりますが、これについては、『LANハードウェア依存部 テクニカ
ルノート』の方で説明しています。そちらを参照してください。

■デバイス構成

本ドライバは、下記のデバイス構成を持つターゲットシステムに対応しています。

 +-------------------------------------------------------------------------+
 |  データリンクタイプ  Ethernet（10BASE）                                 |
 |  デバイスチップ      National Semiconductor DP8390ファミリ              |
 |                      Realtek RTL80x9(AS)                                |
 |  ターゲットボード    日立超LSIシステムズ MS7709SE01                     |
 |                      日立超LSIシステムズ MS7709ASE01                    |
 |                      日立超LSIシステムズ MS7750SE01                     |
 |  データ転送方式      FIFO, 独立メモリ, 8または16ビットアクセス          |
 |  バッファメモリ      SMPOOLSIZEマクロ変数により定義                     |
 |  割り込み            受信, 送信（共有）                                 |
 +-------------------------------------------------------------------------+

このドライバは、National Semiconductor DP8390ファミリおよびRealtek RTL80x9(AS)
Ethernetコントローラ用です。以下のファミリチップ（および、これらのチップと完
全な互換性を持つセカンドソースデバイス）がサポート対象に含まれます。

  National Semiconductor DP8390DまたはNS32490D（NIC）
                         DP83901A（SNIC）
                         DP83902A（ST-NIC）
                         DP83905（AT-LANTIC）
                         DP83907（AT-LANTIC II）

  Realtek                RTL8019
                         RTL8019AS
                         RTL8029
                         RTL8029AS

以降の説明において、これらすべてのチップを総称して「DP8390」という名称を使用
します。また、「ターゲットボード」という呼称はすべて上記のデバイス構成で示し
たボードのことを指しています。

■構成ファイル

本ドライバは、次の2つのファイルにより構成されます。

  DP8390.C    LANドライバ本体のソースコードを含むソースファイル
  DP8390.H    LANコントローラデバイス固有の定義を含むヘッダファイル

上記のファイルのうち、DP8390.Hは、DP8390ファミリチップのすべて種類のコントロ
ーラデバイスで共有することを前提として作成されています。つまり、このヘッダフ
ァイルは、DP8390ファミリのすべて種類のコントローラデバイスに関する定義を含ん
でいます。したがって、ユーザが本ドライバを新しいボードへ移植するために
DP8390.Cのカスタマイズを行なった場合でも、DP8390.Hは内容を変更することなくそ
のまま利用することが可能です。

■コンフィグレーション

本ドライバが持ついくつかの汎用的な機能について、それらをコンフィグレーション
パラメータにより変更できるようにする目的で、本ドライバは次のようなマクロ変数
を含みます。

  DEVICE       コントローラのデバイスチップ種別
  PHYMEDIA     Ethernetの物理メディア種別
  FULLDPLX     半二重／全二重モードの選択
  LBTYPE       デフォルトループバックモード
  DATAXFER     データ転送アクセスビット幅（8ビットまたは16ビット）
  SFNCFLAGS    本ドライバの特殊な機能を有効にするフラグ

これらのマクロ変数は、本ドライバのソースコード内で以下のように定義されていま
す。

#define DEVICE 0    /* device type */
                    /*   0 = NS DP8390 or NS32490 (NIC) */
                    /*   1 = NS DP83901 (SNIC) */
                    /*   2 = NS DP83902 or DP83903 (ST-NIC) */
                    /*   5 = NS DP83905 (AT/LANTIC) */
                    /*   7 = NS DP83907 (AT/LANTIC II) */
                    /*  81 = Realtek RTL8019 or RTL8029 */
                    /*  82 = Realtek RTL8019AS or RTL8029AS */

#define PHYMEDIA 0  /* physical media type */
                    /*   0 = 10BASE-T */
                    /*   1 = 10BASE2 */
                    /*   2 = 10BASE5 */

#define FULLDPLX 0  /* full duplex operation (for Realtek devices only) */
                    /*   0 = half duplex */
                    /*   1 = full duplex */

#define LBTYPE 2    /* loopback operaion type */
                    /*   0 = not allow loopback */
                    /*   1 = MAC level (internal NIC modlue) loopback */
                    /*   2 = ENDEC level (internal ENDEC) loopback */
                    /*   3 = physical-media level (external transceiver) 
                             loopback */

#define DATAXFER 16 /* data width for controller FIFO accesses */
                    /*   8 = 8-bit transfers */
                    /*  16 = 16-bit transfers */

#define SFNCFLAGS 0 /* flags that specify special functions */
                    /*  bit 0 = loopback mode */
                    /*  bit 6 = polled Rx (Rx without interrupt use) */
                    /*  bit 7 = polled Tx (Tx without interrupt use) */

※DEVICEマクロは、外部から与える<board>マクロ（ターゲットボードを識別するた
  めのマクロ変数）によって、ドライバのソースコード内で再定義されることを前提
  としています。

また、DP8390固有のコンフィグレーション設定項目として、本ドライバのソースコー
ド内に次のようなマクロ変数が定義されています。

  SMPOOLSIZE      コントローラのバッファメモリのサイズ
  SM_TXSTART_PG   送信用バッファメモリの先頭ページ位置
  SM_RXSTART_PG   受信用バッファメモリの先頭ページ位置
  SM_RXSTOP_PG    受信用バッファメモリの終端ページ位置

ユーザが新しいターゲットボードへNORTi3 Networkの移植を試みる場合、上記の各コ
ンフィグレーションパラメータを適切な値に設定して本ドライバをカスタマイズする
ことにより、移植作業を容易に行なうことができるでしょう。

■機能概要

LANドライバは、ターゲットボードが搭載するLANコントローラを制御することにより、
ネットワーク通信の基礎的機能であるパケット送受信処理を実現するプログラムモジ
ュールです。LANドライバにより提供される機能はプロトコルスタック部からのみ利
用されます。

NORTi3 NetworkのLANドライバは、一般に次のような機能を持つことが求められます
が、本ドライバもこれらの機能を実現するための各種の処理を含んでいます。

  ・初期化操作
  ・割り込み操作
  ・受信操作
  ・送信操作

以降において、本ドライバが含む上記の各機能に相当する部分について、それぞれ詳
細を説明します。

■初期化操作

ドライバの初期化操作は、次の関数により単独で実現されます。

  ER lan_ini(UB *macaddr);

引数macaddrには、ターゲットボードに設定すべき固有のEthenetアドレスが与えられ
ます。このアドレスは、初期化操作の中でコントローラへ設定されます。

初期化操作は、以下のモジュールレベル変数を参照してコントローラの初期設定を行
ないます。

  lan_loopback_test ループバックテストモード。この変数がセットされている場合、
                    コントローラをループバック動作モードにします。

  lan_inter_nouse   非割り込みモードフラグ。この変数の特定のビットがセットさ
                    れている場合、コントローラの割り込みを使用しないで（ポー
                    リングモードで）送信または受信操作を実行します。

送受信操作において割り込みを使用する場合、初期化操作は、最後にLANハードウェ
ア依存部が提供するlan_def_intという関数を呼び出します。ターゲットボードの割
り込みデバイスに対する初期設定処理はこの関数の中で行なわれます。（関数
lan_def_intについては、『LANハードウェア依存部 テクニカルノート』を参照して
ください）

■割り込み操作

ドライバの割り込み操作は、次の関数により単独で実現されます。

  void lan_intr(void);

lan_intrは、コントローラから発生する割り込みを処理するための割り込みハンドラ
に相当します。ただし、この関数はLANハードウェア依存部が提供するlan_intという
関数を経由して間接的に呼び出される形を取ります。言い換えると、CPUの割り込み
機構から直接呼び出される割り込みハンドラは、lan_intrではなくlan_intになりま
す。（関数lan_intについては、『LANハードウェア依存部 テクニカルノート』を
参照してください）

本ドライバの割り込みハンドラは、コントローラから取得した情報に基づいて次の３
種類の割り込み要因を判定し、各割り込み要因に対応した適切な処理を行ないます。

  ・パケット受信通知
  ・パケット送信完了
  ・バッファリングオーバーフロー

「パケット受信通知」割り込みの場合、割り込みハンドラはlan_wai_rcvによる受信
待ち状態を解除するだけで、実際のパケットの読み出し処理は後述の『受信操作』に
任せます。同様に、「パケット送信完了」割り込みの場合、割り込みハンドラは
lan_wai_sndによる送信待ち状態を解除するだけで、後続パケットの書き込み処理は
後述の『送信操作』に任せます。

「バッファリングオーバーフロー」割り込みは、DP8390に特有のエラー状態を表わす
ものです。これはコントローラのドキュメントにおいて"Buffer Ring Overflow"と呼
ばれています。このエラーは、コントローラの受信バッファがオーバーラン状態に陥
ったことを示しています。この状態から回復するには、コントローラを一旦停止した
上でエラー状態をクリアし、再起動する必要があります。この操作方法の正確な手順
は、コントローラのドキュメントのバージョンにより異なります。本ドライバは、下
記に示すドキュメントに記載されている操作手順に準じています。

  DP83902A ST-NIC Serial Network Interface Controller for Twisted Pair, 
  November 1995

上記のオーバラン状態からの回復手順では、割り込みハンドラの中に2ミリ秒のウェ
イトが挿入されています。このウェイトの挿入は、組み込みシステムではかなり危険
を伴います。もし実際に「バッファリングオーバーフロー」が発生して、このウェイ
トが問題となる場合は、オーバーランそのものが発生する原因を追求した方が良いで
しょう。オーバーランは、プログラムが割り込みを長時間禁止したか、あるいは、何
らかの操作によりハードウェアに過度の負荷がかかった場合に発生します。

■受信操作

ドライバの受信操作は、次の関数が組み合わさって動作することにより実現されます。

  ER lan_wai_rcv(TMO tmout);
  ER lan_get_len(UH *len);
  ER lan_get_pkt(void *buf, int len);
  ER lan_get_end(void);
  ER lan_skp_pkt(int len);

lan_wai_rcvがプロトコルスタックから呼び出されると、呼び出し元のタスクはドラ
イバの中で受信割り込み待ち状態に入ります。前述のとおり、この待ち状態は割り込
みハンドラが「パケット受信通知」割り込みを認識した時点で解除されます。
lan_wai_rcv以外の関数は、受信したパケットをコントローラから読み出す処理を分
割して行ないます。

受信操作は、必要に応じて以下のモジュールレベル変数を更新します。

  lan_error_count   エラーカウンタ。受信ステータスの"no error"を示すビットが
                    セットされていない、パケット長が無効である、または、パケ
                    ット格納位置を示すポインタが無効である場合にカウントアッ
                    プされます。

DP8390は、CPUのプログラム用メインメモリとは独立したバッファ専用メモリを持ち
ますが、このメモリは、受信用と送信用の２つ領域に分割して割り当てられます。受
信用バッファメモリ領域の先頭位置は、本ドライバのソースコード内において
SM_RXSTART_PGというマクロ変数で定義されています。受信用バッファメモリは、コ
ントローラのバッファメモリ全体の中でSM_RXSTART_PGからSM_RXSTOP_PGまでのペー
ジ領域に割り当てられます（1ページは256バイトです）。

受信操作が開始されてから、受信パケットの読み出しが完了するまでの処理の流れは
次のようになります。

  (1) プロトコルスタックは、最初にlan_get_lenを呼び出して受信パケット全体の
      データ長をドライバから取得します。ドライバは、この関数の中で、バッファ
      メモリ領域内のどの位置に受信パケットが格納されているかを調べて、その情
      報を記憶します。
  (2) プロトコルスタックからlan_get_pktが繰り返し呼び出されるので、ドライバ
      は、コントローラの受信用バッファメモリ領域から順次パケットデータを読み
      出してプロトコルスタック側の受信バッファへコピーします。
  (3) 最後にlan_get_endまたはlan_skp_pktが呼び出された時点で、ドライバは、コ
      ントローラが保持している受信用バッファメモリ領域内のパケット格納可能位
      置を示すポインタを更新することにより、受信パケットを解放します。

■送信操作

ドライバの送信操作は、次の関数が組み合わさって動作することにより実現されます。

  ER lan_wai_snd(TMO tmout);
  ER lan_set_len(int len);
  ER lan_put_pkt(const void *data, int len);
  ER lan_put_dmy(int len);
  ER lan_put_end(void);

lan_wai_sndがプロトコルスタックから呼び出されると、呼び出し元のタスクはドラ
イバの中で送信割り込み待ち状態に入ります。前述のとおり、この待ち状態は割り込
みハンドラが「パケット送信完了」割り込みを認識した時点で解除されます。
lan_wai_snd以外の関数は、送信するパケットをコントローラへ書き込む処理を分割
して行ないます。

送信用バッファメモリ領域の先頭位置は、本ドライバのソースコード内において
SM_TXSTART_PGというマクロ変数で定義されています。送信用バッファメモリは、コ
ントローラのバッファメモリ全体の中でSM_TXSTART_PGからSM_TXSTART_PG+5までのペ
ージ領域に割り当てられます。これは、Ethernetパケットの最大長である1518バイト
（CRCの4バイトを含む）分のデータを格納できる長さに相当します。

送信操作が開始されてから、送信パケットの送出が実行されるまでの処理の流れは次
のようになります。

  (1) プロトコルスタックは、最初にlan_set_lenを呼び出して送信パケット全体の
      データ長をドライバへ通知します。ドライバは、この関数の中で、その情報を
      コントローラへ設定します。
  (2) プロトコルスタックからlan_put_pktまたはlan_put_dmyが繰り返し呼び出され
      るので、ドライバは、lan_put_pktでは、プロトコルスタック側の送信バッフ
      ァから順次パケットデータを読み出してコントローラの送信用バッファメモリ
      領域へコピーします。一方、lan_put_dmyでは、送信用バッファメモリ領域へ
      0をセットします。
  (3) 最後にlan_put_endが呼び出された時点で、ドライバは、送信処理を開始する
      コマンドをコントローラへ発行します。

■Realtek RTL80x9(AS)に関する注意事項

□コンフィグレーションモードとシリアルEEPROM

RTL80x9(AS)は、PCで使用される複数のコンフィグレーション方法に対応するため３
種類のコンフィグレーションモードを内蔵していますが、この中で、組み込みシステ
ム（non-PC, non-PnP）で利用できるものは、次の２種類のモードであると考えられ
ます。

  (A) Jumperモード  〔JP pin = H, PNP pin = *〕

        CONFIG1  ジャンパ信号から検出
        CONFIG2  ジャンパ信号から検出
        CONFIG3  9346から設定
        CONFIG4  9346から設定（RTL80x9ASのみ）

  (B) RT Jumperless 〔JP pin = L, PNP pin = L〕

        CONFIG1  9346から設定
        CONFIG2  9346から設定
        CONFIG3  9346から設定
        CONFIG4  9346から設定（RTL80x9ASのみ）

RTL80x9(AS)の内部的なコンフィグレーション情報はCONFIG1-4レジスタにより管理さ
ますが、上記は、これらのレジスタの値がどのように検出・設定されるかを表わして
います。

上記の内容から解るように、どちらのコンフィグレーションモードを使用する場合も
シリアルEEPROM（9346）に適切な設定情報が書き込まれていることが前提となります。
本ドライバは、ターゲットボードがこの条件を満していることを前提として作成され
ています。

□RTL80x9ASのバッファメモリ容量

RTL80x9(AS)シリーズの中で、RTL8019ASおよびRTL8029ASはコントローラ自身が16KB
のバッファメモリを内蔵しています。そのため、本ドライバのソースコード内で定義
されているバッファメモリ構成を決定する４つのマクロ変数（SMPOOLSIZE, 
SM_TXSTART_PG, SM_RXSTART_PG, SM_RXSTOP_PG）は固定値となります。コントローラ
がこの２つのどちらかである場合、ユーザは当該マクロ変数の設定値を変更しないで
ください。

□DP8390ファミリとの動作上の相違点

RTL80x9(AS)をビッグエンディアンモードかつデータ転送アクセスビット幅16ビット
で動作させた（DCRレジスタへBOS=1, WTS=1を設定する）場合、バッファメモリに格
納される受信パケット情報の一部の構成がNational Semiconductor DP8390ファミリ
コントローラの場合と異なっていることを発見しています。

受信パケット情報の相違点は次のとおりです。（ただし、現在実際に確認が取れてい
るのはRTL8019ASだけです。その他のRealtekコントローラもこの相違点を内在してい
るかどうかは不明です）

  〔DP8390〕      D15 ---------------- D8 + D7 ----------------- D0
                  |  Next Packet Pointer  |     Receive Satus     |
                  +-----------------------+-----------------------+

  〔RTL80x9(AS)〕 D15 ---------------- D8 + D7 ----------------- D0
                  |     Receive Satus     |  Next Packet Pointer  |
                  +-----------------------+-----------------------+

上記の相違点に対応する処理は、本ドライバへ組み込まれています。

