==============================================================================

                    ターゲットボード用サンプル補足説明書
                日立超LSIシステムズ MS7750SE 編(ms7750.TXT)
                            2003年05月30日

                Copyright (c) MiSPO Co., Ltd. 1991-2003
                       http://www.mispo.co.jp/

==============================================================================


■ はじめに

本ファイルには、ターゲットボードに固有な情報が記載されています。
CPUに固有な情報に関してはSH.TXTを参照ください。
ネットワークに固有な情報に関してはTCPIP.TXTを参照ください。


■ ファイル名規則

        vecXXX.asm ------- ベクターテーブル
        netXXX.XXX ------- ネットワークサンプル関連ファイル
        n4iXXX.c --------- 周期タイマー・割込み管理
        nosXXX.c --------- シリアルドライバ
        smpXXX.XXX ------- 非ネットワークのサンプル関連ファイル


■ ファイル構成

        vec7750c.sh ------ ベクタテーブル設定の例             （Green Hills）
        vec7750g.asm ----- ベクタテーブル設定の例             （exeGCC）
        vec7750h.asm ----- ベクタテーブル設定の例             （SHC）

        initsh.c --------- スタートアップルーチンの例         （SHC）
        n4i7750.c -------- SH7750 用周期タイマ・割込み管理機能
        nos16550.c ------- 16550 用シリアル入出力ドライバ
        nos7750.c -------- SH7750 用シリアル入出力ドライバ
        dp8390.c --------- DP8390x LANコントローラドライバサンプル
        nonethw.c -------- ターゲットボード用LANハードウェア依存部のソース

        smp7750.c -------- サンプルプログラム
        net7750.c -------- ネットワークサンプルプログラム

        nonecfg.c -------- ネットワークサンプル用コンフィグレーションファイル

        dp8390.h --------- DP8390x LANコントローラドライバヘッダ
        ms7750.h --------- ターゲットボード用サンプルテストプログラムのヘッダ
        nonethw.h -------- ターゲットボード用LANハードウェア依存部の定義ヘッダ
        nos16550.h ------- 16550 用シリアル入出力ドライバヘッダ
        nos7750.h -------- SH7750 用シリアル入出力ドライバヘッダ
        sh7750.h --------- SH7750 内部I/O定義

        net7750c.cmd ----- リンクオブジェクトリストファイル   （Green Hills）
        net7750g.cmd ----- リンクオブジェクトリストファイル   （exeGCC）
        net7750c.lnk ----- ROM化用のリンカコマンドファイル    （Green Hills)
        net7750g.lnk ----- ROM化用のリンカコマンドファイル    （exeGCC）
        net7750cr.lnk ---- RAMロード用のリンカコマンドファイル（Green Hills)
        net7750gr.lnk ---- RAMロード用のリンカコマンドファイル（exeGCC）

        smp7750c.cmd ----- リンクオブジェクトリストファイル   （Green Hills）
        smp7750g.cmd ----- リンクオブジェクトリストファイル   （exeGCC）
        smp7750c.lnk ----- ROM化用のリンカコマンドファイル    （Green Hills)
        smp7750g.lnk ----- ROM化用のリンカコマンドファイル    （exeGCC）
        smp7750cr.lnk ---- RAMロード用のリンカコマンドファイル（Green Hills)
        smp7750gr.lnk ---- RAMロード用のリンカコマンドファイル（exeGCC）

        dp8390.txt ------- DP8390x LANコントローラドライバ補足説明書
        ms7750.txt ------- ターゲットボード用サンプル補足説明書 MS7750SE 編

■ ロードモジュール生成用ファイル構成

+-----------------------------------------------------------------------------
|
|                                  SHC
|
+-----------------------------------------------------------------------------

    SHC5 ----------------- SHC Ver.5 用ディレクトリ
    SHC6 ----------------- SHC Ver.6 用ディレクトリ
    SHC7 ----------------- SHC Ver.7 用ディレクトリ

        net7750_Hew ------ HEW 用ディレクトリ
        smp7750_Hew ------ HEW 用ディレクトリ
        MS7750.hws ------- HEW 用ワークスペースファイル

        ・ビッグエンディアンのROM化用
        net7750bh.mak ---- サンプルプログラム makefile
        net7750bh.sub ---- リンカのサブコマンドファイル
        smp7750bh.mak ---- サンプルプログラム makefile
        smp7750bh.sub ---- リンカのサブコマンドファイル

        ・ビッグエンディアンのRAMロード用
        net7750bhr.mak --- サンプルプログラム makefile
        net7750bhr.sub --- リンカのサブコマンドファイル
        smp7750bhr.mak --- サンプルプログラム makefile
        smp7750bhr.sub --- リンカのサブコマンドファイル

        ・リトルエンディアンのROM化用
        net7750lh.mak ---- サンプルプログラム makefile
        net7750lh.sub ---- リンカのサブコマンドファイル
        smp7750lh.mak ---- サンプルプログラム makefile
        smp7750lh.sub ---- リンカのサブコマンドファイル

        ・リトルエンディアンのRAMロード用
        net7750lhr.mak --- サンプルプログラム makefile
        net7750lhr.sub --- リンカのサブコマンドファイル
        smp7750lhr.mak --- サンプルプログラム makefile
        smp7750lhr.sub --- リンカのサブコマンドファイル

+-----------------------------------------------------------------------------
|
|                                Green Hills
|
+-----------------------------------------------------------------------------

    GHS ------------------ Green Hills 用ディレクトリ

        ・ビッグエンディアンのROM化用
        net7750bc.mak ---- サンプルプログラム makefile
        smp7750bc.mak ---- サンプルプログラム makefile

        ・ビッグエンディアンのRAMロード用
        net7750bcr.mak --- サンプルプログラム makefile
        smp7750bcr.mak --- サンプルプログラム makefile

        ・リトルエンディアンのROM化用
        net7750lc.mak ---- サンプルプログラム makefile
        smp7750lc.mak ---- サンプルプログラム makefile

        ・リトルエンディアンのRAMロード用
        net7750lcr.mak --- サンプルプログラム makefile
        smp7750lcr.mak --- サンプルプログラム makefile

+-----------------------------------------------------------------------------
|
|                                  exeGCC
|
+-----------------------------------------------------------------------------

    GCC ------------------ exeGCC 用ディレクトリ

        ・ビッグエンディアンのROM化用
        net7750bg.mak ---- サンプルプログラム makefile
        smp7750bg.mak ---- サンプルプログラム makefile

        ・ビッグエンディアンのRAMロード用
        net7750bgr.mak --- サンプルプログラム makefile
        smp7750bgr.mak --- サンプルプログラム makefile

        ・リトルエンディアンのROM化用
        net7750lg.mak ---- サンプルプログラム makefile
        smp7750lg.mak ---- サンプルプログラム makefile

        ・リトルエンディアンのRAMロード用
        net7750lgr.mak --- サンプルプログラム makefile
        smp7750lgr.mak --- サンプルプログラム makefile


※ ROM化用とは
     物理アドレス x0000000番地からプログラムを配置する場合です。
   これは、flash ROM を含めた ROM化、及び ROM エミュレータでのデバッグ
   に使用します。

※ RAMロード用とは
     物理アドレス xC000000番地からプログラムを配置する場合です。
   これは、H-UDI デバッガでのデバッグ、及びモニタプログラム用のロード
   モジュール作成時に使用します。
   （モニタプログラムはプログラムローダとして使用し、デバッグ機能を使用
     することは出来ません。）


■ ROMエミュレータ使用時のデバッグ前に

          ROMエミュレータを使用してデバッグする場合は、環境設定に注意すべき
          点があります。
          また、ROMエミュレータとH-UDIデバッガを併用し ROM領域にコードを展開
          する場合は、これらの設定項目は必要ありません。

VBR 初期値の設定

          ROMエミュレータも割込みを使用するため、ユーザーが使用する VBRアドレ
          スと一致させる必要があります。
          具体的には n4i7750.c の INTVECマクロの値と同じ値を、ROMエミュレータ
          の VBR初期値として設定します。
          サンプルプログラムでは、P1領域の 0x80000000番地を使用しています。

バス幅の初期化

          ROMエミュレータ自体も RAMを使用するため、DRAMをアクセスできるよう
          立ち上げ時に初期化する必要があります。
          本ボードでは、DRAM領域をアクセス出来るようにするためには、DRAM と
          バス制御の初期化が必要であり、実際には vec7750.??? の _BOOT関数
          を元にして初期化処理を記述します。
          （コンピューテックス ROMICE64ではユーザーカスタマイズプログラム、
            京都マイクロコンピュータPARTNER-ETⅡではモニタプログラムが、これ
            に該当します。）

ユーザーNMI割込みのエントリーアドレス

          ROMエミュレータにはユーザー割込みのエントリーアドレスを指定する機種
          があります。（京都マイクロコンピュータPARTNER-ETⅡなど）
          その場合は、VBR 初期値+0x610を指定してください。

モニタコードアドレス

          ROMエミュレータが使用するモニタコード領域を指定する必要があります。
          ユーザープログラム領域と重複しないように配置し、一般的には、ROM領域
          の末尾に配置します。

          例）1MBit ROM × 2の場合
              ROM の占有域は 0x00000～0x3FFFF のため、モニタコードアドレスは
              0x3F000 を指定します。

モニタデータ開始アドレス又はモニタのスタック初期値

          ROMエミュレータもスタックを使用し、スタック初期値を指定する必要が
          あります。また、モニタ用のデータ領域が必要になる機種もありますので
          これらを考慮して指定します。

          例）本ボードは 64Mbyte DRAM の為
              RAM の占有域は 0xAC000000～0xAFFFFFFF（P2領域では）です。そのた
              め、モニタデータ開始アドレス＆スタック初期値は 0xAC0FF000 を指
              定します。


■ H-UDIデバッガ使用時のデバッグ前に

          H-UDIデバッガを使用してデバッグする場合は、コード領域も RAM上にロー
          ドする必要があります。
          ボード付属のモニタプログラムを利用して、ユーザープログラムのロード＆
          実行する場合も、ほぼ同様の注意が必要です。

プログラムのスタート番地

          H-UDIデバッガを使用しDRAMにプログラムをロードした場合は、VBRアドレス
          を DRAM上の番地から実行されます。
          そのため、プログラムのスタート番地は、本来のリセットベクタ 0xA0000000
          ではなく、ロードされたアドレスにする必要があります。
          H-UDIデバッガ使用時のサンプルプログラムでは、P1領域の 0x8C000000番地
          を使用しています。

バス幅の初期化

          ROMエミュレータ自体も RAMを使用するため、DRAMをアクセスできるよう
          立ち上げ時に初期化する必要があります。
          本ボードでは、DRAM領域をアクセス出来るようにするためには、DRAM と
          バス制御の初期化が必要であり、実際には vec7709?.??? の _BOOT関数
          を元にして初期化処理を記述します。
          （コンピューテックス ROMICE64ではユーザーカスタマイズプログラム、
            京都マイクロコンピュータPARTNER-ETⅡではモニタプログラムが、これ
            に該当します。）
          モニタプログラムを利用する場合は、初期化の必要はありません。

ユーザープログラムによる再初期化の禁止

          ユーザープログラムで再初期化を行うと、DRAMにロードされていたプログ
          ラムが破壊される可能性があります。ユーザープログラムでは再初期化を
          行わないでください。
          サンプルプログラムでは、リフレッシュタイマコントロール／ステータス
          レジスタ（RTCSR）にゼロ(初期値)以外が入っていると初期化をスキップし
          ます。

VBRアドレスの書きかえ

          DRAMにロードされていたユーザープログラムを実行する場合は、VBRアドレ
          スを移動する必要があります。
          サンプルプログラムの割込み管理 n4i7750.c では、初期値 0x80000000
          以外に配置しようとした場合、リモートデバッガの使用と判断して VBRを
          書きかえません。
          そこで、n4i7750.c をコンパイルする場合は、REBOOTマクロを定義するこ
          とにより強制的に書きかえます。

          例）shc <op> -def=REBOOT,INTVEC=0x8c000000 n4i7750.c  .... SHC
              ccsh <op> -DREBOOT -DINTVEC=0x8c000000 n4i7750.c  .... GreenHills
              gcc <op> -DREBOOT -DINTVEC=0x8c000000 n4i7750.c   .... exeGCC


■ 割込みハンドラ

割込みハンドラへの分岐

        割込みの入口から例外コードを判別し、本ファイルの割り込みハンドラへ
        分岐（jmp）するまでのルーチンは、次の様に、ユーザにてアセンブラで
        記述してください。
        サンプルの vec7750?.asm(sh) に記述済みです。

        ｜vect610:                    ; 割込みでは BL=1,RB=1 へ切り替わる
        ｜    stc.l   r0_bank,@-r15   ; R0_BANK0 退避
        ｜    mov.l   r0,@-r15        ; R0_BANK1 退避
        ｜    mov.l   r1,@-r15        ; R1_BANK1 退避
        ｜
        ｜    mov     #INTEVT,r0
        ｜    mov.l   @r0,r1          ; INTEVTレジスタの例外コード
        ｜    tst     r1,r1           ; if (例外コード == 0)
        ｜    bt/s    vect610_rte     ;    割込みリターンへ
        ｜    shar    r1
        ｜    mov.l   intdef,r0       ; def_inh の登録テーブル
        ｜    shar    r1
        ｜    add     r1,r0           ; テーブル内の対応アドレス
        ｜    mov.l   @r15+,r1        ; R1_BANK1 復元
        ｜    ldc.l   @r0+,sr         ; SR = def_inh で登録された値
        ｜                            ; ここで、BL=0,RB=0 に切り替わる
        ｜    stc     r0_bank,r0      ; R0_BANK0 = R0_BANK1
        ｜    ldc.l   @r15+,r0_bank   ; R0_BANK1 復元
        ｜
        ｜    mov.l   @r0,r0          ; def_inh で登録の inthdr アドレス
        ｜    jmp     @r0             ; inthdr へ
        ｜    mov.l   @r15+,r0        ; R0_BANK0 復元
        ｜
        ｜vect610_rte:                ; 例外コード0の場合
        ｜    mov.l   @r15+,r1        ; R1_BANK1 復元
        ｜    mov.l   @r15+,r0        ; R0_BANK1 復元
        ｜    ldc.l   @r15+,r0_bank   ; R0_BANK0 復元
        ｜    rte                     ; 割込みリターン
        ｜    nop

SHCでのコード展開例

        お使いのコンパイラのバージョンをご確認の上"C:\NORTi\DOC"フォルダに有
        るバージョン別ドキュメントファイル SHCV7xx.txt SHCV60x.txt SHCV5.txt
        のSH-4の項を参照し対応するコードが展開されることを確認してください。

Green Hills でのコード展開例

        割込みハンドラはＣ言語で記述できます。INTHDR は、__interrupt void
        と定義されています。

        ｜INTHDR inthdr(void)
        ｜{
        ｜    ent_int();
        ｜       :
        ｜    ret_int();
        ｜}

        割込み優先度がカーネルレベル以下の割込みハンドラのコンパイルには、
        必ず、最適化オプション -O を付け、ent_int 呼び出しの前に、不要な
        命令が生成されないよう注意し、以下のようなコードが展開されることを
        確認してください。
        また、割込み優先度がカーネルレベルより高い割込みハンドラの場合は、
        この制限はありませんが ent_int, ret_int を含めた一切のシステムコール
        を使用することが出来ません。

        ｜_inthdr:
        ｜      mov.l   r7,@-sp
        ｜      mov.l   r6,@-sp
        ｜      mov.l   r5,@-sp
        ｜      mov.l   r4,@-sp
        ｜      mov.l   r3,@-sp
        ｜      mov.l   r2,@-sp
        ｜      mov.l   r1,@-sp
        ｜      mov.l   r0,@-sp
        ｜      sts.l   pr,@-sp
        ｜      fmov.s  fr11,@-sp
        ｜      fmov.s  fr10,@-sp
        ｜      fmov.s  fr9,@-sp
        ｜      fmov.s  fr8,@-sp
        ｜      fmov.s  fr7,@-sp
        ｜      fmov.s  fr6,@-sp
        ｜      fmov.s  fr5,@-sp
        ｜      fmov.s  fr4,@-sp
        ｜      fmov.s  fr3,@-sp
        ｜      fmov.s  fr2,@-sp
        ｜      fmov.s  fr1,@-sp
        ｜      mov.l   .L???,r7
        ｜      fmov.s  fr0,@-sp
        ｜      jsr @r7
        ｜      nop
        ｜
        ｜         :
        ｜
        ｜      mov.l   .L???,r6
        ｜      jsr @r6
        ｜      nop
        ｜      fmov.s  @sp+,fr0
        ｜      fmov.s  @sp+,fr1
        ｜      fmov.s  @sp+,fr2
        ｜      fmov.s  @sp+,fr3
        ｜      fmov.s  @sp+,fr4
        ｜      fmov.s  @sp+,fr5
        ｜      fmov.s  @sp+,fr6
        ｜      fmov.s  @sp+,fr7
        ｜      fmov.s  @sp+,fr8
        ｜      fmov.s  @sp+,fr9
        ｜      fmov.s  @sp+,fr10
        ｜      fmov.s  @sp+,fr11
        ｜      lds.l   @sp+,pr
        ｜      mov.l   @sp+,r0
        ｜      mov.l   @sp+,r1
        ｜      mov.l   @sp+,r2
        ｜      mov.l   @sp+,r3
        ｜      mov.l   @sp+,r4
        ｜      mov.l   @sp+,r5
        ｜      mov.l   @sp+,r6
        ｜      mov.l   @sp+,r7
        ｜      rte
        ｜      nop
        ｜
        ｜  .align  4
        ｜.L???:    .word   _ent_int
        ｜.L???:    .word   _ret_int

exeGCC でのコード展開例

        割込みハンドラはＣ言語で記述できます。INTHDR は、単なる void 関数と
        して定義されています。ent_int はマクロとして定義され、その中の asm
        文で一部のレジスタを退避してから、ENT_INT 関数を呼び出します。
        ただし、割込み優先度がカーネルレベルより高い割込みハンドラを記述する
        ことは出来ません。

        ｜INTHDR inthdr(void)
        ｜{
        ｜    ent_int();
        ｜       :
        ｜    ret_int();
        ｜}

        割込みハンドラのコンパイルには、必ず、最適化オプション -O2 を付け、
        ENT_INT 呼び出しの前に、不要な命令が生成されないよう注意し、以下の
        ようにコードが展開されることを確認してください。

        ｜_inthdr:
        ｜        mov.l   r14,@-r15       ! コンパイラが常にこの３行の
        ｜        sts.l   pr,@-r15        ! コードを生成
        ｜        mov     r15,r14         !
        ｜
        ｜        mov.l   r3,@-r15        ! ent_int マクロの asm 文 で
        ｜        mov.l   r2,@-r15        ! R3～R1 を退避します
        ｜        mov.l   r1,@-r15
        ｜        mov.l   L?,r1           ! _ENT_INT 呼出し
        ｜        jsr     @r1
        ｜        nop
        ｜
        ｜         :
        ｜
        ｜        mov.l   L?,r1           ! _ret_int 呼出し
        ｜        jsr     @r1             ! _ret_intで直接割込みリターンする
        ｜        nop                     ! ので以降のコードは使われません
        ｜        mov     r14,r15
        ｜        lds.l   @r15+,pr
        ｜        rts
        ｜        mov.l   @r15+,r14
        ｜
        ｜        .align  2
        ｜L?:
        ｜        .long   _ENT_INT
        ｜L?:
        ｜        .long   _ret_int


■ 周期タイマと割込み管理機能（SH7750）

        SH7750 の周期タイマ割込みサービスルーチンと割込み管理機能は、
        n4i7750.c に定義されています。
        （コンパイルオプションは <op> と省略）

使用するハードウェア

        SH7750 内蔵 TMU を周期タイマとして使用しています。それ以外のタイマ
        を用いる場合は、ユーザーで改造してください。

割込み周期の指定

        割込み周期は、MSEC マクロで決まります。デフォルトは 10 msec です。
        例えば、5 msec に変更する場合は、次の様にコンパイルしてください。

        (例) shc  <op> -def=MSEC=5 n4i7750.c  ---------------- SHC
        (例) ccsh <op> -noasmwarn -DMSEC=5 n4i7750.c  -------- GreenHills
        (例) gcc  <op> -DMSEC=5 n4i7750.c  ------------------- exeGCC

クロックの指定

        ソースクロックのデフォルトは 33.3 MHz です。変更する場合 は CLK マ
        クロを定義してコンパイルしてください。値は [Hz] 単位の周波数です。
        例えば、16MHz に変更する場合は、次の様にコンパイルしてください。他
        のオプション指定は <op> と略記しています。

        (例) shc  <op> -def=CLK=16000000 n4i7750.c  ---------- SHC
        (例) ccsh <op> -noasmwarn -DCLK=16000000 n4i7750.c  -- GreenHills
        (例) gcc  <op> -DCLK=16000000 n4i7750.c  ------------- exeGCC

チャネル番号の指定

        CH マクロで、使用する TMU チャネルを指定できます（CH=0～2）。デフォ
        ルトは CH=0 です。例えば、チャネル1 に変更する場合は、次の様にコン
        パイルしてください。

        (例) shc  <op> -def=CH=1 n4i7750.c  ------------------ SHC
        (例) ccsh <op> -noasmwarn -DCH=1 n4i7750.c  ---------- GreenHills
        (例) gcc  <op> -DCH=1 n4i7750.c  --------------------- exeGCC


割込み優先順位

        本ハンドラの、デフォルトの割込み優先順位は、7 です。これを変更する
        場合、IP マクロを定義してコンパイルしてください。ただし、カーネルよ
        り高優先にはできません（IP ≦ KNL_LEVEL）。本ハンドラより高優先度の
        割込みハンドラが有る場合、多重割込みが起こります。
        例えば、割込み優先順位 2 に変更する場合は、次の様にコンパイルしてく
        ださい。

        (例) shc  <op> -def=IP=2 n4i7750.c  ------------------ SHC
        (例) ccsh <op> -noasmwarn -DIP=2 n4i7750.c  ---------- GreenHills
        (例) gcc  <op> -DIP=2 n4i7750.c  --------------------- exeGCC

時間情報の取り出し

        時間情報を取り出す事が出来ないデバッガを用いて、RTOS対応機能を使用
        する場合は HOOKマクロを指定することにより、ソフト的に時間情報を生成
        します。

        例えば、コンピューテックスROMICE64で RTOSデバッグライブラリを使用し
        ている場合は、次の様にコンパイルしてください。

        (例) shc <op> -def=HOOK=2 n4i7750.c  ----------------- SHC
        (例) ccsh <op> -DHOOK=2 n4i7750.c  ------------------- Green Hills
        (例) gcc <op> -DHOOK=2 n4i7750.c  -------------------- exeGCC

dis_int, ena_int

        この２つのシステムコールは用意していませんので、個別の割込み禁止許
        可を行いたい場合は、各制御レジスタを直接アクセスしてください。


■ シリアル入出力ドライバ(SH7750）

        SH7750 ののシリアル入出力ドライバは、nos7750.c に定義されています。
        （コンパイルオプションは <op> と省略）
        ここに定義されている１チャネル分の処理は、nosio.c のシリアル入出力
        関数経由で呼び出されます。

カーネルの指定

        NORTi Version4 カーネルのシステムコールを使用することを宣言するため
        V4 マクロを定義します。（V3 マクロを定義した場合は、NORTi3 カーネル
        を使用か、NORTi3 互換システムコールとしてコンパイルされます。）

          (例) shc <op> -def=V4 nos7750.c  -------------------- SHC
          (例) gcc <op> -DV4 nos7750.c  ----------------------- exeGCC
          (例) ccsh <op> -DV4 nos7750.c  ---------------------- Green Hills

チャネル番号の指定

        CH マクロで、論理チャネル番号を指定できます。（無指定時は、CH=0）
        CH は 0～3 を指定できます。
        CH0, CH1 マクロで、物理チャネル番号を変更できます。
        CH0 を定義すると、SCI を使うようにコンパイルされます。
        CH1 を定義すると、FIFO 付き SCIF を使うようにコンパイルされます。

        デフォルトでは、論理チャンネル CH=0,2 は物理チャンネルCH0 に対応し、
        論理チャンネル CH=1,3 は物理チャンネルCH1 に対応しています。

        チャネル0 とチャネル1 の両方をリンクする場合は、重複しないモジュー
        ル名となるようコンパイルしてください。

          (例) shc <op> -def=CH=1 nos7750.c  ------------------ SHC
          (例) gcc <op> -DCH=1 nos7750.c  --------------------- exeGCC
          (例) ccsh <op> -DCH=1 nos7750.c  -------------------- Green Hills

ボーレート･ジェネレータ

        ソースクロックのデフォルトは 33.3333 MHz です。変更する場合 は CLK
        マクロを定義してコンパイルしてください。
        値は [Hz] 単位の周波数です。

          (例) shc <op> -def=CLK=30000000 nos7750.c  ---------- SHC
          (例) gcc <op> -DCLK=30000000 nos7750.c  ------------- exeGCC
          (例) ccsh <op> -DCLK=30000000 nos7750.c  ------------ Green Hills

送受信バッファサイズの指定

        受信／送信バッファのサイズを、BUFSZ マクロにより定義してコンパイル
        してください。受信バッファと異なるサイズの送信バッファを用いる場合
        は、さらに TXBUFSZ マクロを定義してください。
        未指定時は、受信／送信バッファ共 1024 バイトとなります。

          (例) 受信バッファ, 送信バッファ共 128 バイト BUFSZ=128
          (例) 受信バッファ128, 送信バッファ 64 バイト BUFSZ=128, TXBUFSZ=64

ソフトウェア･フロー制御

        XON/XOFF キャラクタによるフロー制御を用いない場合、NOXON マクロを定
        義してコンパイルしてください。コードサイズと処理速度を節約できます。

ハードウェアフロー制御

        SCI を使用した場合は、標準ではサポートしていません。
        SCIF 内蔵の RTS-CTS 機能を使い、ソフトウェアに依らず行います。

割込み優先順位

        本ハンドラの、デフォルトの割込み優先順位は、8 です。
        これを変更する場合、IP マクロを定義してコンパイルしてください。
        ただし、カーネルより高優先にはできません。（IP ≦ KNL_LEVEL）
        本ハンドラより高優先度の割込みハンドラが有る場合、多重割込みが起こ
        ります。例えば、割込み優先順位 2 の場合は、次のようにコンパイルして
        ください。

          (例) shc <op> -def=IP=2 nos7750.c  ------------------ SHC
          (例) gcc <op> -DIP=2 nos7750.c  --------------------- exeGCC
          (例) ccsh <op> -DIP=2 -o nos7750.o nos7750.c  ------- Green Hills

未サポート機能

        調歩同期式モードのみで、クロック同期式モードはサポートしていません。
        内蔵ボーレートジェネレータのみで、外部クロック入出力はサポートして
        いません。
        SH7750 特有のマルチプロセッサモードはサポートしていません。


■ シリアル入出力ドライバ（NS16550）

        MS7750SE01 用 NS16550 のシリアル入出力ドライバは、nos16550.c に定義
        されています。
        ここに定義されている１チャネル分の処理は、nosio.c のシリアル入出力
        関数経由で呼び出されます。

必ず必要な指定

        ターゲットCPU が SH4 であることを宣言するため SH マクロを定義します。
        （本ドライバは汎用のため、内部で SH4 マクロを定義していません。）

          (例) shc <op> -def=SH4 nos16550.c  ------------------ SHC
          (例) gcc <op> -DSH4 nos16550.c  --------------------- exeGCC
          (例) ccsh <op> -DSH4 nos16550.c  -------------------- Green Hills

カーネルの指定

        NORTi Version4 カーネルのシステムコールを使用することを宣言するため
        V4 マクロを定義します。（V3 マクロを定義した場合は、NORTi3 カーネル
        を使用か、NORTi3 互換システムコールとしてコンパイルされます。）

          (例) shc <op> -def=V4 nos16550.c  ------------------- SHC
          (例) gcc <op> -DV4 nos16550.c  ---------------------- exeGCC
          (例) ccsh <op> -DV4 nos16550.c  --------------------- Green Hills

ターゲットボードの指定

        MS7750SE01 用であることを MS7750マクロと CLKTYPEマクロによって指定
        します。

          (例) shc <op> -def=MS7750,CLKTYPE=1 nos16550.c  ----- SHC
          (例) gcc <op> -DMS7750 -DCLKTYPE=1 nos16550.c  ------ exeGCC
          (例) ccsh <op> -DMS7750 -DCLKTYPE=1 nos16550.c  ----- Green Hills

チャネル番号の指定

        CH マクロで、論理チャネル番号を指定できます。（無指定時は、CH=0）
        CH は 0～3 を指定できます。
        例えば、チャンネル 1 の場合は、次のようにコンパイルしてください。

          (例) shc <op> -def=CH=1 nos16550.c  ----------------- SHC
          (例) gcc <op> -DCH=1 nos16550.c  -------------------- exeGCC
          (例) ccsh <op> -DCH=1 nos16550.c  ------------------- Green Hills

ボーレート･ジェネレータ

        ソースクロックのデフォルトは 1.8432 MHz です。変更する場合 は BCLK
        マクロを定義してコンパイルしてください。値は [Hz] 単位の周波数です。
        例えば、3.6864 MHz の場合は、次のようにコンパイルしてください。

          (例) shc <op> -def=BCLK=3686400 nos16550.c  --------- SHC
          (例) gcc <op> -DBCLK=3686400 nos16550.c  ------------ exeGCC
          (例) ccsh <op> -DBCLK=3686400 nos16550.c  ----------- Green Hills

送受信バッファサイズの指定

        受信／送信バッファのサイズを、BUFSZ マクロにより定義してコンパイル
        してください。受信バッファと異なるサイズの送信バッファを用いる場合
        は、さらに TXBUFSZ マクロを定義してください。
        未指定時は、受信／送信バッファ共 1024 バイトとなります。

          (例) 受信バッファ, 送信バッファ共 128 バイト BUFSZ=128
          (例) 受信バッファ128, 送信バッファ 64 バイト BUFSZ=128, TXBUFSZ=64

ソフトウェア･フロー制御

        XON/XOFF キャラクタによるフロー制御を用いない場合、NOXON マクロを定義
        してコンパイルしてください。コードサイズと処理速度を節約できます。

ハードウェアフロー制御

        ハードフローを用いない場合は、NOFLW マクロ定義してコンパイルしてくだ
        さい。コードサイズと処理速度を節約できます。

割込み優先順位

        本ハンドラの、デフォルトの割込み優先順位は、7 です。
        これを変更する場合、IP マクロを定義してコンパイルしてください。
        ただし、カーネルより高優先にはできません。（IP ≦ KNL_LEVEL）
        本ハンドラより高優先度の割込みハンドラが有る場合、多重割込みが起こり
        ます。例えば、割込み優先順位 2 の場合は、次のようにコンパイルしてくだ
        さい。

          (例) shc <op> -def=IP=2 nos16550.c  ----------------- SHC
          (例) gcc <option> -DIP=2 nos16550.c  ---------------- exeGCC
          (例) ccsh <option> -DIP=2 nos16550.c  --------------- Green Hills

未サポート機能

        調歩同期式モードのみで、クロック同期式モードはサポートしていません。
        内蔵ボーレート･ジェネレータのみで、外部クロック入出力はサポートして
        いません。
        モデム制御信号の RI（Ring Indicator)信号はサポートしていません。


■ その他注意事項

スタートアップルーチン

        特別なスタートアップルーチンは必要有りませんが、割込みベクタの領域
        は、サンプルを参考に作成してください。

割込みハンドラと割込みサービスルーチン

        割込み番号が同一の割込みハンドラと割込みサービスルーチンを定義/生成
        することは出来ません。ただし、割込み番号が異なれば割込みハンドラと
        割込みサービスルーチンを併用することが出来ます。

内部 I/O レジスタの入出力

        ユーザープログラムから内部 I/O レジスタへのアクセスに関して、何の制
        限もありません。付属の shxxxx.h ファイルに、SHxxxx の内部 I/O レジ
        スタの定義と、その入出力用マクロ sfr_xxx() が定義されていますが、
        ユーザープログラムでの使用を強制するものではありません。
        SH のビット操作は数命令を必要とします。同じポートを複数のタスクや割
        込みハンドラからアクセスする場合は、排他制御が必要であることに、十
        分注意してください。

割込みレベル

        SH では、割込みに対する 16レベルの許可/禁止が可能です。NORTi のカー
        ネルはレベル 14 で、タスクはレベル 0 で実行されます。割込みハンドラ
        はレベル 1～14 を選択できます。
        レベル 15 割込みは、カーネルより優先的な割込みとして使用できます。
        ただし、カーネルより高優先の割込みからは、一切のシステムコールを発
        行できません。

        カーネルレベルとして 1～15 の任意の値も指定できます。このためには、
        #include "nocfg4.h"（NORTi3 互換モードでは、#include "nocfg3.h"）の
        前に、#define KNL_LEVEL ?  を定義してください。割込みハンドラにはレ
        ベル 1～KNL_LEVEL を選択できます。

プロセッサのモード

        SH-4 の処理モードには、ユーザーモードと特権モードの２つがあります。
        ユーザーモードではノンキャッシャブル領域が使えないため、外部のI/Oを
        直接アクセスすることができません。
        それに対し、NORTi では、タスクも割込みハンドラもカーネルも全て特権
        モードで動作します。したがって、自由に外部I/Oをアクセスすることがで
        きます。

メモリプール用メモリ

        メモリプール用メモリのサイズをコンフィグレーションで指定すると、メモ
        リプール用メモリに対して独立したセクション名が与えられます。
        セクション名は、SHCでは BMPLMEM、Green Hills では .MPLMEM、exeGCC
        では MPLMEM になります。
        リンクする際には、このセクションの配置と、必要な場合はアドレスを定義
        てください。

スタック用メモリ

        スタック用メモリのサイズをコンフィグレーションで指定すると、スタック
        用メモリに対して独立したセクション名が与えられます。
        セクション名は、SHCでは BSTKMEM、Green Hills では .STKMEM、exeGCC
        では STKMEM になります。
        リンクする際には、このセクションの配置と、必要な場合はアドレスを定義
        てください。


■ サンプルプログラムについて

        付属のサンプルには特定のハードウェアに依存している部分があります。
        特に、次のポイントに注意してカスタマイズしてください。
        sh7750 の RAM を 0A4080000～ に変更する例を示します。コンパイルオ
        プションは <op> と略記しています。

初期化のスキップ

        プログラム実行時に既に初期化されている場合があります。このような場合
        プログラムで再初期化を行うと、DRAMにロードされていたプログラムが破壊
        される可能性があります。
        サンプルプログラムでは、リフレッシュタイマコントロール／ステータスレ
        ジスタ（RTCSR）にゼロ(初期値)以外が入っていると初期化をスキップします。

データ領域

        データ領域を、RAM 先頭に修正してください。

        (例) smp7750?h.sub:
               START VECT(080000000),P,C,D(080001000),R,B,STACK(084080000)
                                                      ----------- SHC
        (例) smp7750c.lnk : .data 0x84080000  ------------------- Green Hills
        (例) smp7750g.lnk : .data 0x84080000  ------------------- exeGCC

スタックポインタ初期値

        SP 初期値を RAM 最終アドレス+1 に修正してください。

        (例) smp7750?h.mak: asmsh vec7750h.asm <op> -def=_INIT_STACK="H'840A0000"
                                                 --------------- SHC
        (例) smp7750g.lnk : __stack_init = 0x840A0000  --------- exeGCC

        Green Hills では、スタック容量を調整してください。

        (例) smp7750c.lnk : .stack   align(4) pad(0x?????)  ---- Green Hills

クロック

        周期タイマ割込みハンドラのクロックの定義（CLK マクロ）を、システム
        に合わせて修正してください（下記の例では 16 MHz）。

        (例) smp7750?h.mak: shc <op> -def=CLK=16000000 n4i7750.c  --- SHC
        (例) smp7750?g.mak: gcc <op> -DCLK=16000000 n4i7750.c  ------ exeGCC
        (例) smp7750?c.mak: ccsh <op> -DCLK=16000000 n4i7750.c  - GreenHills

ハードウェア初期化

        プロセッサの初期化（ウェイト数設定）やポート初期化部分も必要に応じ
        てユーザーで作成してください。
        メモリの初期設定などプログラムの最初に処理が必要な場合、ベクタ設定
        vec7750?.asm(sh) のリセットベクタに追加してください。

■ トラブル・シューティング

main 関数まで来ない時

        NORTi を組み込んだプログラムでも、main 関数で syssta(); を実行する
        までは、通常のシングルタスクのプログラムです。
        NORTi を組み込まない単純なプログラムで main 関数まで来るように、ス
        タートアップを見直して下さい。
        ・RAM 使用の前に、チップセレクト（バス幅）等の設定、DRAM の初期化が
          終わっているか。
        ・各セクションのアドレス定義は正しいか。
        ・DRAM にプログラムをロードする場合、実行後に初期化を行っていないか。
          （このような場合は、予め初期化されており、DRAM の再初期化によって
            ロードされているプログラムが破壊されることがあります。）

sysini でハングアップする時

        sysini() から呼び出す intini() 関数で、割込みベクタの初期設定を行っ
        ています。intini 関数にブレークポイントを設定し、初期化内容がシステ
        ムと合致しているか確認してください。
        また、スタックポインタが正しいか確認してください。SH では、sysini()
        に来るまでスタックを使用しない場合があり、必ずスタックを使用する
        sysini() でハングアップすることがあります。

        nocfg?.h をインクルードしているファイルをコンパイルする際には SH4
        マクロを定義しているかを確認してください。

syssta からリターンする時

        先に実行した cre_??? や sta_tsk でエラーがあった場合、syssta を実行
        しても、マルチタスクへ移行せずにリターンしてきます。
        システム変数 SYSER（int 型）のエラーコードをウォッチしながら、main
        をステップ実行し、原因を特定して下さい。ID 上限のチェックでエラーと
        なることが考えられます。他に、cre_??? でエラーとなる場合、メモリ不
        足が考えれれます。

get_mpl, get_mpf や rcv_mbx でハングアップする時

        引数にポインタへのポインタを渡しているか（& を付け忘れていないか）
        確認してください。

rel_mpl, rel_mpf や snd_mbx でハングアップする時

        メモリブロックやメッセージのアドレスが奇数でないか調べてください。

割込みがかかると暴走する時

        割込みハンドラ定義情報のあるファイルをコンパイルする際には SH4 マク
        ロを定義しているかを確認してください。

        main 関数は無事に通過するが、マルチタスクへ移行しようとすると暴走す
        る場合、まず、割込みハンドラを外してみてください。具体的には、
        intsta(); を外してください。これで暴走が止まる場合、割込みハンドラ
        への分岐処理が正しいか見直して下さい。また、割込みハンドラのコード
        展開も確認して下さい。

