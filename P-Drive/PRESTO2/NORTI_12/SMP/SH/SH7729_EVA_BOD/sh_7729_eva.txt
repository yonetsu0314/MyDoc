==============================================================================

                    ターゲットボード用サンプル補足説明書
               Computex SH7729評価ボード 編(sh_7729eva.TXT)
                                2002年3月26日

                Copyright (c) MiSPO Co., Ltd. 1991-2002
                       http://www.mispo.co.jp/

==============================================================================


■ はじめに

本ファイルには、ターゲットボードに固有な情報が記載されています。
CPUに固有な情報に関してはSH.TXTを参照ください。
ネットワークに固有な情報に関してはTCPIP.TXTを参照ください。


■ ファイル名規則

        vecXXX.asm ----------- ベクターテーブル
        netXXX.XXX ----------- ネットワークサンプル関連ファイル
        n4iXXX.c ------------- 周期タイマー・割込み管理
        nosXXX.c ------------- シリアルドライバ
        smpXXX.XXX ----------- 非ネットワークのサンプル関連ファイル


■ ファイル構成

        vec7729c.asm --------- ベクタテーブル設定の例             （Green Hills）
        vec7729g.asm --------- ベクタテーブル設定の例             （exeGCC）
        vec7729h.asm --------- ベクタテーブル設定の例             （SHC）
        vec7709x.xas --------- ベクタテーブル設定の例             （GAIO）

        initsh.c ------------- スタートアップルーチンの例         （SHC）
        initicc.c ------------ スタートアップルーチンの例         （EW）
        startup.xas ---------- スタートアップルーチンの例         （GAIO）
        n4i7729.c ------------ 周期タイマ割込みハンドラ
        nos7729.c ------------ SH7729用シリアル入出力ドライバ
        smp7729.c ------------ サンプルプログラム

        nos7729.h ------------ SH7729用シリアル入出力ドライバヘッダ
        sh7729.h ------------- SH7729 内部I/O定義

        sh7729_eva.txt ------- ターゲットボード用サンプル補足説明書

■ ロードモジュール生成用ファイル構成

+-----------------------------------------------------------------------------
|
|                                  SHC
|
+-----------------------------------------------------------------------------

    SHC5 ----------------- SHC Ver.5 用ディレクトリ
    SHC6 ----------------- SHC Ver.6 用ディレクトリ
    SHC7 ----------------- SHC Ver.7 用ディレクトリ

        smp7729_Hew --------- HEW 用ディレクトリ
        SH7729ev.hws -- HEW 用ワークスペースファイル

        ・ビッグエンディアンのROM化用
        smp7729bh.mak -------- サンプルプログラム makefile
        smp7729bh.sub -------- リンカのサブコマンドファイル

        ・ビッグエンディアンのRAMロード用
        smp7729bhr.mak ------- サンプルプログラム makefile
        smp7729bhr.sub ------- リンカのサブコマンドファイル

        ・リトルエンディアンのROM化用
        smp7729lh.mak -------- サンプルプログラム makefile
        smp7729lh.sub -------- リンカのサブコマンドファイル

        ・リトルエンディアンのRAMロード用
        smp7729lhr.mak ------- サンプルプログラム makefile
        smp7729lhr.sub ------- リンカのサブコマンドファイル

+-----------------------------------------------------------------------------
|
|                                Green Hills
|
+-----------------------------------------------------------------------------

    GHS ------------------ Green Hills 用ディレクトリ

        smp7729c.cmd --------- リンクオブジェクトリストファイル
        smp7729c.lnk --------- ROM化用のリンカコマンドファイル
        smp7729c.lnk --------- RAMロード用のリンカコマンドファイル

        ・ビッグエンディアンのROM化用
        smp7729bc.mak -------- サンプルプログラム makefile

        ・ビッグエンディアンのRAMロード用
        smp7729bcr.mak ------- サンプルプログラム makefile

        ・リトルエンディアンのROM化用
        smp7729lc.mak -------- サンプルプログラム makefile

        ・リトルエンディアンのRAMロード用
        smp7729lcr.mak ------- サンプルプログラム makefile

+-----------------------------------------------------------------------------
|
|                                  exeGCC
|
+-----------------------------------------------------------------------------

    GCC ------------------ exeGCC 用ディレクトリ

        smp7729g.cmd --------- リンクオブジェクトリストファイル
        smp7729g.lnk --------- ROM化用のリンカコマンドファイル
        smp7729g.lnk --------- RAMロード用のリンカコマンドファイル

        ・ビッグエンディアンのROM化用
        smp7729bg.mak -------- サンプルプログラム makefile

        ・ビッグエンディアンのRAMロード用
        smp7729bgr.mak ------- サンプルプログラム makefile

        ・リトルエンディアンのROM化用
        smp7729lg.mak -------- サンプルプログラム makefile

        ・リトルエンディアンのRAMロード用
        smp7729lgr.mak ------- サンプルプログラム makefile

+-----------------------------------------------------------------------------
|
|                                 IAR EW
|
+-----------------------------------------------------------------------------

    EW ----------------- IAR EW用ディレクトリ

        smp7729.prj --------- EW 用ワークベンチ・プロジェクトファイル

        ・ビッグエンディアンのROM化用
        smp7709bi.mak -------- サンプルプログラム makefile
        smp7709bi.xcl -------- リンカコマンドファイル

        ・ビッグエンディアンのRAMロード用
        smp7709bir.mak ------- サンプルプログラム makefile
        smp7709bir.xcl ------- リンカコマンドファイル

        ・リトルエンディアンのROM化用
        smp7709li.mak -------- サンプルプログラム makefile
        smp7709li.xcl -------- リンカコマンドファイル

            リトルエンディアンのRAMロード用
        smp7709lir.mak ------- サンプルプログラム makefile
        smp7709lir.xcl ------- リンカコマンドファイル

+-----------------------------------------------------------------------------
|
|                               GAIO XASS-V
|
+-----------------------------------------------------------------------------

    GAIO ----------------- GAIO XASS-V 用ディレクトリ

        ・ビッグエンディアンのROM化用
        smp7729bx.mak -------- サンプルプログラム makefile
        smp7729b.xls --------- リンカコマンドファイル

        ・ビッグエンディアンのRAMロード用
        smp7729bxr.mak ------- サンプルプログラム makefile
        smp7729bx.xls -------- リンカコマンドファイル

        ・リトルエンディアンのROM化用
        smp7729lx.mak -------- サンプルプログラム makefile
        smp7729l.xls --------- リンカコマンドファイル

        ・リトルエンディアンのRAMロード用
        smp7729lxr.mak -------- サンプルプログラム makefile
        smp7729lr.xls --------- リンカコマンドファイル

        opt.com      ---------- オプションパラメータファイル

※ ROM化用とは
     物理アドレス x0000000番地からプログラムを配置する場合です。
   これは、ROM化、及び ROM エミュレータでのデバッグに使用します。

※ RAMロード用とは
     物理アドレス xC000000番地からプログラムを配置する場合です。
   これは、H-UDI デバッガでのデバッグに使用します。


■ ROMエミュレータ使用時のデバッグ前に

          ROMエミュレータを使用してデバッグする場合は、環境設定に注意すべき
          点があります。
          また、ROMエミュレータとH-UDIデバッガを併用し ROM領域にコードを展開
          する場合は、これらの設定項目は必要ありません。

VBR 初期値の設定

          ROMエミュレータも割込みを使用するため、ユーザーが使用する VBRアドレ
          スと一致させる必要があります。
          具体的には n4i7729.c の INTVECマクロの値と同じ値を、ROMエミュレータ
          の VBR初期値として設定します。
          サンプルプログラムでは、P2領域の 0xA0000000番地を使用しています。

バス幅の初期化

          ROMエミュレータ自体も RAMを使用するため、SRAMをアクセスできるよう
          立ち上げ時に初期化する必要があります。
          本ボードでは、SRAM領域をアクセス出来るようにするためには、バス幅を
          8ビットに変更するよう下記のコードを記述します。
          （コンピューテックス ROMICE64ではユーザーカスタマイズプログラム、
            京都マイクロコンピュータPARTNER-ETⅡではモニタプログラムが、これ
            に該当します。）

          |         MOV.L   BCR2,r3
          |         MOV.L   BCR2_DATA,r0
          |         MOV.W   r0,@r3
          |            :
          |            :
          |            :
          | BCR2:       .DATA.L     h'ffffff62   ; アセンブラの書式は、使用
          | BCR2_DATA:  .DATA.L     h'00003fd0   ; される環境に合わせます。

ユーザーNMI割込みのエントリーアドレス

          ROMエミュレータにはユーザー割込みのエントリーアドレスを指定する機種
          があります。（京都マイクロコンピュータPARTNER-ETⅡなど）
          その場合は、VBR 初期値+0x610を指定してください。

モニタコードアドレス

          ROMエミュレータが使用するモニタコード領域を指定する必要があります。
          ユーザープログラム領域と重複しないように配置し、一般的には、ROM領域
          の末尾に配置します。

          例）4MBit ROMの場合
              ROM の占有域は 0x00000～0x7FFFF のため、モニタコードアドレスは
              0xA007F000（P2領域）を指定します。

モニタデータ開始アドレス又はモニタのスタック初期値

          ROMエミュレータもスタックを使用し、スタック初期値を指定する必要が
          あります。また、モニタ用のデータ領域が必要になる機種もありますので
          これらを考慮して指定します。
          また、本ボードでは SRAM と SDRAM が搭載されており、初期化を必要と
          ない SRAM をモニタ用に使います。

          例）本ボードの SRAMは 1Mbit RAM の為
              SRAM の占有域は 0xA8000000～0xA801FFFF（P2領域では）です。その
              ため、モニタデータ開始アドレス＆スタック初期値は 0xA801F000 を
              指定します。


■ H-UDIデバッガ単体でのデバッグ前に

          H-UDIデバッガを単体で使用してデバッグする場合は、注意すべき点あり
          ます。
          また、ROMエミュレータとH-UDIデバッガを併用し SDRAM領域にコードを展
          開する場合にも、これらの注意点が関係します。

SDRAM 及びバス制御の初期化

          H-UDIデバッガがコードを SDRAM上に展開する前に SDRAMを初期化し、アク
          セスが出来るようにする必要があります。
          通常のH-UDIデバッガには初期化するためのマクロ機能などが装備されてい
          ます。初期化データは vec7729?.??? のリセットベクタに初期化ルーチン
          を記述していますので、それぞれの H-UDIデバッガに合ったマクロ命令に
          置き換えてください。

ユーザープログラムによる再初期化の禁止

          ユーザープログラムで再初期化を行うと、DRAMにロードされていたプログ
          ラムが破壊される可能性があります。ユーザープログラムでは再初期化を
          行わないでください。
          サンプルプログラムでは、リフレッシュタイマコントロール／ステータス
          レジスタ（RTCSR）にゼロ(初期値)以外が入っていると初期化をスキップし
          ます。


■ 割り込みハンドラ

割込みハンドラへの分岐

        割り込みの入口から例外コードを判別し、本ファイルの割り込みハンドラ
        へ分岐（jmp）するまでのルーチンは、次の様に、ユーザにてアセンブラで
        記述してください。サンプルの vec7729?.asm(sh) に記述済みです。

        ｜vect610:                    ; 割込みでは BL=1,RB=1 へ切り替わる
        ｜    stc.l   r0_bank,@-r15   ; R0_BANK0 退避
        ｜    mov.l   r0,@-r15        ; R0_BANK1 退避
        ｜    mov.l   r1,@-r15        ; R1_BANK1 退避
        ｜
        ｜    mov.l   intevt2,r0
        ｜    mov.l   @r0,r1          ; INTEVT2レジスタの例外コード
        ｜    tst     r1,r1           ; if (例外コード == 0)
        ｜    bt/s    vect610_rte     ;    割込みリターンへ
        ｜    shar    r1
        ｜    mov.l   intdef,r0       ; def_inh の登録テーブル
        ｜    shar    r1
        ｜    add     r1,r0           ; テーブル内の対応アドレス
        ｜    mov.l   @r15+,r1        ; R1_BANK1 復元
        ｜    ldc.l   @r0+,sr         ; SR = def_inh で登録された値
        ｜                            ; ここで、BL=0,RB=0 に切り替わる
        ｜    stc     r0_bank,r0      ; R0_BANK0 = R0_BANK1
        ｜    ldc.l   @r15+,r0_bank   ; R0_BANK1 復元
        ｜
        ｜    mov.l   @r0,r0          ; def_inh で登録の inthdr アドレス
        ｜    jmp     @r0             ; inthdr へ
        ｜    mov.l   @r15+,r0        ; R0_BANK0 復元
        ｜
        ｜vect610_rte:                ; 例外コード0の場合
        ｜    mov.l   @r15+,r1        ; R1_BANK1 復元
        ｜    mov.l   @r15+,r0        ; R0_BANK1 復元
        ｜    ldc.l   @r15+,r0_bank   ; R0_BANK0 復元
        ｜    rte                     ; 割込みリターン
        ｜    nop

SHCでのコード展開例

        お使いのコンパイラのバージョンをご確認の上"C:\NORTi\DOC"フォルダに有
        るバージョン別ドキュメントファイル SHCV7xx.txt SHCV60x.txt SHCV5.txt
        のSH-3DSPの項を参照し対応するコードが展開されることを確認してください。

Green Hills でのコード展開例

        割込みハンドラはＣ言語で記述できます。INTHDR は、__interrupt void
        と定義されています。

        ｜INTHDR inthdr(void)
        ｜{
        ｜    ent_int();
        ｜       :
        ｜    ret_int();
        ｜}

        割込み優先度がカーネルレベル以下の割込みハンドラのコンパイルには、
        必ず、最適化オプション -O を付け、ent_int 呼び出しの前に、不要な
        命令が生成されないよう注意し、以下のようなコードが展開されることを
        確認してください。
        また、割込み優先度がカーネルレベルより高い割込みハンドラの場合は、
        この制限はありませんが ent_int, ret_int を含めた一切のシステムコール
        を使用することが出来ません。

        ｜_inthdr:
        ｜        mov.l   r7,@-sp        ; コンパイラが
        ｜        mov.l   r6,@-sp        ; PR と R7 ～ R0 を退避するコード
        ｜        mov.l   r5,@-sp        ; を生成します
        ｜        mov.l   r4,@-sp
        ｜        mov.l   r3,@-sp
        ｜        mov.l   r2,@-sp
        ｜        mov.l   r1,@-sp
        ｜        mov.l   r0,@-sp
        ｜        sts.l   pr,@-sp
        ｜        mov.l   .L??,r1        ; _ent_int 呼出し
        ｜        jsr     @r1
        ｜        nop
        ｜         :
        ｜        mov.l   .L??,r1        ; _ret_int 呼出し
        ｜        jsr    @r1             ; _ret_intで直接割込みリターンする
        ｜        nop                    ; ので以降のコードは使われません
        ｜        lds.l   @sp+,pr
        ｜        mov.l   @sp+,r0
        ｜        mov.l   @sp+,r1
        ｜        mov.l   @sp+,r2
        ｜        mov.l   @sp+,r3
        ｜        mov.l   @sp+,r4
        ｜        mov.l   @sp+,r5
        ｜        mov.l   @sp+,r6
        ｜        mov.l   @sp+,r7
        ｜        rte
        ｜        nop
        ｜        .align  4
        ｜.L??:   .data.l _ent_int
        ｜.L??:   .data.l _ret_int

exeGCC でのコード展開例

        割込みハンドラはＣ言語で記述できます。INTHDR は、単なる void 関数と
        して定義されています。ent_int はマクロとして定義され、その中の asm
        文で一部のレジスタを退避してから、ENT_INT 関数を呼び出します。
        ただし、割込み優先度がカーネルレベルより高い割込みハンドラを記述する
        ことは出来ません。

        ｜INTHDR inthdr(void)
        ｜{
        ｜    ent_int();
        ｜       :
        ｜    ret_int();
        ｜}

        割込みハンドラのコンパイルには、必ず、最適化オプション -O2 を付け、
        ENT_INT 呼び出しの前に、不要な命令が生成されないよう注意し、以下の
        ようにコードが展開されることを確認してください。

        ｜_inthdr:
        ｜        mov.l   r14,@-r15       ! コンパイラが常にこの３行の
        ｜        sts.l   pr,@-r15        ! コードを生成
        ｜        mov     r15,r14         !
        ｜
        ｜        mov.l   r3,@-r15        ! ent_int マクロの asm 文 で
        ｜        mov.l   r2,@-r15        ! R3～R1 を退避します
        ｜        mov.l   r1,@-r15
        ｜        mov.l   L?,r1           ! _ENT_INT 呼出し
        ｜        jsr     @r1
        ｜        nop
        ｜
        ｜         :
        ｜
        ｜        mov.l   L?,r1           ! _ret_int 呼出し
        ｜        jsr     @r1             ! _ret_intで直接割込みリターンする
        ｜        nop                     ! ので以降のコードは使われません
        ｜        mov     r14,r15
        ｜        lds.l   @r15+,pr
        ｜        rts
        ｜        mov.l   @r15+,r14
        ｜
        ｜        .align  2
        ｜L?:
        ｜        .long   _ENT_INT
        ｜L?:
        ｜        .long   _ret_int

EW/ICC でのコード展開例

        割込みハンドラはＣ言語で記述できます。INTHDR は、単なる void 関数と
        して定義されています。ent_int はマクロとして定義され、その中の asm
        文で一部のレジスタを退避してから、ent_int 関数を呼び出します。
        ただし、割込み優先度がカーネルレベルより高い割込みハンドラを記述する
        ことは出来ません。

        ｜INTHDR inthdr(void)
        ｜{
        ｜    ent_int();
        ｜       :
        ｜    ret_int();
        ｜}

        割込みハンドラのコンパイルには、最適化オプション -Z3 以下及び -S3以下
        にして ent_int 呼び出しまでのレジスタの扱いが変わらないように注意して
        ください。  デバッグ情報生成 --debug オプションの併用は可能です。

        ｜inthdr:
        ｜        sts.l   PR,@-R15　　    ; コンパイラが生成
        ｜
        ｜        mov.l   R0,@-R15        ; ent_int マクロ asm 文で退避
        ｜
        ｜        mov.l  ??inthdr_0,R0    ; v4_ent_int
        ｜        jsr    @R0
        ｜        nop
        ｜
        ｜         :
        ｜
        ｜        mov.l  ??inthdr_0+4,R0  ; ret_int 呼出し
        ｜        jsr     @R0             ; ret_intで直接割込みリターンする
        ｜        nop                     ; ので以降のコードは使われません
        ｜
        ｜        lds.l   @R15+,PR
        ｜        rts
        ｜        nop
        ｜
        ｜
        ｜??inthdr_0:
        ｜        DATA.L v4_ent_int
        ｜        DATA.L ret_int

GAIO XASSV でのコード展開例

        割込みハンドラはＣ言語で記述できます。INTHDR は、__interrupt void
        と定義されています。

        ｜INTHDR inthdr(void)
        ｜{
        ｜    ent_int();
        ｜       :
        ｜    ret_int();
        ｜}

        割込み優先度がカーネルレベル以下の割込みハンドラのコンパイルには、
        必ず、デバッグオプション -d は付けないでください。ent_int 呼び出しの
        前に、不要な命令が生成されないよう注意し、以下のようなコードが展開さ
        れることを確認してください。
        また、割込み優先度がカーネルレベルより高い割込みハンドラの場合は、
        この制限はありませんが ent_int, ret_int を含めた一切のシステムコール
        を使用することが出来ません。

        ｜_inthdr:
        ｜        sts.l   pr,@-r15
        ｜        sts.l   macl,@-r15
        ｜        sts.l   mach,@-r15
        ｜        mov.l   r10,@-r15
        ｜        mov.l   S__v3_ent_int,r10
        ｜        mov.l   r11,@-r15
        ｜        mov.l   r12,@-r15
        ｜        mov.l   r13,@-r15
        ｜        mov.l   r3,@-r15
        ｜        mov.l   r4,@-r15
        ｜        mov.l   r5,@-r15
        ｜        mov.l   r6,@-r15
        ｜        mov.l   r7,@-r15
        ｜        jsr     @r10
        ｜        mov.l   r0,@-r15
        ｜
        ｜         :
        ｜        mov.l   S__v3_ret_int,r10
        ｜        jsr     @r10
        ｜        nop
        ｜         :
        ｜        rte
        ｜        nop
        ｜
        ｜        bnd 4
        ｜        S__v3_ret_int: dd _v3_ret_int
        ｜        S__v3_ent_int: dd _v3_ent_int

■ 周期タイマと割込み管理機能（SH7729）

        SH7729 の周期タイマ割込みサービスルーチンと割込み管理機能は、n4i7729.c
        に定義されています。
        オプション指定は <op> と略記しています。

使用するハードウェア

        SH7729 内蔵 TMU を周期タイマとして使用しています。
        それ以外のタイマを用いる場合は、ユーザーで改造してください。

割込み周期の指定

        割込み周期は、MSEC マクロで決まります。デフォルトは 10 msec です。
        例えば、5 msec に変更する場合は、次の様にコンパイルしてください。

        (例) shc <op> -def=MSEC=5 n4i7729.c  ------------------- SHC
        (例) ccsh <op> -DMSEC=5 n4i7729.c  --------------------- Green Hills
        (例) gcc <op> -DMSEC=5 n4i7729.c  ---------------------- exeGCC
        (例) iccsh <op> -DMSEC=5 n4i7729.c  -------------------- EW
        (例) xccv n4i7729.c <op> -DMSEC=5 ---------------------- GAIO XASSV

クロックの指定

        ソースクロックのデフォルトは 33.3 MHz です。変更する場合は CLK
        マクロを定義してコンパイルしてください。
        値は [Hz] 単位の周波数です。
        例えば、16MHz に変更する場合は、次の様にコンパイルしてください。

        (例) shc  <op> -def=CLK=16000000 n4i7729.c  ------------ SHC
        (例) ccsh <op> -DCLK=16000000 n4i7729.c  --------------- Green Hills
        (例) gcc  <op> -DCLK=16000000 n4i7729.c  --------------- exeGCC
        (例) iccsh <op> -DCLK=16000000 n4i7729.c  -------------- EW
        (例) xccv n4i7729.c <op> -DCLK=16000000 ---------------- GAIO XASSV

チャネル番号の指定

        CH マクロで、使用する TMU チャネルを指定できます（CH=0～2）。デフォ
        ルトは CH=0 です。例えば、チャネル1 に変更する場合は、次の様にコン
        パイルしてください。

        (例) shc  <op> -def=CH=1 n4i7729.c  -------------------- SHC
        (例) ccsh <op> -DCH=1 n4i7729.c  ----------------------- Green Hills
        (例) gcc  <op> -DCH=1 n4i7729.c  ----------------------- exeGCC
        (例) iccsh <op> -DCH=1 n4i7729.c  ---------------------- EW
        (例) xccv n4i7729.c <op> -DSH=1 ------------------------ GAIO XASSV

割込み優先順位

        本ハンドラの、デフォルトの割込み優先順位は、7 です。これを変更する
        場合、IP マクロを定義してコンパイルしてください。ただし、カーネルよ
        り高優先にはできません（IP ≦ KNL_LEVEL）。本ハンドラより高優先度の
        割込みハンドラが有る場合、多重割込みが起こります。
        例えば、割込み優先順位 2 に変更する場合は、次の様にコンパイルしてく
        ださい。

        (例) shc  <op> -def=IP=2 n4i7729.c  -------------------- SHC
        (例) ccsh <op> -DIP=2 n4i7729.c  ----------------------- Green Hills
        (例) gcc  <op> -DIP=2 n4i7729.c  ----------------------- exeGCC
        (例) iccsh <op> -DIP=2 n4i7729.c  ---------------------- EW
        (例) xccv n4i7729.c <op> -DIP=2 ------------------------ GAIO XASSV

時間情報の取り出し

        時間情報を取り出す事が出来ないデバッガを用いて、RTOS対応機能を使用
        する場合は HOOKマクロを指定することにより、ソフト的に時間情報を生成
        します。

        例えば、コンピューテックスROMICE64で RTOSデバッグライブラリを使用し
        ている場合は、次の様にコンパイルしてください。

        (例) shc <op> -def=HOOK=2 n4i7729.c  ------------------- SHC
        (例) ccsh <op> -DHOOK=2 n4i7729.c  --------------------- Green Hills
        (例) gcc <op> -DHOOK=2 n4i7729.c  ---------------------- exeGCC
        (例) iccsh <op> -DHOOK=2 n4i7729.c  -------------------- EW
        (例) xccv n4i7729.c <op> -DHOOK=2 ---------------------- GAIO XASSV

dis_int, ena_int

        この２つのシステムコールは用意していませんので、個別の割込み禁止許
        可を行いたい場合は、各制御レジスタを直接アクセスしてください。


■ シリアル入出力ドライバ(SH7729）

        SH7729 ののシリアル入出力ドライバは、nos7729.c に定義されています。
        （コンパイルオプションは <op> と省略）
        ここに定義されている１チャネル分の処理は、nosio.c のシリアル入出力
        関数経由で呼び出されます。

カーネルの指定

        NORTi Version4 カーネルのシステムコールを使用することを宣言するため
        V4 マクロを定義します。（V3 マクロを定義した場合は、NORTi3 カーネル
        を使用か、NORTi3 互換システムコールとしてコンパイルされます。）

          (例) shc <op> -def=V4 nos7729.c  -------------------- SHC
          (例) gcc <op> -DV4 nos7729.c  ----------------------- exeGCC
          (例) ccsh <op> -DV4 nos7729.c  ---------------------- Green Hills
          (例) iccsh <op> -DV4 nos7729.c  --------------------- EW
          (例) xccv nos7729.c <op> -DV4 ----------------------- GAIO XASSV

チャネル番号の指定

        CH マクロで、論理チャネル番号を指定できます。（無指定時は、CH=0）
        CH は 0～3 を指定できます。
        CH0, CH1, CH2 マクロで、物理チャネル番号を変更できます。
        CH0 を定義すると、SCI を使うようにコンパイルされます。
        CH1 を定義すると、IrDA の SCIF を使うようにコンパイルされます。
        CH2 を定義すると、FIFO 付き SCIF を使うようにコンパイルされます。

        複数チャネルをリンクする場合は、重複しないモジュール名となるよう
        コンパイルしてください。

          (例) shc <op> -def=CH=1 nos7729.c  ------------------ SHC
          (例) gcc <op> -DCH=1 nos7729.c  --------------------- exeGCC
          (例) ccsh <op> -DCH=1 nos7729.c  -------------------- Green Hills
          (例) iccsh <op> -DCH=1 nos7729.c  ------------------- EW
          (例) xccv nos7729.c <op> -DCH=1 --------------------- GAIO XASSV

ボーレート･ジェネレータ

        ソースクロックのデフォルトは 33.3 MHz です。変更する場合 は CLKマクロ
        を定義してコンパイルしてください。
        値は [Hz] 単位の周波数です。

          (例) shc <op> -def=CLK=25000000 nos7729.c  ---------- SHC
          (例) gcc <op> -DCLK=25000000 nos7729.c  ------------- exeGCC
          (例) ccsh <op> -DCLK=25000000 nos7729.c  ------------ Green Hills
          (例) iccsh <op> -DCLK=25000000 nos7729.c  ----------- EW
          (例) xccv nos7729.c <op> -DCLK=25000000 ------------- GAIO XASSV

送受信バッファサイズの指定

        受信／送信バッファのサイズを、BUFSZ マクロにより定義してコンパイル
        してください。受信バッファと異なるサイズの送信バッファを用いる場合
        は、さらに TXBUFSZ マクロを定義してください。
        未指定時は、受信／送信バッファ共 1024 バイトとなります。

          (例) 受信バッファ, 送信バッファ共 128 バイト BUFSZ=128
          (例) 受信バッファ128, 送信バッファ 64 バイト BUFSZ=128, TXBUFSZ=64

ソフトウェア･フロー制御

        XON/XOFF キャラクタによるフロー制御を用いない場合、NOXON マクロを定
        義してコンパイルしてください。コードサイズと処理速度を節約できます。

ハードウェアフロー制御（CH0 と CH1）

          チャネル0 /RTS 信号 を SCK0/SCPT[1] 端子に接続してください。
          チャネル0 /CTS 信号 を /IRQ0 端子に接続してください。
          チャネル1 /RTS 信号 を SCK1/SCPT[3] 端子に接続してください。
          チャネル1 /CTS 信号 を /IRQ1 端子に接続してください。

          ハードフローを用いない場合は、NOFLW マクロ定義してコンパイルしてく
          ださい。コードサイズと処理速度を節約できます。

ハードウェアフロー制御（CH2）

          SCIF 内蔵の RTS-CTS 機能を使い、ソフトウェアに依らず行います。

割込み優先順位

        本ハンドラの、デフォルトの割込み優先順位は、8 です。
        これを変更する場合、IP マクロを定義してコンパイルしてください。
        ただし、カーネルより高優先にはできません。（IP ≦ KNL_LEVEL）
        本ハンドラより高優先度の割込みハンドラが有る場合、多重割込みが起こ
        ります。例えば、割込み優先順位 2 の場合は、次のようにコンパイルして
        ください。

          (例) shc <op> -DIP=2 nos7729.c  ---------------------- SHC
          (例) gcc <op> -DIP=2 nos7729.c  ---------------------- exeGCC
          (例) ccsh <op> -DIP=2 nos7729.c  --------------------- Green Hills
          (例) iccsh <op> -DIP=2 nos7729.c  -------------------- EW
          (例) xccv nos7729.c <op> -DCLK=IP=2  ----------------- GAIO XASSV

未サポート機能

        調歩同期式モードのみで、クロック同期式モードはサポートしていません。
        内蔵ボーレートジェネレータのみで、外部クロック入出力はサポートして
        いません。
        DTR 信号出力、DSR 信号入力、CD 信号入力はサポートしていません。
        SH7729 特有のマルチプロセッサモードはサポートしていません。


■ サンプルプログラムについて

        付属のサンプルには特定のハードウェアに依存している部分があります。
        特に、次のポイントに注意してカスタマイズしてください。
        smp7729 の RAM を 08C100000～ に変更する例を示します。コンパイルオ
        プションは <op> と略記しています。

初期化のスキップ

        プログラム実行時に既に初期化されている場合があります。このような場合
        プログラムで再初期化を行うと、DRAMにロードされていたプログラムが破壊
        される可能性があります。
        サンプルプログラムでは、リフレッシュタイマコントロール／ステータスレ
        ジスタ（RTCSR）にゼロ(初期値)以外が入っていると初期化をスキップします。

データ領域

        データ領域を、RAM 先頭に修正してください。

        (例) smp7729.sub:
               START VECT(080000000),P,C,D(080001000),R,B,STACK(08C100000)
                                              ----------------- SHC
        (例) smp7729.lnk: .data 0x8C100000  ------------------- Green Hills
        (例) smp7729.lnk: .data 0x8C100000  ------------------- exeGCC
        (例) smp7729i.xcl : -Z(DATA).........=08C100000-xxxxxxx  ---- EW
        (例) smp7729b.xls : /addr = 8C100000
                            /sect = D0*|comm (data = _DATA0)  --- GAIO XASSV

スタックポインタ初期値

        SHCとexeGCCでは、SP 初期値を RAM 最終アドレス+1 に修正してくださ
        い。

        (例) smp7729?h.mak: asmsh vec7729h.asm <op> -def=_INIT_STACK="H'8D000000"
                                            ------------------- SHC
        (例) smp7729g.lnk : __stack_init = 0x8D000000  -------- exeGCC
        (例) vec7729?.xas :  DD  08D000000h  ------------------ GAIO XASSV

        Green Hills と EW では、スタック容量を調整してください。

        (例) smp7729c.lnk : .stack   align(4) pad(0x?????)  --- Green Hills
        (例) smp7729i.xcl: -Z(DATA).....,CSTACK+?????,...  ---- EW

クロック

        周期タイマ割込みハンドラのクロックの定義（CLK マクロ）を、システム
        に合わせて修正してください（下記の例では 16 MHz）。

        (例) smp7729bh.mak: shc <op> -def=CLK=16000000 n4i7729.c
                                             ------------------ SHC
        (例) smp7729bg.mak: CFLAGS = <op> -DCLK=16000000 n4i7729.c
                                             ------------------ exeGCC
        (例) smp7729bc.mak: ccsh <op> -DCLK=16000000 n4i7729.c
                                             ------------------ Green Hills
        (例) smp7729bi.mak: iccsh <op> -DCLK=16000000 n4i7709.c
                                             ------------------ EW
        (例) smp7709?x.mak: xccv n4i7709.c <op> -DCLK=16000000
                                             ------------------ GAIO XASSV

ハードウェア初期化

        プロセッサの初期化（ウェイト数設定）やポート初期化部分も必要に応じ
        てユーザーで作成してください。
        メモリの初期設定などプログラムの最初に処理が必要な場合、ベクタ設定
        vec7729?.asm(sh, s70) のリセットベクタに追加してください。


■トラブルシューティング

main 関数まで来ない時

        NORTi を組み込んだプログラムでも、main 関数で syssta(); を実行する
        までは、通常のシングルタスクのプログラムです。
        NORTi を組み込まない単純なプログラムで main 関数まで来るように、ス
        タートアップを見直して下さい。
        ・RAM 使用の前に、チップセレクト（バス幅）等の設定、DRAM の初期化が
          終わっているか。
        ・各セクションのアドレス定義は正しいか。
        ・DRAM にプログラムをロードする場合、実行後に初期化を行っていないか。
          （このような場合は、予め初期化されており、DRAM の再初期化によって
            ロードされているプログラムが破壊されることがあります。）

sysini でハングアップする時

        sysini() から呼び出す intini() 関数で、割込みベクタの初期設定を行っ
        ています。intini 関数にブレークポイントを設定し、初期化内容がシステ
        ムと合致しているか確認してください。
        また、スタックポインタが正しいか確認してください。SH では、sysini()
        に来るまでスタックを使用しない場合があり、必ずスタックを使用する
        sysini() でハングアップすることがあります。

        nocfg?.h をインクルードしているファイルをコンパイルする際には SH3
        マクロを定義しているかを確認してください。

syssta からリターンする時

        先に実行した cre_??? や sta_tsk でエラーがあった場合、syssta を実行
        しても、マルチタスクへ移行せずにリターンしてきます。
        システム変数 SYSER（int 型）のエラーコードをウォッチしながら、main
        をステップ実行し、原因を特定して下さい。ID 上限のチェックでエラーと
        なることが考えられます。他に、cre_??? でエラーとなる場合、メモリ不
        足が考えれれます。

get_mpl, get_mpf や rcv_mbx でハングアップする時

        引数にポインタへのポインタを渡しているか（& を付け忘れていないか）
        確認してください。

rel_mpl, rel_mpf や snd_mbx でハングアップする時

        メモリブロックやメッセージのアドレスが奇数でないか調べてください。

割込みがかかると暴走する時

        割込みハンドラ定義情報のあるファイルをコンパイルする際には SH3 マク
        ロを定義しているかを確認してください。

        main 関数は無事に通過するが、マルチタスクへ移行しようとすると暴走す
        る場合、まず、割込みハンドラを外してみてください。具体的には、
        intsta(); を外してください。これで暴走が止まる場合、割込みハンドラ
        への分岐処理が正しいか見直して下さい。また、割込みハンドラのコード
        展開も確認して下さい。
-------------------------------------------------------------------------------

