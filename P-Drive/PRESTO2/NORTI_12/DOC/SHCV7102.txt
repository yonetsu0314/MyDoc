==============================================================================

                   はじめにお読みください(SHCV7102.TXT)
                              2003年 8月18日

                Copyright (c) MiSPO Co., Ltd. 1991-2003
                       http://www.mispo.co.jp/

==============================================================================

 この度は、「NORTi Version 4」をお買い上げいただきありがとうございました。

 本READMEファイルには、ルネサスC/C++コンパイラVer.7.1.02ご使用に際して重要
 な補足説明が記載されています。「NORTi」をご使用になる前にご一読くださるよ
 うお願いいたします。なお、使用方法に関する詳細な内容は、各「NORTi Version
 4 ユーザーズガイド」を参照ください。

本ファイルには以下の説明が含まれています。

 ・ライブラリを使わない場合 ...
 ・ルネサスCでの割込みコード展開例   ...

※注意
    ルネサスC Ver.6.x  ルネサスC Ver.7.x では標準ライブラリを各ユーザが作成
    しなければなりません。そのままサンプルのコンパイル/リンクを行うとライブ
    ラリリンクエラーを起こします。この標準ライブラリを作成するのに便利なバ
    ッチファイルを用意しましたので V7V6Stdlib.pdf を読んで標準ライブラリを
    生成して下さい。

==============================================================================

■ ルネサスCでの割込みコード展開例

        割込みハンドラはＣ言語で記述できます。割込みハンドラには、#pragma
        interrupt を指定してください。

      | /* 割込み処理関数 */
      | void int_func(void)
      | {
      |     ...                 /* 実際の割込み処理 */
      | }
      |
      | /* 割込み入り口の記述 */
      | #pragma interrupt(inthdr)
      | INTHDR inthdr(void)
      | {
      |     ent_int();
      |     int_func();         /* 関数をただ一つ記述して下さい */
      |     ret_int();
      | }

        割込み優先度がカーネルレベル以下の割込みハンドラのコンパイルには、必ず
        最適化オプション -op=1 を付け、ent_int 呼び出しの前に、不要な命令が生
        成されないよう注意し、以下のようなコードが展開されることを確認してくだ
        さい。デバッグ情報生成 -deb オプションの併用は可能です。
        また、割込み優先度がカーネルレベルより高い割込みハンドラの場合は、この
        制限はありませんが ent_int, ret_int を含めた一切のシステムコールを使用
        することが出来ません。


SH-1, SH-2, SH2-DSP の場合のコード展開例。

_inthdr:
          MOV.L       R0,@-R15        ; #pragma interrupt を定義すると
          MOV.L       R1,@-R15        ; コンパイラが
          MOV.L       R2,@-R15        ; R7 〜 R0 と PR を退避するコード
          MOV.L       R3,@-R15        ; を生成します
          MOV.L       R4,@-R15
          MOV.L       R5,@-R15
          MOV.L       R6,@-R15
          MOV.L       R7,@-R15
          STS.L       PR,@-R15
          MOV.L       L???,R2         ; _v3_ent_int 呼出し
          JSR         @R2
          NOP
            :
          MOV.L       L???+4,R2       ; _v3_ret_int 呼出し
          JSR         @R2             ; _v3_ret_int で直接割込みリターンす
          NOP                         ; るので以降のコードは使われません。
          LDS.L       @R15+,PR
          MOV.L       @R15+,R7
          MOV.L       @R15+,R6
          MOV.L       @R15+,R5
          MOV.L       @R15+,R4
          MOV.L       @R15+,R3
          MOV.L       @R15+,R2
          MOV.L       @R15+,R1
          MOV.L       @R15+,R0
          RTE
          NOP
L???:
          .DATA.L     _v3_ent_int
          .DATA.L     _v3_ret_int


SH-2E の場合のコード展開例。

_inthdr:
          MOV.L       R0,@-R15    ; #pragma interrupt を定義すると
          MOV.L       R1,@-R15    ; コンパイラが
          MOV.L       R2,@-R15    ; R7 〜 R0, FR11 〜 FR0, PR,
          MOV.L       R3,@-R15    ; FPUL と FPSCR を
          MOV.L       R4,@-R15    ; 退避するコードを生成します
          MOV.L       R5,@-R15
          MOV.L       R6,@-R15
          MOV.L       R7,@-R15
          STS.L       PR,@-R15
          FMOV.S      FR0,@-R15
          FMOV.S      FR1,@-R15
          FMOV.S      FR2,@-R15
          FMOV.S      FR3,@-R15
          FMOV.S      FR4,@-R15
          FMOV.S      FR5,@-R15
          FMOV.S      FR6,@-R15
          FMOV.S      FR7,@-R15
          FMOV.S      FR8,@-R15
          FMOV.S      FR9,@-R15
          FMOV.S      FR10,@-R15
          FMOV.S      FR11,@-R15
          STS.L       FPUL,@-R15
          STS.L       FPSCR,@-R15
          MOV.L       L???,R2     ; _v3_ent_int 呼出し
          JSR         @R2
          NOP
            :
          MOV.L       L???+4,R2   ; _v3_ret_int 呼出し
          JSR         @R2         ; _v3_ret_intで直接割込みリターンす
          NOP                     ; るので以降のコードは使われません
          LDS.L       @R15+,FPSCR
          LDS.L       @R15+,FPUL
          FMOV.S      @R15+,FR11
          FMOV.S      @R15+,FR10
          FMOV.S      @R15+,FR9
          FMOV.S      @R15+,FR8
          FMOV.S      @R15+,FR7
          FMOV.S      @R15+,FR6
          FMOV.S      @R15+,FR5
          FMOV.S      @R15+,FR4
          FMOV.S      @R15+,FR3
          FMOV.S      @R15+,FR2
          FMOV.S      @R15+,FR1
          FMOV.S      @R15+,FR0
          LDS.L       @R15+,PR
          MOV.L       @R15+,R7
          MOV.L       @R15+,R6
          MOV.L       @R15+,R5
          MOV.L       @R15+,R4
          MOV.L       @R15+,R3
          MOV.L       @R15+,R2
          MOV.L       @R15+,R1
          MOV.L       @R15+,R0
          RTE
          NOP
L???:
          .DATA.L     _v3_ent_int
          .DATA.L     _v3_ret_int


SH-3, SH3-DSP の場合のコード展開例。

_inthdr:
          MOV.L       R0,@-R15    ; #pragma interrupt を定義すると
          MOV.L       R1,@-R15    ; コンパイラが
          MOV.L       R2,@-R15    ; R0 〜 R7 と PR SSR SPC を退避す
          MOV.L       R3,@-R15    ; るコードを生成します
          MOV.L       R4,@-R15
          MOV.L       R5,@-R15
          MOV.L       R6,@-R15
          MOV.L       R7,@-R15
          STS.L       PR,@-R15
          STC         SSR,@-R15
          STC         SPC,@-R15
          MOV.L       L13,R2      ; _v3_ent_int 呼出し
          JSR         @R2
          NOP
          MOV.L       L13+4,R2    ; _v3_ret_int 呼出し
          JSR         @R2         ; _v3_ret_intで直接割込みリターンす
          NOP                     ; るので以降のコードは使われません
          LDC         @R15+,SPC
          LDC         @R15+,SSR
          LDS.L       @R15+,PR
          MOV.L       @R15+,R7
          MOV.L       @R15+,R6
          MOV.L       @R15+,R5
          MOV.L       @R15+,R4
          MOV.L       @R15+,R3
          MOV.L       @R15+,R2
          MOV.L       @R15+,R1
          MOV.L       @R15+,R0
          RTE
          NOP
L???:
          .DATA.L _v3_ent_int
          .DATA.L _v3_ret_int


SH-4 Single/Double の場合のコード展開例。

_inthdr:
          MOV.L       R0,@-R15    ; #pragma interrupt を定義すると
          MOV.L       R1,@-R15    ; コンパイラが
          MOV.L       R2,@-R15    ; R7 〜 R0, FR11 〜 FR0, PR,
          MOV.L       R3,@-R15    ; FPUL と FPSCR を
          MOV.L       R4,@-R15    ; 退避するコードを生成します
          MOV.L       R5,@-R15
          MOV.L       R6,@-R15
          MOV.L       R7,@-R15
          STS.L       PR,@-R15
          FMOV.S      FR0,@-R15
          FMOV.S      FR1,@-R15
          FMOV.S      FR2,@-R15
          FMOV.S      FR3,@-R15
          FMOV.S      FR4,@-R15
          FMOV.S      FR5,@-R15
          FMOV.S      FR6,@-R15
          FMOV.S      FR7,@-R15
          FMOV.S      FR8,@-R15
          FMOV.S      FR9,@-R15
          FMOV.S      FR10,@-R15
          FMOV.S      FR11,@-R15
          STS.L       FPUL,@-R15
          STS.L       FPSCR,@-R15
          STC         SSR,@-R15
          STC         SPC,@-R15
          MOV.L       L???,R2   ; _v3_ent_int 呼出し
          JSR         @R2
          NOP
            :
          MOV.L       L???+4,R2 ; _v3_ret_int 呼出し
          JSR         @R2       ; _v3_ret_intで直接割込みリターンす
          NOP                   ; るので以降のコードは使われません
          LDC         @R15+,SPC
          LDC         @R15+,SSR
          LDS.L       @R15+,FPSCR
          LDS.L       @R15+,FPUL
          FMOV.S      @R15+,FR11
          FMOV.S      @R15+,FR10
          FMOV.S      @R15+,FR9
          FMOV.S      @R15+,FR8
          FMOV.S      @R15+,FR7
          FMOV.S      @R15+,FR6
          FMOV.S      @R15+,FR5
          FMOV.S      @R15+,FR4
          FMOV.S      @R15+,FR3
          FMOV.S      @R15+,FR2
          FMOV.S      @R15+,FR1
          FMOV.S      @R15+,FR0
          LDS.L       @R15+,PR
          MOV.L       @R15+,R7
          MOV.L       @R15+,R6
          MOV.L       @R15+,R5
          MOV.L       @R15+,R4
          MOV.L       @R15+,R3
          MOV.L       @R15+,R2
          MOV.L       @R15+,R1
          MOV.L       @R15+,R0
          RTE
          NOP
L???:
          .DATA.L     _v3_ent_int
          .DATA.L     _v3_ret_int


SH-4 Mix の場合のコード展開例。

_inthdr:
          MOV.L       R0,@-R15    ; #pragma interrupt を定義すると
          MOV.L       R1,@-R15    ; コンパイラが
          MOV.L       R2,@-R15    ; R7 〜 R0, FR11 〜 FR0, PR,
          MOV.L       R3,@-R15    ; FPUL と FPSCR を
          MOV.L       R4,@-R15    ; 退避するコードを生成します
          MOV.L       R5,@-R15
          MOV.L       R6,@-R15
          MOV.L       R7,@-R15
          MOV.L       R14,@-R15
          STS.L       PR,@-R15
          FMOV.S      FR0,@-R15
          FMOV.S      FR1,@-R15
          FMOV.S      FR2,@-R15
          FMOV.S      FR3,@-R15
          FMOV.S      FR4,@-R15
          FMOV.S      FR5,@-R15
          FMOV.S      FR6,@-R15
          FMOV.S      FR7,@-R15
          FMOV.S      FR8,@-R15
          FMOV.S      FR9,@-R15
          FMOV.S      FR10,@-R15
          FMOV.S      FR11,@-R15
          STS.L       FPUL,@-R15
          STS.L       FPSCR,@-R15
          STC         SSR,@-R15
          STC         SPC,@-R15
          MOV.L       L???,R2    ; _v3_ent_int 呼出し
          MOV.L       L???+4,R14 ; H'FFE7FFFF
          JSR         @R2
          NOP
          STS         FPSCR,R2
          AND         R14,R2
          BSR         xxxxxx    ; ユーザー作成の割込み関数
          LDS         R2,FPSCR
          MOV.L       L???+8,R6 ; _v3_ret_int
          STS         FPSCR,R2
          AND         R14,R2
          JSR         @R6       ; _v3_ret_intで直接割込みリターンする
          LDS         R2,FPSCR  ; ので以降のコードは使われません
          LDC         @R15+,SPC
          LDC         @R15+,SSR
          LDS.L       @R15+,FPSCR
          LDS.L       @R15+,FPUL
          FMOV.S      @R15+,FR11
          FMOV.S      @R15+,FR10
          FMOV.S      @R15+,FR9
          FMOV.S      @R15+,FR8
          FMOV.S      @R15+,FR7
          FMOV.S      @R15+,FR6
          FMOV.S      @R15+,FR5
          FMOV.S      @R15+,FR4
          FMOV.S      @R15+,FR3
          FMOV.S      @R15+,FR2
          FMOV.S      @R15+,FR1
          FMOV.S      @R15+,FR0
          LDS.L       @R15+,PR
          MOV.L       @R15+,R14
          MOV.L       @R15+,R7
          MOV.L       @R15+,R6
          MOV.L       @R15+,R5
          MOV.L       @R15+,R4
          MOV.L       @R15+,R3
          MOV.L       @R15+,R2
          MOV.L       @R15+,R1
          MOV.L       @R15+,R0
          RTE
          NOP
L???:
          .DATA.L     _v3_ent_int
          .DATA.L     H'FFE7FFFF
          .DATA.L     _v3_ret_int

