==============================================================================

              TCP/IP プロトコルスタック補足説明書 (TCPIP.TXT)
                              2003年05月

                Copyright (c) MiSPO Co., Ltd. 1991-2003
                         http://www.mispo.co.jp

==============================================================================
■ はじめに

  本ファイルには、TCP/IPに固有な情報が記載されています。
  マニュアルには記載されていないコンフィグレーションの情報やサンプルプログラム
  の説明が記載されております。
  CPUに固有な情報に関しては各(CPU名).TXTを参照ください。
  ターゲットボードに固有な情報に関しては各(BOARD名).TXTを参照ください。

■ サンプルプログラム

  NORTi Version4のサンプルプログラム(netxxxx.c)
  には以下のアプリケーションプロトコルのサンプルを使用しています。

    クライアント機能
        ping, ftp, Telnet, DNSリゾルバ, DHCP, UDP Echo, TCP Echo

    サーバ機能
        コンソールshell, Telnet, FTP, TFTP, UDP Echo, TCP Echo

    その他
        LANパケットトレース

■ ネットワークアプリケーションサンプルファイル

NETSMP\INC
        noncons.h ------- コンソールプログラムサンプルヘッダ
        nonecho.h ------- Echoサーバーサンプルヘッダ
        nonfile.h ------- ファイルシステムサンプルヘッダ
        nonftp.h  ------- FTPデーモンサンプルヘッダ
        nonteln.h ------- Telnetデーモンサンプルヘッダ
        nontftp.h ------- TFTPサーバーサンプルヘッダ


NETSMP\SRC
        noncons.c ------- コンソールプログラムサンプルソース
        nondhcp.c ------- DHCPクライアントサンプルソース
        nondump.c ------- LANパケットダンプソース
        nonechc.c ------- Echoクライアントサンプルソース
        nonecho.c ------- Echoサーバーサンプルソース
        nonedns.c ------- DNSリゾルバサンプルソース
        nonfile.c ------- ファイルシステムサンプルソース
        nonftpc.c ------- FTPクライアントサンプルソース
        nonftpd.c ------- FTPデーモンサンプルソース
        nonping.c ------- pingコマンドサンプルソース
        nonramd.c ------- ファイルシステムRAM-DISKドライバ
        nonshel.c ------- コマンドシェルサンプルソース
        nontelc.c ------- Telnetクライアントサンプルソース
        nonteld.c ------- Telnetデーモンサンプルソース
        nontftp.c ------- TFTPサーバーサンプルソース

■ 定義

    プログラムを起動する前に各設定値を環境に合った値に設定して下さい。
    以下の変数は各nonecfg.cに定義されています。

    ethernet_addr  ----- Ethernet(MAC)アドレス
    default_ipaddr  ---- デフォルトローカルIPアドレス
    default_gateway ---- デフォルトゲートウェイ
    subnet_mask -------- サブネットマスク

    ※ゲートウェイを使用しない場合、デフォルトゲートウェイの値は0を設定して下さ
      い。

    以下の変数は各nondhcp.cに定義されています。

    dhcp_ipaddr -------- DHCPサーバーIPアドレス
    dns_ipaddr --------- DNSサーバーIPアドレス

    ネットワークアプリケーション起動前にDHCPの機能を使用して、上記の値を取得す
    ることが出来ます。その場合、各netxxx.cファイルをコンパイルする際に、DHCPマ
    クロを定義してください。プログラム起動後、DHCPサーバーから上記のパラメータ
    データを取得することが出来ます。(MACアドレスを除く)

    また、DUMPマクロにより、シリアルポート(CH1 ボーレート38400)にLANパケットの
    パケットトレースを行うことが出来ます。

■ Telnetコンソール操作手順

    ターゲットボード上で本テストプログラムを動作させるための条件および手順は、
    次のとおりです。

  (1) 前述の説明に従って、テストプログラムのロードモジュールファイルを構築し
      ます。
  (2) デバッガを使ってロードモジュールファイルをロードし、実行します。
  (3) コンソールサーバからの出力として、シリアル(CH0 ボーレート9600)端末上に
     「login: 」プロンプトが表示されますので、適当なユーザIDを入力してログイ
      ンします。（ユーザIDとパスワードは何も登録されていないので、何を入力し
      てもログインできます）
  (4) シリアル端末上コンソールから上述の各クライアント機能を起動するコマンド
      を入力すると、それぞのコマンドに対応するネットワーク通信を実行すること
      ができます。（？ or HELPで対応コマンドが出力されます）
  (5) ターゲットボードで動作しているサーバ機能を試すには、ネットワーク上の他
      のホストから各サーバ機能と通信するクライアントコマンドを実行します。
      telnetクライアントを使うと、コンソールと同様にターゲットホストへログイ
      ンすることが可能です。

■ サンプルプログラムコマンドについて

  【共通】
    ping        pingを使用できます。
                例：ping 192.168.100.1
    ftp         ftpクライアントを使用できます。
    telnet      telnetクライアントを使用できます。
    dns         DNSリゾルバを使用できます。
                例: dns www.mispo.co.jp [DNSサーバーアドレス]
    dhcp        DHCPからデータを取得します。
                ※この際IPアドレスが更新されると今まで起動していたプログラムと
                  通信が行なわれなくなることに注意してください。

    techo       TCPエコーを実行します。
    uecho       UDPエコーを実行します。
    ip          現在設定されている、IPアドレスなどを表示します。

■ ブロードキャストIPパケット送受信について
        ブロードキャストパケットが送受信できるのはUDPのみです。
        送受信を行うためには、upd_set_opt関数を使用してブロードキャストの送受
        信を有効にします。
        送信はIPアドレスを255.255.255.255（リミテッドブロードキャスト）
        に送信します。

        T_UDP_CCEP udp_cep = {0, {IPV4_ADDRANY, UDP_PORTANY}, NULL};
        BOOL optval;

        /* UDP端点生成 */
        udp_cre_cep(cepid, &udp_cep);

        /* ブロードキャストの送受信を有効に */
        udp_set_opt(cepid, IP_BROADCAST, (VP)TRUE, sizeof(BOOL));

        /* ブロードキャストパケットの送信 */
        dstaddr.ipaddr = 0xFFFFFFFF;
        dstaddr.portno = UDP_PORT_NO;
        udp_snd_dat(cepid, &dstaddr, &pkt, sizeof(pkt), TMO_FEVR);

■ マルチキャストIPパケットの送受信について
        マルチキャストIPパケットが送受信できるのはUDPのみです。
        クラスD IPアドレスの送信、受信とIGMPをサポートします。
        送信を行うには単純に送信先にマルチキャストアドレスを指定するだけです。
        受信を行うにはマルチキャストアドレスのグループへの参加が必要です。

        T_UDP_CCEP udp_cep = {0, {IPV4_ADDRANY, UDP_PORTANY}, NULL};
        UB ipaddr[] = { 225, 6, 7, 8 }; /* マルチキャストアドレス */
        T_IPV4EP addr;

        /* UDP端点生成 */
        udp_cre_cep(cepid, &udp_cep);

        /* マルチキャストパケットの送信 */
        dstaddr.ipaddr = byte4_to_long(ipaddr);
        dstaddr.portno = UDP_PORT_NO;
        udp_snd_dat(cepid, &dstaddr, &pkt, sizeof(pkt), TMO_FEVR);

        /* マルチキャストアドレス 225.6.7.8への参加 */
        addr.ipaddr = byte4_to_long(ipaddr);
        addr.portno = 1100;
        udp_set_opt(cepid, IP_ADD_MEMBERSHIP, (VP)&addr, sizeof(mreq));

        /* マルチキャストパケットの受信 */
        udp_rcv_dat(cepid, &dstaddr, &pkt, sizeof(pkt), TMO_FEVR);

        /* マルチキャストアドレス 225.6.7.8への解除 */
        udp_set_opt(cepid, IP_DROP_MEMBERSHIP, (VP)&addr, sizeof(mreq));

   ※マルチキャストパケットの送受信を行うにはデバイスドライバが
     マルチキャストパケットの送受信を行える設定になっている必要があります。

■ Ver4.08.09より追加されたコンフィグレーション

以下の設定はVer4.08.09より追加されました。従来の方法と同様にnonetc.hを
#includeする前に、次の定数を記述することでコンフィグレーション可能です。

/*****************************************************************************/
/* 再送リトライ回数                                                          */
/*****************************************************************************/
#define TCP_SYN_RETRY   3       /* SYN送信の最大リトライ回数 */
#define TCP_DATA_RETRY  12      /* データ送信の最大リトライ回数 */

例）タイムアウトの送信間隔

合計12回
<-><--><--><---><---><----><-----><-----><-----><-----><-----><-----> E_CLS
 3s 6s  12s 24s  48s   64s   64s    64s    64s    64s    64s    64s

再送リトライは上記回数、再送を行った後E_CLSエラーになります。

/*****************************************************************************/
/* 再送時間（500ミリ秒単位)                                                  */
/*****************************************************************************/
#define TCP_RTO_INI     3000    /* (3秒) 再送時間の初期値 */
#define TCP_RTO_UBOUND  64000   /* (64秒)タイムアウトの上位境界 */
#define TCP_RTO_LBOUND  300     /* (300ミリ秒) タイムアウトの下位境界 */

※ Ver4.08.10から上記の3つの設定方法が変更されています。
Ver4.08.09で上記3つの値を変更されている場合はご注意ください。

/*****************************************************************************/
/* キープアライブ(秒単位)                                                    */
/*****************************************************************************/
#define TCP_KTIME_INI   7200  /* キープアライブパケットが送信されるまでの時間 */
                              /* 0以下の場合はキープアライブ無効 */
#define TCP_KTIME_PRO   600   /* キープアライブタイムアウト */
#define TCP_KTIME_SUC   75    /* キープアライブパケットの送信インターバル */

例）キープアライブパケットの送信間隔

<---------------------><------><----->...... E_CLSエラー
     7200 seconds       75sec + 75sec       = 600 sec

/*****************************************************************************/
/* ARPテーブル
/*****************************************************************************/
#define ARP_CACHE_TOUT 1200  /* (20分) ARPテーブルのリフレッシュ時間間隔 */
#define ARP_RET_INTVAL    2  /* (2秒)  ARPの再送間隔 */

/*****************************************************************************/
/* Time To Live
/*****************************************************************************/
#define IP_DEF_TTL       32  /* 32 */

/*****************************************************************************/
/* IPフラグメント
/*****************************************************************************/
#define IPF_REASM_TMO     2  /* IPフラグメントパケットの受信処理タイムアウト */


