/*======================================================================
 * File name    : pcom001.c
 * Original	: 
 *----------------------------------------------------------------------
 * Function 	: 予約交信
 *----------------------------------------------------------------------
 *$Header: p:/nhic/main/ccw/rcs/pcom001.c 1.4 1970/01/01 00:00:00 ryoji Exp $
 *$Log: pcom001.c $
 * リビジョン 1.4  1970/01/01  00:00:00  ryoji
 * 2007/04/02 22:00:00
 * 前レビジョンの修正が仕様書と違っていたので、再度修正する。
 * 
 * リビジョン 1.3  1970/01/01  00:00:00  ryoji
 * 2007/03/10 05:00:00
 * 予約３桁仕様でも使用できるよう 予約番号の桁数をディップスイッチ(SW3-4)で
 * 可変できるようにする。桁数は、OFFの場合 2 で、ONの場合 3 となる。
 * 
 * リビジョン 1.2  1998/09/01  14:04:10  yonetsu
 * dev_no と txfunc_id の比較に、devno_comp_mesid(dev_no,txfunc_id) を使用する。
 * 
 * リビジョン 1.1  1998/08/26  18:28:43  yonetsu
 * 初期リビジョン
 * 
 *----------------------------------------------------------------------
 *		(c) Copyright 1995-1998, ISHIDA CO., LTD.
 *		959-1 SHIMOMAGARI RITTO-CHO KURITA-GUN
 *		SHIGA JAPAN
 *		(077) 553-4141
 *======================================================================
 */
#define _PCOM001_C_

#include	<assert.h>			/* ANSI std		*/
#include	<stdlib.h>			/* ANSI std		*/
#include	<string.h>			/* ANSI std		*/
#include	<rxif\rx116.h>			/* Show include		*/

#include	"rxdef.h"
#include	"mbx003.h"
#include	"fnctbl.h"
#include	"tagdef.h"
#include	"adrs.h"
#include	"hcmd.h"
#include	"ccwdef.h"
#include	"decimal.h"
#include	"txfnc_id.h"
#include	"pcom001.h"

/*----------------------------------------------------------------------*/
/* void rcu_to_precom(int dev_no,int len,const unsigned char *buf,	*/
/*	const unsigned char *non_accpt_cmd,				*/
/*	const unsigned char *accpt_cmd )				*/
/*----------------------------------------------------------------------*/
/* 説明                                                  		*/
/*    RCU から受信した、予約交信に関係するコマンドを、予約交信タスクに	*/
/*    送る。								*/
/*----------------------------------------------------------------------*/
/* 引き数								*/
/* 戻り値								*/
/*----------------------------------------------------------------------*/
void rcu_to_precom(
	int dev_no,
	int len,
	const unsigned char *buf,
	const unsigned char *non_accpt_cmd,
	const unsigned char *accpt_cmd
	)
{
	unsigned char 		cmd;
	int 			c1c2;
	struct	arc_rcu_pkt	*p = (struct arc_rcu_pkt *)buf;
	struct	pcom_msg 	pre;
	const struct prechg_txt2_rcu	*ptr2;
	const struct prechg_txt3_rcu	*ptr3;

	if(!len)			return;
	if(is_arcnet(dev_no))	 {
		c1c2 = p->tag;
		cmd = p->cmd;
		if (get_pno_digit() == 3) {
			ptr3 = (const struct prechg_txt3_rcu *)&p->param;
		} else {
			ptr2 = (const struct prechg_txt2_rcu *)&p->param;
		}
	} else {
		c1c2 = buf[0];
		cmd = buf[1];
		if (get_pno_digit() == 3) {
			ptr3 = (const struct prechg_txt3_rcu *)&buf[2];
		} else {
			ptr2 = (const struct prechg_txt2_rcu *)&buf[2];
		}
	}
	if(!((c1c2 == TAG3_C1) || (c1c2 == TAG3_C2)))		return;
	if(!is_double_mode() && (c1c2 == TAG3_C2))		return;
	c1c2 = c1c2 - TAG3_C1;

	if(!is_accpt_cmd(cmd,non_accpt_cmd,accpt_cmd))		return;

	pre.priority = 0;
	pre.cmd = cmd;
	pre.pre_no = 0;
	if(cmd == PRE_NUM_CMD) {
		if (get_pno_digit() == 3) {
			pre.pre_no = adec2i((sizeof(ptr3->pre_no)),(char *)ptr3->pre_no);
		} else {
			pre.pre_no = adec2i((sizeof(ptr2->pre_no)),(char *)ptr2->pre_no);
		}
	}
	tx_pre_mail(c1c2,&pre);
	if(is_double_mode())		return;
	tx_pre_mail(C2_,&pre);
}

/*----------------------------------------------------------------------*/
/* void precom_to_rcu(int dev_no,int len,const unsigned char *buf,	*/
/*	const unsigned char *non_accpt_cmd,				*/
/*	const unsigned char *accpt_cmd )				*/
/*									*/
/*----------------------------------------------------------------------*/
/* 説明                                                  		*/
/*    予約通信ポートから受信した、予約交信に関係するコマンドを、処理	*/
/*    する。								*/
/*----------------------------------------------------------------------*/
/* 引き数								*/
/* 戻り値								*/
/*----------------------------------------------------------------------*/
void precom_to_rcu(
	int dev_no,
	int len,
	const unsigned char *buf,
	const unsigned char *non_accpt_cmd,
	const unsigned char *accpt_cmd
	)
{
	struct	pcom_msg 	pre;
	int			c1c2,err;
	union aap		mbxaa,mplaa;

	if(!len)			return;

	pre.priority = 0;
	pre.pre_no = 0;
	pre.cmd = buf[0];

	switch(buf[0]) {
	    case PRECOM_EOT:
	    case PRECOM_ENQ:
	    case PRECOM_ACK:
	    case PRECOM_NAK:
		;
		break;
	    case PRECOM_STX:
		if((buf[1] == PRE_NUM_CMD) || (buf[1] == PRE_REQ_CMD)) {
			pre.cmd = buf[1];
			if(buf[1] == PRE_NUM_CMD) {
				if ((get_pno_digit()==3) && (buf[4]=='*')) {
					pre.pre_no = adec2i(4,(char *)&buf[5]);
				} else {
					pre.pre_no = adec2i(2,(char *)&buf[2]);
				}
			}
		}
		else	pre.cmd = 0;	/* command error */
	   	break;
	    default:
		pre.cmd = 0;		/* command error */
	}
	if(devno_comp_mesid(dev_no,TX_EXT_C1_PRE))		c1c2 = C1_; /* C1 側のポートから受信 */
	else	if(devno_comp_mesid(dev_no,TX_EXT_C2_PRE))	c1c2 = C2_; /* C2 側のポートから受信 */
	else	return;

	err = MPL_ADR( &mplaa.acadr, MPL_ID0 );
	if(err) { 
		assert(!err);		return;
	}
	err = MBX_ADR( &mbxaa.acadr, (unsigned int)(PRECOM_MBX_ID0+c1c2));
	if(err) { 
		assert(!err);		return;
	}
	err = mbx_snd_msg( &pre, sizeof(pre),(sizeof(pre)/16)+1, mbxaa, mplaa);
	if(err) { 
		assert(!err);		return;
	}
}
