/*----------------------------------------------------------------------
 * File name	: tadcdrv.h	/ tadc driver prototype			
 *----------------------------------------------------------------------
 *$Header: p:/presto2/shinc/drive/RCS/tadcdrv.h 1.1 1970/01/01 00:00:00 chimura Exp $
 *$Log: tadcdrv.h $
 * リビジョン 1.1  1970/01/01  00:00:00  chimura
 * 初期リビジョン
 * 
 *----------------------------------------------------------------------
 *Header: p:/include/drive/rcs/tadcdrv.h 2.4 1995/03/09 11:31:49 sato
 *Log: tadcdrv.h
 * リビジョン 2.4  1995/03/09  11:31:49  sato
 *----------------------------------------------------------------------
 *		(c) Copyright 1988, ISHIDA SCALES MFG. CO., LTD.	
 *		959-1 SHIMOMAGARI RITTO-CHO KURITA-GUN			
 *		SHIGA JAPAN						
 *		(0775) 53-4141						
 *----------------------------------------------------------------------
 */

#include	<custom\typedefs.h>	/* Show include			*/

#if	!defined(TADCDRV_H)
#define	TADCDRV_H

void	adc0_int_hdr(void);		/* adc#0 interrupt handler	*/
void	adc1_int_hdr(void);		/* adc#1 interrupt handler	*/

#define TAP_MAX		(64)		/* 最大タップ数			*/

#define	OVER_FLOW	(0x01<<1)	/* オーバーフロー発生		*/
#define	UNDER_FLOW	(0x01<<2)	/* アンダーフロー発生		*/
#define	WT_UNSTABLE	(0x01<<5)	/* 計量データ不安定		*/
#define	AFV_REV_ERROR	(0x01<<6)	/* ＡＦＶ補正エラー		*/
#define	WEIGH_CAL_ERROR	(0x01<<7)	/* 計量値算出エラー		*/
#define	DOUBLE_ITEM	(0x01<<8)	/* 二個乗り			*/

#define	ST0_DATA	(0x01<<0)	/* 原波形データ			*/
#define	ST1_FIL_DATA	(0x01<<1)	/* １ｓｔフィルタ後データ	*/
#define ST2_FIL_DATA	(0x01<<2)	/* ２ｎｄフィルタ後データ	*/
#define ST3_FIL_DATA	(0x01<<3)	/* ３ｒｄフィルタ後データ	*/
#define ST3_ZERO_DATA	(0x01<<4)	/* ３ｒｄゼロキャンセルデータ	*/
#define ST3_CHG_DATA	(0x01<<5)	/* ３ｒｄ重量カウント換算データ	*/
#define ST4_FIL_DATA	(0x01<<6)	/* ４ｔｈフィルタ後データ	*/
#define ST4_ZERO_DATA	(0x01<<7)	/* ４ｔｈゼロキャンセルデータ	*/
#define ST4_CHG_DATA	(0x01<<8)	/* ４ｔｈ重量カウント換算データ	*/

enum {
	CH1,				/* 計量セル			*/
	CH2,				/* ＡＦＶセル			*/
	AD_CH_MAX,			/* ＡＤチャンネル数		*/

	SYS_DATA = 4			/* システム別計量データ		*/
};
enum {
	WEI1,
	WEI2,
	WEI_CH_MAX			/* 計量チャンネル数		*/
};
enum {
	F1ST,				/* １ｓｔフィルタ		*/
	F2ND,				/* ２ｎｄフィルタ		*/
	F3RD,				/* ３ｒｄフィルタ		*/
	F4TH,				/* ４ｔｈフィルタ		*/
	STAGE_MAX			/* フィルタ・ステージ数		*/
};
enum {
	SUCCESS = 1,			/* 正常				*/
	PARA_ERROR = -1			/* 異常（パラメータエラー）	*/
};
enum {
	NO_ADJUST,			/* 未調整			*/
	LIMIT_OVER = 2,			/* 許容値を越えた場合		*/
	OVER_RANGE			/* オーバーレンジ		*/
};
enum {
	X_MEMORY,			/* Ｘメモリ			*/
	Y_MEMORY			/* Ｙメモリ			*/
};


/*----------------------------------------------------------------------*/
/*	<<< argument 1 >>>						*/
/*----------------------------------------------------------------------*/
enum ad_id {
	ADC1,				/* ADC borad-1 ID		*/
	ADC2,				/* ADC borad-2 ID		*/
	AD_MAX
};
typedef enum ad_id	AD_ID;


/*----------------------------------------------------------------------*/
/* ドライバーの初期化							*/
/*----------------------------------------------------------------------*/
int  ad_sys_init(int pwb);


/*----------------------------------------------------------------------*/
/* イニシャルパラメータブート						*/
/*----------------------------------------------------------------------*/
/*----------------------*/
/* 引数パラメータ	*/
/*----------------------*/
enum {
	AFV_SYSTEM,			/* ＡＦＶシステム		*/
	DOUBLE_SYSTEM			/* ２点計量システム		*/
};
enum {
	AZ_OFF,				/* 自動零点調整オフ		*/
	AZ_ON				/* 自動零点調整オン		*/
};
enum {
	D_4TH,				/* 目量の１／４			*/
	D_8TH				/* 目量の１／８			*/
};
enum {
	ZERO_SW0,			/* 零点粗調整ＳＷ０		*/
	ZERO_SW1,			/*      〃       １		*/
	ZERO_SW2			/*      〃       ２		*/
};
enum {
	GAIN_SW0,			/* ゲインＳＷ０			*/
	GAIN_SW1			/*      〃   １			*/
};
enum {
	AFV_OFF,			/* ＡＦＶオフ			*/
	AFV_AUTO,			/* ＡＦＶオート			*/
	AFV_ON				/* ＡＦＶオン			*/
};
enum {
	PROD_STOP,			/* 動作状態 停止中		*/
	PROD_RUN,			/*    〃    運転中		*/
	PROD_DYNAMIC			/*    〃    動補正中		*/
};
typedef struct 	adapk01s1 {
	WORD	zda;			/* 零点ＤＡ値			*/
	WORD	zad_tgt;		/* 零点ＡＤ値目標		*/
	WORD	zad_ul;			/* 零点ＡＤ値上限		*/
	WORD	zad_ll;			/* 零点ＡＤ値下限		*/
	WORD	az_slct;		/* 自動零点調整、零トラッキング	*/
	WORD	ztr_ad;			/* 零トラッキング１回補正ＡＤ値	*/
} ADAPK01S1;
typedef struct	adapk01 {
	WORD	system;			/* システム選択			*/
	WORD	stbl_jdge_mthd;		/* 安定判定方法選択		*/
	struct adapk01s1 ch[AD_CH_MAX];	/* 零点構造体			*/
	WORD	zero_sw;		/* 零点粗調整ＳＷ		*/
	WORD	gain_sw;		/* ゲインＳＷ選択		*/
	WORD	span_tgtwcnt;		/* スパン目標重量カウント	*/
	WORD	span_coef;		/* スパン係数			*/
	WORD	span_coef_ul;		/* スパン係数上限		*/
	WORD	span_coef_ll;		/* スパン係数下限		*/
	WORD	mode;			/* ＡＦＶ（予備）モード		*/
	WORD	gain;			/* ＡＦＶ（バランス）ゲイン	*/
	DWORD	coef;			/* ＡＦＶ（バランス）係数	*/
	WORD	coef_ul;		/* ＡＦＶ（バランス）係数上限	*/
	WORD	coef_ll;		/* ＡＦＶ（バランス）係数下限	*/
	WORD	tare_weight;		/* 風袋重量カウント値		*/
	WORD	prod_status;		/* 動作状態			*/
} ADAPK01;
/*----------------------*/
/* 戻値パラメータ	*/
/*----------------------*/
enum {
	SYS_MISMATCH = -2		/* システム選択ミスマッチ	*/
};
typedef struct	adrpk01 {
	WORD	result;			/* 結果				*/
	WORD	prog_no;		/* プログラム番号		*/
	WORD	rev_int_no;		/* リビジョン番号（整数部）	*/
	WORD	rev_deci_no;		/* リビジョン番号（小数部）	*/
	WORD	min_3rd_filspan;	/* ３ｒｄフィルタスパン		*/
} ADRPK01;
/*----------------------*/
/* 関数			*/
/*----------------------*/
int  ad_init_boot(int pwb, struct adapk01 *arg, struct adrpk01 *ret);


/*----------------------------------------------------------------------*/
/* フィルタ情報ブート							*/
/*----------------------------------------------------------------------*/
/*----------------------*/
/* 引数パラメータ	*/
/*----------------------*/
typedef struct	adapk02 {
	WORD	fil_permit_tm;		/* フィルタ許容時間		*/
	WORD	afv_fil_no;		/* 無負荷時ＡＦＶフィルタ番号	*/
	WORD	smpl_tm;		/* サンプリング時間		*/
} ADAPK02;
/*----------------------*/
/* 戻値パラメータ	*/
/*----------------------*/
typedef struct	adrpk02 {
	WORD	result;			/* 結果				*/
	WORD	filtm_3rd;		/* ３ｒｄフィルタ時間		*/
	WORD	filtm_4th;		/* ４ｔｈフィルタ時間		*/
} ADRPK02;
/*----------------------*/
/* 関数			*/
/*----------------------*/
int  ad_info_boot(int pwb, struct adapk02 *arg, struct adrpk02 *ret);


/*----------------------------------------------------------------------*/
/* 計量物データ・ブート							*/
/*----------------------------------------------------------------------*/
/*----------------------*/
/* 引数パラメータ	*/
/*----------------------*/
typedef struct	adapk04 {
	WORD	trans_tm;		/* 乗り継ぎ時間			*/
	WORD	std_wcnt;		/* 基準重量カウント値		*/
} ADAPK04;
/*----------------------*/
/* 戻値パラメータ	*/
/*----------------------*/
typedef struct	adrpk04 {
	WORD	result;			/* 結果				*/
} ADRPK04;
/*----------------------*/
/* 関数			*/
/*----------------------*/
int  ad_wdt_boot(int pwb, struct adapk04 *arg, struct adrpk04 *ret);


/*----------------------------------------------------------------------*/
/* 零点ＡＤ値ブート							*/
/*----------------------------------------------------------------------*/
/*----------------------*/
/* 引数パラメータ	*/
/*----------------------*/
typedef struct	adapk16 {
	WORD	boot_bp;		/* ブート・ビットパターン	*/
	DWORD	zad[AD_CH_MAX];		/* 零点ＡＤ値			*/
} ADAPK16;
/*----------------------*/
/* 戻値パラメータ	*/
/*----------------------*/
typedef struct	adrpk16 {
	WORD	result;			/* 結果				*/
} ADRPK16;
/*----------------------*/
/* 関数			*/
/*----------------------*/
int  ad_zad_boot(int pwb, struct adapk16 *arg, struct adrpk16 *ret);


/*----------------------------------------------------------------------*/
/* 手動零点調整								*/
/*----------------------------------------------------------------------*/
/*----------------------*/
/* 引数パラメータ	*/
/*----------------------*/
typedef struct	adapk05 {
	WORD	abp;			/* ＤＡ調整チャンネルＢＰ	*/
} ADAPK05;
/*----------------------*/
/* 戻値パラメータ	*/
/*----------------------*/
typedef struct	adrpk05s1 {
	WORD	adj_result;		/* 調整結果			*/
	WORD	zda;			/* 零点ＤＡ値			*/
	DWORD	zad;			/* 零点ＡＤ値			*/
} ADRPK05S1;
typedef struct	adrpk05 {
	WORD	result;			/* 結果				*/
	struct adrpk05s1 ch[AD_CH_MAX];	/* 零点構造体			*/
} ADRPK05;
/*----------------------*/
/* 関数			*/
/*----------------------*/
int  ad_mzero(int pwb, struct adapk05 *arg, struct adrpk05 *ret);


/*----------------------------------------------------------------------*/
/* スパン調整								*/
/*----------------------------------------------------------------------*/
/*----------------------*/
/* 引数パラメータ	*/
/*----------------------*/
/*----------------------*/
/* 戻値パラメータ	*/
/*----------------------*/
enum {
	L_LIMIT_ERROR = -4,		/* 異常（下限未満の場合）	*/
	U_LIMIT_ERROR,			/* 異常（上限を越えた場合）	*/
	NO_LODE_ERROR			/* 異常（ノーロードエラー）	*/
};
typedef struct	adrpk06 {
	WORD	result;			/* 結果				*/
	WORD	span_coef;		/* スパン係数			*/
} ADRPK06;
/*----------------------*/
/* 関数			*/
/*----------------------*/
int  ad_span(int pwb, struct adrpk06 *ret);


/*----------------------------------------------------------------------*/
/* 自動零点調整								*/
/*----------------------------------------------------------------------*/
/*----------------------*/
/* 引数パラメータ	*/
/*----------------------*/
/*----------------------*/
/* 戻値パラメータ	*/
/*----------------------*/
/*----------------------*/
/* パラメータ		*/
/*----------------------*/
typedef struct	adppk07s1 {
	WORD	adj_result;		/* 調整結果			*/
	DWORD	zad;			/* 零点ＡＤ値			*/
} ADPPK07S1;
typedef struct	adppk07 {
	WORD	result;			/* 結果				*/
	struct adppk07s1 ch[AD_CH_MAX];	/* 零点構造体			*/
} ADPPK07;
/*----------------------*/
/* 関数			*/
/*----------------------*/
int  ad_azero(int pwb);
int  chk_azero(int pwb, struct adppk07 *par);


/*----------------------------------------------------------------------*/
/* ＡＦＶ調整								*/
/*----------------------------------------------------------------------*/
/*----------------------*/
/* 引数パラメータ	*/
/*----------------------*/
/*----------------------*/
/* 戻値パラメータ	*/
/*----------------------*/
enum {
	AFV_ERROR = -2			/* 異常（ＡＦＶ調整エラー）	*/
};
typedef struct	adrpk08 {
	WORD	result;			/* 結果				*/
	DWORD	afv_coef;		/* ＡＦＶ係数			*/
} ADRPK08;
/*----------------------*/
/* 関数			*/
/*----------------------*/
int  ad_afv_adj(int pwb, struct adrpk08 *ret);


/*----------------------------------------------------------------------*/
/* バランス調整								*/
/*----------------------------------------------------------------------*/
/*----------------------*/
/* 引数パラメータ	*/
/*----------------------*/
/*----------------------*/
/* 戻値パラメータ	*/
/*----------------------*/
typedef struct	adrpk09 {
	WORD	result;			/* 結果				*/
	DWORD	bal_coef;		/* バランス係数			*/
} ADRPK09;
/*----------------------*/
/* 関数			*/
/*----------------------*/
int  ad_bal_adj(int pwb, struct adrpk09 *ret);


/*----------------------------------------------------------------------*/
/* 計量データ要求、応答							*/
/*----------------------------------------------------------------------*/
/*----------------------*/
/* 引数パラメータ	*/
/*----------------------*/
typedef struct	adapk10 {
	WORD	ch;			/* 要求チャンネル番号		*/
	WORD	stage;			/* ステージ番号			*/
} ADAPK10;
/*----------------------*/
/* 戻値パラメータ	*/
/*----------------------*/
typedef struct	adrpk10 {
	WORD	status;			/* ステータス			*/
	DWORD	wcnt;			/* 重量カウント値		*/
} ADRPK10;
/*----------------------*/
/* 関数			*/
/*----------------------*/
int  ad_swt_read(int pwb, struct adapk10 *arg, struct adrpk10 *ret);


/*----------------------------------------------------------------------*/
/* エラーデータ詳細情報要求、応答					*/
/*----------------------------------------------------------------------*/
/*----------------------*/
/* 引数パラメータ	*/
/*----------------------*/
/*----------------------*/
/* 戻値パラメータ	*/
/*----------------------*/
typedef struct	adrpk11 {
	WORD	err_inf;		/* エラー詳細情報		*/
} ADRPK11;
/*----------------------*/
/* 関数			*/
/*----------------------*/
int  ad_err_read(int pwb, struct adrpk11 *ret);


/*----------------------------------------------------------------------*/
/* 駆動計量開始、応答							*/
/*----------------------------------------------------------------------*/
/*----------------------*/
/* 引数パラメータ	*/
/*----------------------*/
/*----------------------*/
/* 戻値パラメータ	*/
/*----------------------*/
typedef struct	adrpk12 {
	WORD	status;			/* ステータス			*/
	DWORD	wcnt;			/* 重量カウント値		*/
} ADRPK12;
/*----------------------*/
/* 関数			*/
/*----------------------*/
int  ad_d3wt_trg(int pwb, struct adrpk12 *ret);
int  ad_d3wt_trg_with_sck(int pwb, struct adrpk12 *ret);


/*----------------------------------------------------------------------*/
/* 動補正開始、応答							*/
/*----------------------------------------------------------------------*/
/*----------------------*/
/* 引数パラメータ	*/
/*----------------------*/
/*----------------------*/
/* 戻値パラメータ	*/
/*----------------------*/
typedef struct	adrpk17 {
	WORD	status;			/* ステータス			*/
	DWORD	ad;			/* ＡＤ値			*/
	WORD	dynamic_span_coef;	/* 動補正スパン係数		*/
} ADRPK17;
/*----------------------*/
/* 関数			*/
/*----------------------*/
int  ad_dynamic_calib(int pwb, struct adrpk17 *ret);


/*----------------------------------------------------------------------*/
/* メモリ・リード							*/
/*----------------------------------------------------------------------*/
/*----------------------*/
/* 引数パラメータ	*/
/*----------------------*/
typedef struct	adapk13 {
	WORD	addr;			/* 先頭番地			*/
	WORD	x_y_memory;		/* Ｘ／Ｙメモリ			*/
	WORD	nof_data;		/* データ数（ワード単位	）	*/
} ADAPK13;
/*----------------------*/
/* 戻値パラメータ	*/
/*----------------------*/
typedef struct	adrpk13 {
	WORD	addr;			/* 先頭番地			*/
	WORD	x_y_memory;		/* Ｘ／Ｙメモリ			*/
	WORD	nof_data;		/* データ数（ワード単位	）	*/
	WORD	data[251];		/* データ列			*/
} ADRPK13;
/*----------------------*/
/* 関数			*/
/*----------------------*/
int  ad_mem_rd(int pwb, struct adapk13 *arg, struct adrpk13 *ret);


/*----------------------------------------------------------------------*/
/* メモリライト								*/
/*----------------------------------------------------------------------*/
/*----------------------*/
/* 引数パラメータ	*/
/*----------------------*/
typedef struct	adapk14 {
	WORD	addr;			/* 先頭番地			*/
	WORD	x_y_memory;		/* Ｘ／Ｙメモリ			*/
	WORD	nof_data;		/* データ数（ワード単位	）	*/
	WORD	data[251];		/* データ列			*/
} ADAPK14;
/*----------------------*/
/* 戻値パラメータ	*/
/*----------------------*/
typedef struct	adrpk14 {
	WORD	result;			/* 結果				*/
} ADRPK14;
/*----------------------*/
/* 関数			*/
/*----------------------*/
int  ad_mem_wr(int  pwb, struct adapk14 *arg, struct adrpk14 *ret);


/*----------------------------------------------------------------------*/
/* モニタ開始								*/
/*----------------------------------------------------------------------*/
/*----------------------*/
/* 引数パラメータ	*/
/*----------------------*/
typedef struct	adapk15 {
	WORD	stage;			/* データステージ		*/
	WORD	nof_data;		/* データ数（ワード単位	）	*/
} ADAPK15;
/*----------------------*/
/* 戻値パラメータ	*/
/*----------------------*/
/*----------------------*/
/* 関数			*/
/*----------------------*/
int  ad_mon_start(int pwb, struct adapk15 *arg);
int  ad_mon_stop(int  pwb);

#endif	/* TADCDRV_H	*/
