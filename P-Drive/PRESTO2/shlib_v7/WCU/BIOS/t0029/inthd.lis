*** SuperH RISC engine ASSEMBLER Ver. 5.1 ***    01/07/08 14:44:58                                                       PAGE     1
PROGRAM NAME =

    1                               1     ;*----------------------------------------------------------------------*;
    2                               2     ;* File name    : inthd.asm     /                                       *;
    3                               3     ;*----------------------------------------------------------------------*;
    4                               4     ;*$Header: p:/presto2/shlib_v7/wcu/bios/src/rcs/inthd.asm 1.3 1970/01/01 00:00:00 chimura
    5                               5     ;*$Log: inthd.asm $
    6                               6     ; リビジョン 1.3  1970/01/01  00:00:00  chimura
    7                               7     ; 2004/01/08 17:00
    8                               8     ; NORTi Ver4.0に合わせる。
    9                               9     ; 以下、MISPOからの回答
   10                              10     ; 割込み発生から NORTi Ver.4 の割込みハンドラへ分岐するまで、どのよう
   11                              11     ; な処理を行うか、次のようになっています。
   12                              12     ; １．SRレジスタ以外は保存する。（使用したレジスタは復元する。）
   13                              13     ; ２．SRレジスタの RBビットをクリアする。
   14                              14     ; ３．SRレジスタの I0〜I3ビットに割込み発生要因のレベルを設定する。
   15                              15     ;
   16                              16     ; リビジョン 1.2  1970/01/01  00:00:00  chimura
   17                              17     ; 2003/09/23 12:00
   18                              18     ; 割り込み時、SSRとSPCを退避する。
   19                              19     ;
   20                              20     ; リビジョン 1.1  1970/01/01  00:00:00  chimura
   21                              21     ; 初期リビジョン
   22                              22     ;
   23                              23     ;*----------------------------------------------------------------------
   24                              24     ;*              (c) Copyright 2002, ISHIDA CO., LTD.
   25                              25     ;*              959-1 SHIMOMAGARI RITTO-CITY SHIGA JAPAN
   26                              26     ;*              (077) 553-4141
   27                              27     ;*----------------------------------------------------------------------*;
   28                              28     ;* Function                                                             *;
   29                              29     ;*----------------------------------------------------------------------*;
   30                              30     ;
   31                              31     ;  Interrupt handler Routine
   32                              32     ;
   33          FFFFFFD8            33     INTEVT: .equ    H'FFFFFFD8              ; 割り込み事象レジスタ
   34                              34     
   35                              35             .IMPORT _hard_int_tbl
   36 00000000                     36             .SECTION INT,CODE,ALIGN=4
   37 00000000                     37     __int:
   38                              38     ;       STC.L   SSR,@-R15 ;save SSR
   39                              39     ;       STC.L   SPC,@-R15 ;save SPC
   40 00000000 4F83                40             stc.l   r0_bank,@-r15           ; R0_BANK0 退避
   41 00000002 2F06                41             mov.l   r0,@-r15                ; R0_BANK1 退避
   42 00000004 2F16                42             mov.l   r1,@-r15                ; R1_BANK1 退避
   43 00000006 2F26                43             mov.l   r2,@-r15                ; R2_BANK1 退避
   44 00000008 2F36                44             mov.l   r3,@-r15                ; R3_BANK1 退避
   45 0000000A 4F13                45             stc.l   gbr,@-r15               ;push GBR
   46                              46     
   47 0000000C E0D8                47             mov     #INTEVT,r0
   48 0000000E 6102                48             mov.l   @r0,r1                  ; R1_BANK1 = INTEVTレジスタの例外コード;
   49 00000010 2118                49             tst     r1,r1                   ; if (例外コード == 0)
   50 00000012 8D35                50             bt/s    vect610_rte             ;    割込みリターンへ
   51 00000014 0009                51             nop
   52                              52     
   53 00000016 D122                53             mov.l   intevt2,r1              ;set INTEVT2
   54 00000018 6112                54             mov.l   @r1,r1                  ;
   55 0000001A 4109                55             shlr2   r1                      ;make address from INTEVT2
   56 0000001C 4101                56             shlr    r1                      ;
   57                              57     
*** SuperH RISC engine ASSEMBLER Ver. 5.1 ***    01/07/08 14:44:58                                                       PAGE     2
PROGRAM NAME =

   58 0000001E D016                58             MOV.L   #H'0,R0
   59 00000020 401E                59             LDC     R0,GBR
   60 00000022 D016                60             MOV.L   #H'78,R0
   61 00000024 3106                61             CMP/HI  R0,R1
   62 00000026 8901                62             BT      VECT_CK
   63 00000028 D020                63             MOV.L   IREQ_OUT,R0
   64 0000002A CDEF                64             AND.B   #H'EF,@(R0,GBR)
   65 0000002C                     65     VECT_CK:
   66                              66     
   67 0000002C D01D                67             mov.l   VECTadr02,r0            ;get start address of jump table
   68 0000002E 301C                68             add     r1,r0                   ;get jump table address
   69 00000030 6303                69             mov     r0,r3                   ;copy
   70 00000032 4109                70             shlr2   r1                      ;make address of priority table address
   71 00000034 C71E                71             mova    tbl,r0                  ;
   72 00000036 301C                72             add     r1,r0                   ;
   73 00000038 6000                73             mov.b   @r0,r0                  ;get priority
   74 0000003A 6203                74             mov     r0,r2                   ;copy
   75 0000003C 6103                75             mov     r0,r1                   ;copy
   76 0000003E 4201                76             shlr    r2                      ;check bit0
   77 00000040 890A                77             bt      set_sr                  ;
   78                              78     
   79 00000042 C908                79             and     #h'08,r0                ;make IPR address
   80 00000044 6203                80             mov     r0,r2                   ;
   81 00000046 C713                81             mova    ipr_add,r0              ;
   82 00000048 022E                82             mov.l   @(r0,r2),r2             ;
   83 0000004A 6013                83             mov     r1,r0                   ;
   84 0000004C C90F                84             and     #h'0f,r0                ;
   85 0000004E 302C                85             add     r2,r0                   ;
   86 00000050 6001                86             mov.w   @r0,r0                  ;IPRn -> r0
   87 00000052 E2FC                87             mov     #-4,r2                  ;
   88 00000054 412C                88             shad    r2,r1                   ;get shift number
   89 00000056 401D                89             shld    r1,r0                   ;shift priority
   90 00000058                     90     set_sr:
   91 00000058 C9F0                91             and     #h'f0,r0                ;
   92 0000005A D113                92             mov.l   SRbase,r1               ;
   93 0000005C 210B                93             or      r0,r1                   ;
   94                              94     
   95                              95     ;       ldc     r1,ssr                  ;set SSR
   96                              96     ;       mova    ret_hnd,r0              ;
   97                              97     ;       ldc     r0,spc                  ;set SPC
   98                              98     
   99 0000005E D013                99             MOV.L   IREQ_OUT,R0
  100 00000060 CF10               100             OR.B    #H'10,@(R0,GBR)
  101                             101     
  102 00000062 4F17               102             ldc.l   @r15+,gbr               ;
  103 00000064 6033               103             mov     r3,r0                   ;copy
  104 00000066 63F6               104             mov.l   @r15+,r3                ; R3_BANK1 復元
  105 00000068 62F6               105             mov.l   @r15+,r2                ; R2_BANK1 復元
  106 0000006A 410E               106             ldc     r1,sr                   ;set SR
  107                             107                                             ; ここで、RB=0 に切り替わる
  108 0000006C 0082               108             stc     r0_bank,r0              ; R0_BANK0 = R0_BANK1
  109 0000006E 4F97               109             ldc.l   @r15+,r1_bank           ; R1_BANK1 復元
  110 00000070 4F87               110             ldc.l   @r15+,r0_bank           ; R0_BANK1 復元
  111                             111     
  112 00000072 6002               112             mov.l   @r0,r0                  ; R0_BANK0 = _hard_int_tbl で登録の inthdr アドレ
  113 00000074 402B               113             jmp     @r0                     ; inthdr へ
  114 00000076 60F6               114             mov.l   @r15+,r0                ; R0_BANK0 復元
*** SuperH RISC engine ASSEMBLER Ver. 5.1 ***    01/07/08 14:44:58                                                       PAGE     3
PROGRAM NAME =

  115                             115     
  116                                     ***** BEGIN-POOL *****
  117 00000078 00000000                   DATA FOR SOURCE-LINE 58
  118 0000007C 00000078                   DATA FOR SOURCE-LINE 60
  119                                     ***** END-POOL *****
  120 00000080                    116     vect610_rte:                            ; 例外コード0の場合
  121 00000080 4F17               117             ldc.l   @r15+,gbr               ;
  122 00000082 63F6               118             mov.l   @r15+,r3                ; R3_BANK1 復元
  123 00000084 62F6               119             mov.l   @r15+,r2                ; R2_BANK1 復元
  124 00000086 61F6               120             mov.l   @r15+,r1                ; R1_BANK1 復元
  125 00000088 60F6               121             mov.l   @r15+,r0                ; R0_BANK1 復元
  126 0000008A 4F87               122             ldc.l   @r15+,r0_bank           ; R0_BANK0 復元
  127                             123     ;       LDC.L   @R15+,SPC
  128                             124     ;       LDC.L   @R15+,SSR
  129 0000008C 002B               125             rte                             ; 割込みリターン
  130 0000008E 0009               126             nop
  131                             127     
  132 00000090                    128     ret_hnd:
  133                             129     ;       LDC.L   @R15+,SPC
  134                             130     ;       LDC.L   @R15+,SSR
  135 00000090 002B               131             rte                             ;
  136 00000092 0009               132             nop                             ;
  137                             133     
  138 00000094                    134             .align  4
  139 00000094                    135     ipr_add:
  140 00000094 FFFFFEE2           136                     .data.l h'fffffee2
  141 00000098 00000000           137                     .data.l 0
  142 0000009C A400000E           138                     .data.l h'a400000e
  143 000000A0 A4000000           139     intevt2:        .data.l h'a4000000
  144 000000A4 00000000           140     VECTadr02:      .DATA.L _hard_int_tbl
  145 000000A8 50000000           141     SRbase:         .DATA.L H'50000000
  146 000000AC A400012E           142     IREQ_OUT:       .DATA.L H'A400012E
  147                             143     
  148                             144     ;code for priority(interrupt mask)
  149                             145     ;  bit7 - 4     : shift or priority
  150                             146     ;  bit3 - 0     : lower address
  151 000000B0                    147     tbl:
  152 000000B0 00                 148             .data.b 0               ;000    Power ON reset
  153 000000B1 00                 149             .data.b 0               ;020    Manual reset
  154 000000B2 00                 150             .data.b 0               ;040
  155 000000B3 00                 151             .data.b 0               ;060
  156 000000B4 00                 152             .data.b 0               ;080
  157 000000B5 00                 153             .data.b 0               ;0a0
  158 000000B6 00                 154             .data.b 0               ;0c0
  159 000000B7 00                 155             .data.b 0               ;0e0
  160 000000B8 00                 156             .data.b 0               ;100
  161 000000B9 00                 157             .data.b 0               ;120
  162 000000BA 00                 158             .data.b 0               ;140
  163 000000BB 00                 159             .data.b 0               ;160
  164 000000BC 00                 160             .data.b 0               ;180
  165 000000BD 00                 161             .data.b 0               ;1a0
  166 000000BE F1                 162             .data.b h'f1            ;1c0    NMI
  167 000000BF 00                 163             .data.b 0               ;1e0
  168 000000C0 F1                 164             .data.b h'f1            ;200    IRL15
  169 000000C1 E1                 165             .data.b h'e1            ;220       14
  170 000000C2 D1                 166             .data.b h'd1            ;240       13
  171 000000C3 C1                 167             .data.b h'c1            ;260       12
*** SuperH RISC engine ASSEMBLER Ver. 5.1 ***    01/07/08 14:44:58                                                       PAGE     4
PROGRAM NAME =

  172 000000C4 B1                 168             .data.b h'b1            ;280       11
  173 000000C5 A1                 169             .data.b h'a1            ;2a0       10
  174 000000C6 91                 170             .data.b h'91            ;2c0       9
  175 000000C7 81                 171             .data.b h'81            ;2e0       8
  176 000000C8 71                 172             .data.b h'71            ;300       7
  177 000000C9 61                 173             .data.b h'61            ;320       6
  178 000000CA 51                 174             .data.b h'51            ;340       5
  179 000000CB 41                 175             .data.b h'41            ;360       4
  180 000000CC 31                 176             .data.b h'31            ;380       3
  181 000000CD 21                 177             .data.b h'21            ;3a0       2
  182 000000CE 11                 178             .data.b h'11            ;3c0       1
  183 000000CF 00                 179             .data.b 0               ;3e0
  184 000000D0 80                 180             .data.b h'80            ;400    tuni0
  185 000000D1 C0                 181             .data.b h'c0            ;420    tuni1
  186 000000D2 00                 182             .data.b h'00            ;440    tuni2
  187 000000D3 00                 183             .data.b h'00            ;460    ticpi2
  188 000000D4 40                 184             .data.b h'40            ;480    ati
  189 000000D5 40                 185             .data.b h'40            ;4a0    pri
  190 000000D6 40                 186             .data.b h'40            ;4c0    cui
  191 000000D7 02                 187             .data.b h'02            ;4e0    eri
  192 000000D8 02                 188             .data.b h'02            ;500    rxi
  193 000000D9 02                 189             .data.b h'02            ;520    txi
  194 000000DA 02                 190             .data.b h'02            ;540    tei
  195 000000DB 82                 191             .data.b h'82            ;560    iti
  196 000000DC C2                 192             .data.b h'c2            ;580    rmci
  197 000000DD C2                 193             .data.b h'c2            ;5a0    rovi
  198 000000DE 00                 194             .data.b 0               ;5c0
  199 000000DF F1                 195             .data.b h'f1            ;5e0    H-UDI
  200 000000E0 48                 196             .data.b h'48            ;600    IRQ0
  201 000000E1 08                 197             .data.b h'08            ;620       1
  202 000000E2 C8                 198             .data.b h'c8            ;640       2
  203 000000E3 88                 199             .data.b h'88            ;660       3
  204 000000E4 4A                 200             .data.b h'4a            ;680       4
  205 000000E5 0A                 201             .data.b h'0a            ;6a0       5
  206 000000E6 00                 202             .data.b 0               ;6c0
  207 000000E7 00                 203             .data.b 0               ;6e0
  208 000000E8 8A                 204             .data.b h'8a            ;700    pint0-7
  209 000000E9 CA                 205             .data.b h'ca            ;720    pint8-15
  210 000000EA 00                 206             .data.b 0               ;740
  211 000000EB 00                 207             .data.b 0               ;760
  212 000000EC 00                 208             .data.b 0               ;780
  213 000000ED 00                 209             .data.b 0               ;7a0
  214 000000EE 00                 210             .data.b 0               ;7c0
  215 000000EF 00                 211             .data.b 0               ;7e0
  216 000000F0 8C                 212             .data.b h'8c            ;800    dei0
  217 000000F1 8C                 213             .data.b h'8c            ;820       1
  218 000000F2 8C                 214             .data.b h'8c            ;840       2
  219 000000F3 8C                 215             .data.b h'8c            ;860       3
  220 000000F4 CC                 216             .data.b h'cc            ;880    eri1
  221 000000F5 CC                 217             .data.b h'cc            ;8a0    rxi1
  222 000000F6 CC                 218             .data.b h'cc            ;8c0    bri1
  223 000000F7 CC                 219             .data.b h'cc            ;8e0    txi1
  224 000000F8 0C                 220             .data.b h'0c            ;900    eri2
  225 000000F9 0C                 221             .data.b h'0c            ;920    rxi2
  226 000000FA 0C                 222             .data.b h'0c            ;940    bri2
  227 000000FB 0C                 223             .data.b h'0c            ;960    txi2
  228 000000FC 4C                 224             .data.b h'4c            ;980    adi
*** SuperH RISC engine ASSEMBLER Ver. 5.1 ***    01/07/08 14:44:58                                                       PAGE     5
PROGRAM NAME =

  229                             225     
  230                             226             .END
  *****TOTAL ERRORS       0
  *****TOTAL WARNINGS     0
*** SuperH RISC engine ASSEMBLER Ver. 5.1 ***    01/07/08 14:44:58                                                       PAGE     6

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

INT                              INT      SCT  00000000     36*
INTEVT                                    EQU  FFFFFFD8     33*   47 
IREQ_OUT                         INT           000000AC     63    99   146*
SRbase                           INT           000000A8     92   145*
VECT_CK                          INT           0000002C     62    65*
VECTadr02                        INT           000000A4     67   144*
__int                            INT           00000000     37*
_hard_int_tbl                             IMPT 00000000     35   144 
intevt2                          INT           000000A0     53   143*
ipr_add                          INT           00000094     81   139*
ret_hnd                          INT           00000090    132*
set_sr                           INT           00000058     77    90*
tbl                              INT           000000B0     71   151*
vect610_rte                      INT           00000080     50   120*
*** SuperH RISC engine ASSEMBLER Ver. 5.1 ***    01/07/08 14:44:58                                                       PAGE     7

*** SECTION DATA LIST

SECTION                          ATTRIBUTE    SIZE             START

INT                              REL-CODE    0000000FD        
