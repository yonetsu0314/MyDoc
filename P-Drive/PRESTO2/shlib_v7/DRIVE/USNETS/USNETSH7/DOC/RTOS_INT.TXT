
FILE:  DOC\rtos_int.txt

This file contains notes on integrating various RTOSes with USNET.

=================================================

  MODIFICATION HISTORY:

  10-DEC-1999  BSK  Added ThreadX
  07-NOV-1999  NJW  Updated MultiTask! and TronTask! info for SH7000
  14-MAY-1999  NJW  Added note about rtoshdrs.h for MT! builds
  04-FEB-1999  TTT  Added note about TT on SH
  04-AUG-1998  TTT  Added TT! integration on SH2 and SH3
  07-JUL-1998  NJW  Added NOTE about mttest.c

=================================================

NOTE:  The multi-tasking test program mttest.c is copied from
       the INCLUDE\RTOS\$(RTOS) directory when the first build
       command is executed.  If the mttest.c file already exists
       in the APPSRC directory, the copy will not be done.  This
       means the mttest.c file should be deleted from the APPSRC
       directory if a new RTOS is selected.

=======================================

MultiTask! - USNET integration.

  NOTE:  MT! include file rtoshdrs.h is created when MT! is first
         built.  If USNET is built before MT!, an error will be
         generated by the compiler stateing it can not find
         file rtoshdrs.h.

  CPU:  I8086

    1.  Install USNET in directory defined by $(USROOTDIR).

    2.  Install MT! in a directory, assume directory c:\mt.

    3.  Edit file config.mak in $(USROOTDIR).

        a.  Set RTOS to mt:

            RTOS = mt

        b.  Set the include directory for RTOS header files:

            RTOS_INCLUDES = c:\mt

        c.  Define the RTOS libraries to be linked in.
            No extensions are necessary.

            RTOS_LIBS = mtX_Z

            where X = STCFG value from MT! makefile.
            Z = memory model; s, l, c, m, h, for x86 architecture.
            The name of this library depends on the target
            CPU.

        d.  Set other config.mak options as per readme.txt and
            the manual.

    4.  Compile MT!

        a.  Edit makefile to set PTH

        b.  If you are using the Microsoft compiler, make sure the
            /Fc switch is used in the compile flags (FCOPT = /Fc)

        c.  Make MT! libraries

            This also creates the rtoshdrs.h include file.

    5.  Copy MT! libraries from MT! install directory to
        $(USROOTDIR)\lib

    6.  Configure netconf.c in $(USROOTDIR)\netsrc

    7.  Edit the compiler.mak file in
        $(USROOTDIR)\CONFIG\I8086\your_compiler and set
        the memory model to the same one configured in the MT!
        makefile.

    8.  Goto the $(USROOTDIR) directory.

    9.  Compile mttest

        %> make mttest

    NOTES:  When running mttest on a PC, the Nputchr() routine
            is mapped to the MT! putchr() routine found in
            getput.asm.  The default setting for putchr() is
            to use DOS calls which are not reentrant.  Therefore,
            getput.asm should be edited and the macro USEBIOS
            should be set to 1 instead of 0.  This forces
            putchr() to use BIOS calls which are reentrant
            instead of DOS calls.   See file getput.asm for
            further details.

  CPU: I386

    1.  Install USNET in directory defined by $(USROOTDIR).

    2.  Install MT! in a directory, assume directory c:\mt.

    3.  Edit file config.mak in $(USROOTDIR).

        a.  Set RTOS to mt:

            RTOS = mt

        b.  Set the include directory for RTOS header files:

            RTOS_INCLUDES = c:\mt

        c.  Define the RTOS libraries to be linked in.
            No extensions are necessary.

            RTOS_LIBS = mtX_Z

            where X = TARGET value from MT! makefile.  This specifies
            which target board the MT! library was built for.  Possible
            values for TARGET are:

                1 = 386EX eval board
                4 = NS486SFX  Nation semiconductor eval board.

            Z = STCFG setting.

        d.  Set other config.mak options as per readme.txt and
            the manual.

    4.  Compile MT!

        a.  Edit makefile to set:

                TARGET:  Specific board support
                CSIMON:  Specify if CSi Mon is used
                LINK:    Specify Linker

            These must be the same settings as used for USNET.  See
            the compiler.mak file in $(USROOTDIR)\CONFIG\I386\$(COMPILER)
            for further information.

        b.  Make MT! libraries

    5.  Copy MT! libraries from MT! install directory to
        $(USROOTDIR)\lib

    6.  Configure netconf.c in $(USROOTDIR)\netsrc

    7.  Goto the $(USROOTDIR) directory.

    8.  Compile mttest

        %> make mttest

    NOTES:  USNET should use MT!'s version of the clock routine and
            I/O routines.  This means the when integrating USNET with
            MT! the following files may have to be modified:  suppaX.asm
            and driver.h.  These are located in DRVSRC\I386\$(COMPILER)
            directory.  The X in suppaX.asm represents the value set
            for TARGET in compiler.mak.

            In suppaX.asm, it may be necessary to comment out the
            following routines: usrclk, set_idt_entry, inp(), outp(),
            and outpw() in order to pull in the appropriate MT! routines
            during linking.  File driver.h may have to have the
            "#include <conio.h>" statement commented out.

  CPU:  SH7000 (SH2 or SH3)

    1.  Install USNET in directory defined by $(USROOTDIR).

    2.  Install MT! in a directory, assume directory C:\MT.

    3.  Edit file config.mak

        a.  Set RTOS to TronTask:

            RTOS = mt

        b.  Set the include directory for RTOS header files:

            RTOS_INC = C:\MT

        c.  Define the RTOS libraries to be linked in.

            RTOS_LIBS = mtX_Z.lib

            where X = STCFG value from MT! makefile.
            Z = Target (1,2,3 for SH1, SH2, or SH3).

        d.  Set other makefile options as per readme.txt, compnote.txt,
            and the manual.

    4.  Compile MT!

        a.  Edit makefile to set PTH

        b.  Make MT! libraries

    6.  Configure netconf.c with an entry for your particular hardware

    7.  Goto the $(USROOTDIR) directory.

        Make modifications according to processor indicated below:

        a. For SH3, make the following modifications in the
           in the DRVSRC\SH7000 directory

           i. Edit driver3.c: Replace the entire block:

                INTTAB_ENTRY new_vectortab[46] = { ... }

              with the single line:

                extern INTTAB_ENTRY new_vectortab[46];

          ii. Edit makefile: remove clocksh3.o from the FILES3 list.

       NOTES: The above modifications let us use the MultiTask!
              clock and interrupt service routines. See MT!
              clocksh3.c and ireqhand.s.

        b. No further modifications are necessary for SH2.

    8.  Version 6.28 of MT! passes a command line configuration
        macro to the compiler.  This macro is STCFG.  Edit
        the CONFIG\SH7000\HITACHI\compiler.mak file and
        added STCFG=x to the CFLAGS macro, where x is the
        setting used in the MT! makefile.

    8.  Make USNET libraries and mttest.

    NOTE: We tested this process on DENSAN SH7604 and SH7708 VME
          boards.  We found mttest.c will hang in the 500ms loop
          calibration.  Comment out this loop before running
          mttest.  The test program will run with out the
          calibration.

TronTask! - USNET Integration:

  CPU:  I8086

    1.  Install USNET in directory defined by $(USROOTDIR).

    2.  Install TT! in a directory, assume directory c:\tt.

    3.  Edit file config.mak in $(USROOTDIR).

        a.  Set RTOS to TronTask:

            RTOS = tt

        b.  Set the include directory for RTOS header files:

            RTOS_INCLUDES = c:\tt

        c.  Define the RTOS libraries to be linked in.
            No extensions are necessary.

            RTOS_LIBS = ttX_Z

            where X = STCFG value from TT! makefile.
            Z = memory model; s, l, c, m, h, for x86 architecture.
            The name of this library depends on the target
            CPU.

        d.  Set other config.mak options as per readme.txt and
            the manual.

    4.  Compile TT!

        a.  Edit makefile to set PTH

        b.  If you are using the Microsoft compiler, make sure the
            /Fc switch is used in the compile flags (FCOPT = /Fc)

        c.  Make TT! libraries

    5.  Copy TT! libraries from TT! install directory to
        $(USROOTDIR)\lib

    6.  Configure netconf.c in $(USROOTDIR)\netsrc

    7.  Edit the compiler.mak file in
        $(USROOTDIR)\CONFIG\I8086\your_compiler and set
        the memory model to the same one configured in the TT!
        makefile.

    8.  Goto the $(USROOTDIR) directory.

    9.  Compile mttest

        %> make mttest

    NOTES:  When running mttest on a PC, the Nputchr() routine
            is mapped to the TT! putchr() routine found in
            getput.asm.  The default setting for putchr() is
            to use DOS calls which are not reentrant.  Therefore,
            getput.asm should be edited and the macro USEBIOS
            should be set to 1 instead of 0.  This forces
            putchr() to use BIOS calls which are reentrant
            instead of DOS calls.   See file getput.asm for
            further details.

  CPU: SH7000 (SH2 or SH3)

    Note: These instructions assume the unix installation.

    1.  Install USNET in directory defined by $(USROOTDIR).

    2.  Install TT! in a directory, assume directory /usr/tt.

    3.  Edit file tt.mak

        a.  Set RTOS to TronTask:

            RTOS = tt

        b.  Set the include directory for RTOS header files:

            RTOS_INC = /usr/tt

        c.  Define the RTOS libraries to be linked in.

            RTOS_LIBS = $(RTOS_INC)/ttX_Z.lib

            where X = STCFG value from TT! makefile
            Z = Target (1,2,3 for SH1, SH2, or SH3).

        d.  Set other makefile options as per readme.txt, compnote.txt,
            and the manual.

    4.  Compile TT!

        a.  Edit makefile to set PTH

        b.  Make TT! libraries

    6.  Configure netconf.c

    7.  Goto the $(USROOTDIR) directory.

        Make modifications according to processor indicated below:

        a. For SH3, make the following modifications:

           i. rename ireqhand.s to something else, then make a symbolic
              link to the TT! ireqhand.s:

              ln -s /usr/tt/ireqhand.s ireqhand.s

          ii. make a symbolic link to TT! adefs.inc:

              ln -s /usr/tt/adefs.inc adefs.inc

         iii. edit driver3.c: Replace the entire block:

                INTTAB_ENTRY new_vectortab[46] = { ... }

              with the single line:

                extern INTTAB_ENTRY new_vectortab[46];

          iv. edit makefile.sh3: remove clocksh3.o from
              CPUOBJ and CPUOBJ_DEPENDS

       NOTES: The above modifications let us use the TronTask!
              clock and interrupt service routines. See TT!
              clocksh3.c and ireqhand.s.

        b. For SH2, make the following modifications:

           i. If using Hitachi startup code (see tt.mak:
              START = $(LPTH)/start.o), then
              edit suppa.s:
              comment out the following lines:
                _setvbr:
                       ldc    r4,vbr
                       rts
                       nop

          ii. Edit makefile.sh2: remove clock.o from
              CPUOBJ and CPUOBJ_DEPENDS.

    8.  Make USNET libraries and mttest (make -f tt.mak)

    NOTE: FTP.C and TFTP.C have been removed from the tt.mak file.
    This is because they both include <stdio.h>, and definitions
    in Hitachi's SH C compiler conflict with TronTask's mtio.h
    and mtstdio.h. Since SH does not have a filesystem, this should
    not be a problem.

HI-SH7 and HI-SH77

  CPU:  SH7000

    1.  These two version of Hitachi's uITron are supported for
        a UNIX development environment and the Hitachi SHC compiler only.

    2.  Install USNET on the UNIX machine specifying SH7000
        as the CPU, Hitachi as the compiler, and HI-SH7 or
        HI-SH77 as the RTOS.

    3.  When compiling, specify the makefile that corresponds
        to the selected RTOS:

           hi-sh7.mak:   SH1 and SH2 versions
           hi-sh77.mak:  SH3 version.

        These makefiles are specified by using the "-f" option
        of the make utility as follows:

           make -f hi-sh7.mak <target>

        where <target> is the name of the program to be built.

    4.  Makefile hi-sh77.mak only supports mttest.c and other programs
        that will use HI-SH77.  Note should be taken that mttest.c does
        not have a main() function but a main_task() task.  This task
        is initiated by the HI-SH77 system.

    NOTES: If non-Itron version of the test programs are needed,
           use the normal makefile.

           Read compnote.txt for further information about board
           level support.

ThreadX

    1.  Install USNET in directory defined by $(USROOTDIR).

    2.  Install ThreadX in a directory, assume directory c:\tx.

    3.  Edit file config.mak in $(USROOTDIR).

        a.  Set RTOS to ThreadX:

            RTOS = tx

        b.  Set the include directory for RTOS header files:

            RTOS_INCLUDES = c:\tx

        c.  Define the RTOS libraries to be linked in.
            No extensions are necessary.

            RTOS_LIBS = tx

        d.  Set other config.mak options as per readme.txt and
            the manual.

    4. Before compiling:
        A. Edit the file, include\rtos\tx\mtmacro.h, and
            change the following to appropriate values for
            the target environment:

                #define CLOCKHZ 18  /* Ticker frequency */
                #define STKSZ 1024  /* USNET task stack size */

        B. ThreadX may require special processing for the disabling
            and enabling of interrupts.  This is taken care of
            by redefining Ndisable() and Nenable() to the ThreadX
            interrupt control operation in include\rtos\tx\multi.c.
            The linker will not accept duplicate definitions, so
            the old declarations must be removed:
                i. Edit drvsrc\$(CPU)\$(COMPILER)\driver.h or
                    drvsrc\$(CPU)\driver.h and make sure that the
                    macros, ENABLE and DISABLE, are defined as
                    follows:
                        #define ENABLE() Ndisable()
                        #define DISABLE() Nenable()
                ii. Find the location where Ndisable() and Nenable()
                    are declared (usually drvsrc\$(CPU)\suppa.s
                    or drvsrc\$(CPU)\$(COMPILER)\suppa.s) and
                    either comment them out or rename them.

        C. USNET driver interrupt handlers access the kernel through
            the WAITNOMORE() operation.  ThreadX requires that any
            access to the kernel from an interrupt handler be done
            after calling __tx_thread_context_save() at the start
            of the handler.  At the conclusion of the handler, the
            code must perform a jump (not a call) to
            __tx_thread_context_restore().  The DOS version of this
            modification is supplied in include\rtos\tx\drvdos.asm
            as a reference.  For DOS applications, this code can
            replace the file, drvsrc\i8086\drvdos.c, in the build.

        D. Use the file, include\rtos\tx\mttest.c, as an example
            application of USNET/ThreadX integration.
            NOTE: The function uss_tx_init() must be called prior
            to the use of any USNET code while running ThreadX.
            Otherwise, the application will fail.  ThreadX has
            further information on application contraints.

        E. ThreadX has the option of including code that checks
            error conditions or code that does not.  To include
            the code that does not, TX_DISABLE_ERROR_CHECKING
            must be defined at compile time.  This is best done
            through a command line definition such as:
                CFLAGS += /DTX_DISABLE_ERROR_CHECKING

    5. Compiling
        On the command line and in the root directory, type
        "make mttest" where 'make' refers to the Opus make
        utility and 'mttest' refers to the USNET/ThreadX
        application to build.
